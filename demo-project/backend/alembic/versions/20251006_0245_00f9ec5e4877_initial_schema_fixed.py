"""Initial schema fixed

Revision ID: 00f9ec5e4877
Revises: 
Create Date: 2025-10-06 02:45:20.039811+00:00

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '00f9ec5e4877'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('email_verification_limits',
    sa.Column('id', sa.UUID(), nullable=False, comment='唯一标识符'),
    sa.Column('limit_type', sa.String(length=50), nullable=False, comment='限制类型：email, ip, global'),
    sa.Column('identifier', sa.String(length=255), nullable=False, comment='限制标识（邮箱、IP或global）'),
    sa.Column('request_count', sa.Integer(), nullable=False, comment='请求次数'),
    sa.Column('window_start', sa.DateTime(), nullable=False, comment='时间窗口开始时间'),
    sa.Column('window_end', sa.DateTime(), nullable=False, comment='时间窗口结束时间'),
    sa.Column('last_request', sa.DateTime(), nullable=False, comment='最后请求时间'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_email_limits_time', 'email_verification_limits', ['window_start', 'window_end'], unique=False)
    op.create_index('idx_email_limits_type_id', 'email_verification_limits', ['limit_type', 'identifier'], unique=False)
    op.create_table('ip_freezes',
    sa.Column('id', sa.UUID(), nullable=False, comment='唯一标识符'),
    sa.Column('ip_address', sa.String(length=45), nullable=False, comment='被冻结的IP地址'),
    sa.Column('reason', sa.String(length=255), nullable=False, comment='冻结原因'),
    sa.Column('frozen_at', sa.DateTime(), nullable=False, comment='冻结时间'),
    sa.Column('unfreeze_at', sa.DateTime(), nullable=False, comment='自动解冻时间'),
    sa.Column('manually_unfrozen', sa.Boolean(), nullable=False, comment='是否手动解冻'),
    sa.Column('unfrozen_by', sa.UUID(), nullable=True, comment='解冻操作员ID'),
    sa.Column('unfrozen_at', sa.DateTime(), nullable=True, comment='解冻时间'),
    sa.Column('failed_attempts', sa.Integer(), nullable=False, comment='失败尝试次数'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('ip_address')
    )
    op.create_index('idx_ip_freezes_ip', 'ip_freezes', ['ip_address'], unique=False)
    op.create_index('idx_ip_freezes_time', 'ip_freezes', ['frozen_at'], unique=False)
    op.create_table('login_attempts',
    sa.Column('id', sa.UUID(), nullable=False, comment='唯一标识符'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='用户ID（登录失败时可能为空）'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='尝试登录的邮箱'),
    sa.Column('ip_address', sa.String(length=45), nullable=False, comment='IP地址（支持IPv6）'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='用户代理字符串'),
    sa.Column('result', sa.String(length=50), nullable=False, comment='登录结果'),
    sa.Column('failure_reason', sa.String(length=255), nullable=True, comment='失败原因'),
    sa.Column('captcha_required', sa.Boolean(), nullable=False, comment='是否需要验证码'),
    sa.Column('captcha_verified', sa.Boolean(), nullable=False, comment='验证码是否验证通过'),
    sa.Column('attempt_time', sa.DateTime(), nullable=False, comment='尝试时间'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_login_attempts_email_time', 'login_attempts', ['email', 'attempt_time'], unique=False)
    op.create_index('idx_login_attempts_ip_time', 'login_attempts', ['ip_address', 'attempt_time'], unique=False)
    op.create_index('idx_login_attempts_user_time', 'login_attempts', ['user_id', 'attempt_time'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('resource', sa.String(length=50), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('is_system', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_system', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('system_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('value_type', sa.String(length=20), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_configs_key'), 'system_configs', ['key'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique user identifier'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address (lowercase normalized)'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Argon2id hashed password'),
    sa.Column('email_verified', sa.Boolean(), nullable=False, comment='Email verification status'),
    sa.Column('account_status', sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', 'DELETED', name='accountstatus'), nullable=False, comment='Account status: active|inactive|locked|deleted'),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False, comment='Consecutive failed login counter'),
    sa.Column('account_locked_until', sa.DateTime(), nullable=True, comment='Lockout expiration timestamp (30 min after 5 failures)'),
    sa.Column('registration_timestamp', sa.DateTime(), nullable=False, comment='Account creation time'),
    sa.Column('last_login_timestamp', sa.DateTime(), nullable=True, comment='Last successful login time'),
    sa.Column('last_password_change', sa.DateTime(), nullable=False, comment='Last password update time'),
    sa.Column('consent_timestamp', sa.DateTime(), nullable=False, comment='GDPR data processing consent timestamp'),
    sa.Column('consent_status', sa.Boolean(), nullable=False, comment='Data processing consent status'),
    sa.Column('theme_preference', sa.String(length=20), nullable=False, comment='User theme preference: light, dark, or auto'),
    sa.Column('layout_preference', sa.String(length=20), nullable=False, comment='User layout preference: sidebar, top, or auto'),
    sa.Column('follow_system_theme', sa.Boolean(), nullable=False, comment='Whether to follow system theme preference'),
    sa.Column('remember_preferences', sa.Boolean(), nullable=False, comment='Whether to remember user preferences'),
    sa.Column('custom_theme_config', sa.String(length=1000), nullable=True, comment='Custom theme configuration (JSON string)'),
    sa.Column('custom_layout_config', sa.String(length=1000), nullable=True, comment='Custom layout configuration (JSON string)'),
    sa.Column('preferences_updated_at', sa.DateTime(), nullable=False, comment='Last preferences update time'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Record last update timestamp'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_users_account_status'), 'users', ['account_status'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('admin_preferences',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique admin preferences identifier'),
    sa.Column('admin_id', sa.UUID(), nullable=False, comment='Reference to admin user'),
    sa.Column('default_theme', sa.Enum('LIGHT', 'DARK', 'AUTO', name='themepreference'), nullable=False, comment='System default theme'),
    sa.Column('default_layout', sa.Enum('SIDEBAR', 'TOP', 'AUTO', name='layoutpreference'), nullable=False, comment='System default layout'),
    sa.Column('allow_user_theme_customization', sa.Boolean(), nullable=False, comment='Allow users to customize themes'),
    sa.Column('allow_user_layout_customization', sa.Boolean(), nullable=False, comment='Allow users to customize layouts'),
    sa.Column('allowed_themes', sa.Text(), nullable=True, comment='Comma-separated list of allowed themes'),
    sa.Column('restricted_themes', sa.Text(), nullable=True, comment='Comma-separated list of restricted themes'),
    sa.Column('allowed_layouts', sa.Text(), nullable=True, comment='Comma-separated list of allowed layouts'),
    sa.Column('restricted_layouts', sa.Text(), nullable=True, comment='Comma-separated list of restricted layouts'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Admin preferences creation time'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Last admin preferences update time'),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('admin_id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('jwt_tokens',
    sa.Column('id', sa.UUID(), nullable=False, comment='Token record identifier'),
    sa.Column('jti', sa.String(length=36), nullable=False, comment='JWT ID claim (for blacklisting)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Associated user'),
    sa.Column('token_type', sa.Enum('ACCESS', 'REFRESH', name='tokentype'), nullable=False, comment='Token type: access or refresh'),
    sa.Column('token_value', sa.String(length=512), nullable=True, comment='Refresh token value (null for access tokens in blacklist)'),
    sa.Column('issued_at', sa.DateTime(), nullable=False, comment='Token issue time'),
    sa.Column('expires_at', sa.DateTime(), nullable=False, comment='Token expiration time'),
    sa.Column('revoked', sa.Boolean(), nullable=False, comment='Token revocation status'),
    sa.Column('revoked_at', sa.DateTime(), nullable=True, comment='When token was revoked'),
    sa.Column('device_info', sa.String(length=255), nullable=True, comment='User-agent for tracking sessions'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_jwt_tokens_expires_at'), 'jwt_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_jwt_tokens_jti'), 'jwt_tokens', ['jti'], unique=True)
    op.create_index(op.f('ix_jwt_tokens_revoked'), 'jwt_tokens', ['revoked'], unique=False)
    op.create_index(op.f('ix_jwt_tokens_user_id'), 'jwt_tokens', ['user_id'], unique=False)
    op.create_table('operation_logs',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique operation log identifier'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who performed the operation'),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource', sa.String(length=200), nullable=False),
    sa.Column('result', sa.Enum('SUCCESS', 'FAILED', name='operationresult'), nullable=False),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_operation_logs_action'), 'operation_logs', ['action'], unique=False)
    op.create_index(op.f('ix_operation_logs_created_at'), 'operation_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_operation_logs_result'), 'operation_logs', ['result'], unique=False)
    op.create_index(op.f('ix_operation_logs_user_id'), 'operation_logs', ['user_id'], unique=False)
    op.create_table('preferences_change_history',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique history record identifier'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Reference to user'),
    sa.Column('change_type', sa.String(length=50), nullable=False, comment='Type of change: theme, layout, preferences'),
    sa.Column('old_value', sa.Text(), nullable=True, comment='Previous value (JSON)'),
    sa.Column('new_value', sa.Text(), nullable=False, comment='New value (JSON)'),
    sa.Column('source', sa.String(length=20), nullable=False, comment='Change source: user, admin, system'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Change timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('security_logs',
    sa.Column('id', sa.UUID(), nullable=False, comment='Log entry identifier'),
    sa.Column('event_type', sa.Enum('LOGIN_SUCCESS', 'LOGIN_FAILED', 'LOGOUT', 'REGISTRATION', 'EMAIL_VERIFICATION', 'PASSWORD_CHANGE', 'PASSWORD_RESET_REQUESTED', 'PASSWORD_RESET_COMPLETED', 'ACCOUNT_LOCKED', 'ACCOUNT_UNLOCKED', 'TOKEN_REFRESH', 'INVALID_TOKEN', 'RATE_LIMIT_EXCEEDED', 'DATA_EXPORT_REQUEST', 'DATA_DELETION_REQUEST', name='eventtype'), nullable=False, comment='Type of security event'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='Associated user (null for failed logins with unknown email)'),
    sa.Column('timestamp', sa.DateTime(), nullable=False, comment='Event occurrence time'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='Source IP address (IPv4 or IPv6)'),
    sa.Column('user_agent', sa.String(length=512), nullable=True, comment='Client user agent string'),
    sa.Column('result', sa.Enum('SUCCESS', 'FAILURE', name='eventresult'), nullable=False, comment='Event result: success or failure'),
    sa.Column('failure_reason', sa.String(length=255), nullable=True, comment='Reason for failure (if applicable)'),
    sa.Column('additional_context', sa.JSON(), nullable=True, comment='Extra event data (JSON format)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_security_logs_event_type'), 'security_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_security_logs_timestamp'), 'security_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_security_logs_user_id'), 'security_logs', ['user_id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique preferences identifier'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Reference to user'),
    sa.Column('theme_preference', sa.Enum('LIGHT', 'DARK', 'AUTO', name='themepreference'), nullable=False, comment='User theme preference'),
    sa.Column('layout_preference', sa.Enum('SIDEBAR', 'TOP', 'AUTO', name='layoutpreference'), nullable=False, comment='User layout preference'),
    sa.Column('follow_system_theme', sa.Boolean(), nullable=False, comment='Whether to follow system theme preference'),
    sa.Column('remember_preferences', sa.Boolean(), nullable=False, comment='Whether to remember user preferences'),
    sa.Column('custom_theme_config', sa.Text(), nullable=True, comment='Custom theme configuration (JSON)'),
    sa.Column('custom_layout_config', sa.Text(), nullable=True, comment='Custom layout configuration (JSON)'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Preferences creation time'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Last preferences update time'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('verification_tokens',
    sa.Column('id', sa.UUID(), nullable=False, comment='Token record identifier'),
    sa.Column('token', sa.String(length=64), nullable=False, comment='Cryptographically secure random token'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Associated user'),
    sa.Column('token_type', sa.Enum('EMAIL_VERIFICATION', 'PASSWORD_RESET', name='tokenpurpose'), nullable=False, comment='Token purpose: email_verification or password_reset'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Token creation time'),
    sa.Column('expires_at', sa.DateTime(), nullable=False, comment='Token expiration time'),
    sa.Column('used', sa.Boolean(), nullable=False, comment='One-time use flag'),
    sa.Column('used_at', sa.DateTime(), nullable=True, comment='When token was used'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_verification_tokens_expires_at'), 'verification_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_verification_tokens_token'), 'verification_tokens', ['token'], unique=True)
    op.create_index(op.f('ix_verification_tokens_user_id'), 'verification_tokens', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_verification_tokens_user_id'), table_name='verification_tokens')
    op.drop_index(op.f('ix_verification_tokens_token'), table_name='verification_tokens')
    op.drop_index(op.f('ix_verification_tokens_expires_at'), table_name='verification_tokens')
    op.drop_table('verification_tokens')
    op.drop_table('user_roles')
    op.drop_table('user_preferences')
    op.drop_index(op.f('ix_security_logs_user_id'), table_name='security_logs')
    op.drop_index(op.f('ix_security_logs_timestamp'), table_name='security_logs')
    op.drop_index(op.f('ix_security_logs_event_type'), table_name='security_logs')
    op.drop_table('security_logs')
    op.drop_table('role_permissions')
    op.drop_table('preferences_change_history')
    op.drop_index(op.f('ix_operation_logs_user_id'), table_name='operation_logs')
    op.drop_index(op.f('ix_operation_logs_result'), table_name='operation_logs')
    op.drop_index(op.f('ix_operation_logs_created_at'), table_name='operation_logs')
    op.drop_index(op.f('ix_operation_logs_action'), table_name='operation_logs')
    op.drop_table('operation_logs')
    op.drop_index(op.f('ix_jwt_tokens_user_id'), table_name='jwt_tokens')
    op.drop_index(op.f('ix_jwt_tokens_revoked'), table_name='jwt_tokens')
    op.drop_index(op.f('ix_jwt_tokens_jti'), table_name='jwt_tokens')
    op.drop_index(op.f('ix_jwt_tokens_expires_at'), table_name='jwt_tokens')
    op.drop_table('jwt_tokens')
    op.drop_table('admin_preferences')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_account_status'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_system_configs_key'), table_name='system_configs')
    op.drop_table('system_configs')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('idx_login_attempts_user_time', table_name='login_attempts')
    op.drop_index('idx_login_attempts_ip_time', table_name='login_attempts')
    op.drop_index('idx_login_attempts_email_time', table_name='login_attempts')
    op.drop_table('login_attempts')
    op.drop_index('idx_ip_freezes_time', table_name='ip_freezes')
    op.drop_index('idx_ip_freezes_ip', table_name='ip_freezes')
    op.drop_table('ip_freezes')
    op.drop_index('idx_email_limits_type_id', table_name='email_verification_limits')
    op.drop_index('idx_email_limits_time', table_name='email_verification_limits')
    op.drop_table('email_verification_limits')
    # ### end Alembic commands ###
