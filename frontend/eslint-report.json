[{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/Captcha.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOutlined' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1614,1617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1614,1617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateCaptcha'. Either include it or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [generateCaptcha]","fix":{"range":[2166,2168],"text":"[generateCaptcha]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Input, Button, Space, message, Spin } from 'antd';\nimport { ReloadOutlined, EyeOutlined } from '@ant-design/icons';\nimport { request } from '../services/api';\n\ninterface CaptchaData {\n  captcha_id: string;\n  image: string;\n  expires_in: number;\n}\n\ninterface CaptchaProps {\n  value?: string;\n  onChange?: (value: string) => void;\n  onCaptchaIdChange?: (captchaId: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  size?: 'small' | 'middle' | 'large';\n  style?: React.CSSProperties;\n}\n\nconst Captcha: React.FC<CaptchaProps> = ({\n  value = '',\n  onChange,\n  onCaptchaIdChange,\n  placeholder = '请输入验证码',\n  disabled = false,\n  size = 'middle',\n  style\n}) => {\n  const [captchaData, setCaptchaData] = useState<CaptchaData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n\n  // 生成验证码\n  const generateCaptcha = async () => {\n    setLoading(true);\n    try {\n      const response = await request.get<CaptchaData>('/v1/captcha/generate');\n      setCaptchaData(response);\n      if (onCaptchaIdChange) {\n        onCaptchaIdChange(response.captcha_id);\n      }\n      message.success('验证码已刷新');\n    } catch (error: any) {\n      message.error(error.detail || '获取验证码失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 验证验证码\n  const verifyCaptcha = async (captchaId: string, captchaText: string) => {\n    try {\n      await request.post('/v1/captcha/verify', {\n        captcha_id: captchaId,\n        captcha_text: captchaText\n      });\n      return true;\n    } catch (error: any) {\n      message.error(error.detail || '验证码错误');\n      return false;\n    }\n  };\n\n  // 处理输入变化\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value.toUpperCase();\n    setInputValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  // 处理回车键\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && captchaData) {\n      verifyCaptcha(captchaData.captcha_id, inputValue);\n    }\n  };\n\n  // 组件挂载时生成验证码\n  useEffect(() => {\n    generateCaptcha();\n  }, []);\n\n  // 同步外部value变化\n  useEffect(() => {\n    setInputValue(value);\n  }, [value]);\n\n  return (\n    <div style={style}>\n      <Space.Compact style={{ width: '100%' }}>\n        <Input\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder={placeholder}\n          disabled={disabled || loading}\n          size={size}\n          maxLength={4}\n          style={{ \n            textTransform: 'uppercase',\n            fontFamily: 'monospace',\n            letterSpacing: '2px'\n          }}\n        />\n        <Button\n          type=\"default\"\n          icon={<ReloadOutlined />}\n          onClick={generateCaptcha}\n          disabled={disabled}\n          loading={loading}\n          size={size}\n          title=\"刷新验证码\"\n        />\n      </Space.Compact>\n      \n      {captchaData && (\n        <div style={{ marginTop: 8, textAlign: 'center' }}>\n          <div\n            style={{\n              display: 'inline-block',\n              border: '1px solid #d9d9d9',\n              borderRadius: 4,\n              padding: 4,\n              backgroundColor: '#fafafa',\n              cursor: 'pointer'\n            }}\n            onClick={generateCaptcha}\n            title=\"点击刷新验证码\"\n          >\n            {loading ? (\n              <Spin size=\"small\" />\n            ) : (\n              <img\n                src={captchaData.image}\n                alt=\"验证码\"\n                style={{\n                  height: 40,\n                  width: 120,\n                  display: 'block'\n                }}\n              />\n            )}\n          </div>\n          <div style={{ \n            fontSize: 12, \n            color: '#999', \n            marginTop: 4 \n          }}>\n            点击图片刷新验证码\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Captcha;\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/QuickSettingsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingOutlined' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Title' is assigned a value but never used.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checked' is defined but never used.","line":196,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":37}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 快速设置面板组件\n * 提供主题和布局的快速切换功能\n */\nimport React, { useState, useEffect } from 'react';\nimport { Drawer, Card, Space, Typography, Button, Divider, Tooltip, Switch } from 'antd';\nimport {\n  BgColorsOutlined,\n  AppstoreOutlined,\n  SunOutlined,\n  MoonOutlined,\n  MenuOutlined,\n  SettingOutlined,\n  EyeOutlined,\n  SkinOutlined,\n} from '@ant-design/icons';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useLayout } from '../contexts/LayoutContext';\nimport '../styles/menu-theme.css';\n\nconst { Title, Text } = Typography;\n\ninterface QuickSettingsPanelProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst QuickSettingsPanel: React.FC<QuickSettingsPanelProps> = ({ visible, onClose }) => {\n  const { currentTheme, setTheme, availableThemes, isDarkMode, toggleTheme } = useTheme();\n  const { layout, setLayout, toggleLayout } = useLayout();\n  const [previewMode, setPreviewMode] = useState(false);\n  const [shouldAutoClose, setShouldAutoClose] = useState(false);\n  const [autoCloseReason, setAutoCloseReason] = useState<string>('');\n\n  // 自动关闭效果\n  useEffect(() => {\n    if (shouldAutoClose && visible) {\n      const delay = autoCloseReason === 'preview-mode' ? 1500 : 100;\n      \n      const timer = setTimeout(() => {\n        if (autoCloseReason === 'preview-mode') {\n          setPreviewMode(false);\n        }\n        onClose();\n        setShouldAutoClose(false);\n        setAutoCloseReason('');\n      }, delay);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [shouldAutoClose, visible, onClose, autoCloseReason]);\n\n  const handleThemeChange = (themeName: string) => {\n    console.log('QuickSettingsPanel: Switching theme to:', themeName);\n    \n    // 简单切换主题\n    setTheme(themeName);\n    \n    if (previewMode) {\n      setPreviewMode(false);\n    }\n    \n    // 设置自动关闭\n    setAutoCloseReason('theme-change');\n    setShouldAutoClose(true);\n  };\n\n  const handleLayoutChange = (layoutType: 'sidebar' | 'top') => {\n    console.log('QuickSettingsPanel: handleLayoutChange called with:', layoutType);\n    \n    // 立即设置布局\n    setLayout({ ...layout, type: layoutType });\n    \n    if (previewMode) {\n      setPreviewMode(false);\n    }\n    \n    // 设置自动关闭\n    setAutoCloseReason('layout-change');\n    setShouldAutoClose(true);\n    \n    console.log('QuickSettingsPanel: handleLayoutChange completed immediately');\n  };\n\n  const handlePreview = (type: 'theme' | 'layout', value: string) => {\n    console.log('QuickSettingsPanel: handlePreview called with:', type, value);\n    \n    setPreviewMode(true);\n    if (type === 'theme') {\n      // 立即应用预览主题\n      setTheme(value);\n    } else {\n      setLayout({ ...layout, type: value as 'sidebar' | 'top' });\n    }\n    \n    // 设置预览模式自动关闭\n    setAutoCloseReason('preview-mode');\n    setShouldAutoClose(true);\n    \n    console.log('QuickSettingsPanel: handlePreview completed, will auto-close in 1.5s');\n  };\n\n  const getThemeIcon = (themeName: string) => {\n    switch (themeName) {\n      case 'light':\n        return <SunOutlined />;\n      case 'dark':\n        return <MoonOutlined />;\n      case 'high-contrast':\n        return <BgColorsOutlined />;\n      case 'purple':\n        return <AppstoreOutlined />;\n      case 'cyan':\n        return <BgColorsOutlined />;\n      default:\n        return <SunOutlined />;\n    }\n  };\n\n  const getLayoutIcon = (layoutType: string) => {\n    return layoutType === 'sidebar' ? <MenuOutlined /> : <AppstoreOutlined />;\n  };\n\n  return (\n    <Drawer\n      title={\n        <Space>\n          <SkinOutlined />\n          <span>切换皮肤</span>\n        </Space>\n      }\n      placement=\"right\"\n      width={360}\n      open={visible}\n      onClose={onClose}\n      styles={{\n        body: { padding: '16px' }\n      }}\n    >\n      <Space direction=\"vertical\" size=\"large\" className=\"quick-settings-container\">\n        {/* 主题设置 */}\n        <Card size=\"small\" title=\"主题设置\">\n          <Space direction=\"vertical\" size=\"middle\" className=\"theme-settings-container\">\n            <div>\n              <Text strong>当前主题</Text>\n              <div className=\"theme-current-info\">\n                <Space>\n                  {getThemeIcon(currentTheme.meta.id)}\n                  <Text>{currentTheme.meta.displayName}</Text>\n                </Space>\n              </div>\n            </div>\n\n            <Divider className=\"theme-divider\" />\n\n            <div>\n              <Text strong>选择主题</Text>\n              <div className=\"theme-switch-container\">\n                <Space direction=\"vertical\" size=\"small\" className=\"theme-options-container\">\n                  {availableThemes.map((theme) => (\n                    <div key={theme.meta.id} className=\"theme-option-item\">\n                      <Space>\n                        {getThemeIcon(theme.meta.id)}\n                        <Text>{theme.meta.displayName}</Text>\n                      </Space>\n                      <Space>\n                        <Tooltip title=\"预览\">\n                          <Button\n                            type=\"text\"\n                            size=\"small\"\n                            icon={<EyeOutlined />}\n                            onClick={() => handlePreview('theme', theme.meta.id)}\n                          />\n                        </Tooltip>\n                        <Button\n                          type={currentTheme.meta.id === theme.meta.id ? 'primary' : 'default'}\n                          size=\"small\"\n                          onClick={() => handleThemeChange(theme.meta.id)}\n                        >\n                          {currentTheme.meta.id === theme.meta.id ? '当前' : '应用'}\n                        </Button>\n                      </Space>\n                    </div>\n                  ))}\n                </Space>\n              </div>\n            </div>\n\n            <Divider className=\"theme-divider\" />\n\n            <div>\n              <Space>\n                <Text>快速切换</Text>\n                <Switch\n                  checked={isDarkMode}\n                  onChange={(checked) => {\n                    toggleTheme();\n                    // 设置快速切换自动关闭\n                    setAutoCloseReason('quick-switch');\n                    setShouldAutoClose(true);\n                  }}\n                  checkedChildren={<MoonOutlined />}\n                  unCheckedChildren={<SunOutlined />}\n                />\n                <Text type=\"secondary\">{isDarkMode ? '深色模式' : '浅色模式'}</Text>\n              </Space>\n            </div>\n          </Space>\n        </Card>\n\n        {/* 布局设置 */}\n        <Card size=\"small\" title=\"布局设置\">\n          <Space direction=\"vertical\" size=\"middle\" className=\"layout-settings-container\">\n            <div>\n              <Text strong>当前布局</Text>\n              <div className=\"layout-current-info\">\n                <Space>\n                  {getLayoutIcon(layout.type)}\n                  <Text>{layout.type === 'sidebar' ? '侧边栏布局' : '顶部菜单布局'}</Text>\n                </Space>\n              </div>\n            </div>\n\n            <Divider className=\"theme-divider\" />\n\n            <div>\n              <Text strong>选择布局</Text>\n              <div className=\"theme-switch-container\">\n                <Space direction=\"vertical\" size=\"small\" className=\"theme-options-container\">\n                  <div className=\"layout-option-item\">\n                    <Space>\n                      <MenuOutlined />\n                      <Text>侧边栏布局</Text>\n                    </Space>\n                    <Space>\n                      <Tooltip title=\"预览\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<EyeOutlined />}\n                          onClick={() => handlePreview('layout', 'sidebar')}\n                        />\n                      </Tooltip>\n                      <Button\n                        type={layout.type === 'sidebar' ? 'primary' : 'default'}\n                        size=\"small\"\n                        onClick={() => handleLayoutChange('sidebar')}\n                      >\n                        {layout.type === 'sidebar' ? '当前' : '应用'}\n                      </Button>\n                    </Space>\n                  </div>\n                  \n                  <div className=\"layout-option-item\">\n                    <Space>\n                      <AppstoreOutlined />\n                      <Text>顶部菜单布局</Text>\n                    </Space>\n                    <Space>\n                      <Tooltip title=\"预览\">\n                        <Button\n                          type=\"text\"\n                          size=\"small\"\n                          icon={<EyeOutlined />}\n                          onClick={() => handlePreview('layout', 'top')}\n                        />\n                      </Tooltip>\n                      <Button\n                        type={layout.type === 'top' ? 'primary' : 'default'}\n                        size=\"small\"\n                        onClick={() => handleLayoutChange('top')}\n                      >\n                        {layout.type === 'top' ? '当前' : '应用'}\n                      </Button>\n                    </Space>\n                  </div>\n                </Space>\n              </div>\n            </div>\n\n            <Divider className=\"theme-divider\" />\n\n            <div>\n              <Space>\n                <Text>快速切换</Text>\n                <Switch\n                  checked={layout.type === 'top'}\n                  onChange={toggleLayout}\n                  checkedChildren={<AppstoreOutlined />}\n                  unCheckedChildren={<MenuOutlined />}\n                />\n                <Text type=\"secondary\">{layout.type === 'top' ? '顶部菜单' : '侧边栏'}</Text>\n              </Space>\n            </div>\n          </Space>\n        </Card>\n\n        {/* 预览模式提示 */}\n        {previewMode && (\n          <Card size=\"small\" className=\"preview-notice\">\n            <Space>\n              <EyeOutlined className=\"preview-notice-icon\" />\n              <Text type=\"warning\">预览模式 - 3秒后自动退出</Text>\n            </Space>\n          </Card>\n        )}\n      </Space>\n    </Drawer>\n  );\n};\n\nexport default QuickSettingsPanel;\n\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/ThemeSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDarkMode' is assigned a value but never used.","line":25,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题切换器组件\n * 基于Spec-Kit方法实现的主题切换功能\n */\n\nimport React from 'react';\nimport { Select, Space, Typography, Tooltip } from 'antd';\nimport { BgColorsOutlined, SunOutlined, MoonOutlined, EyeOutlined } from '@ant-design/icons';\nimport { useTheme } from '../contexts/ThemeContext';\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\ninterface ThemeSwitcherProps {\n  size?: 'small' | 'middle' | 'large';\n  showLabel?: boolean;\n  style?: React.CSSProperties;\n}\n\nconst ThemeSwitcher: React.FC<ThemeSwitcherProps> = ({ \n  size = 'middle', \n  showLabel = true,\n  style \n}) => {\n  const { currentTheme, availableThemes, setTheme, isDarkMode } = useTheme();\n\n  const handleThemeChange = (themeName: string) => {\n    setTheme(themeName);\n  };\n\n  const getThemeIcon = (themeName: string) => {\n    switch (themeName) {\n      case 'light':\n        return <SunOutlined />;\n      case 'dark':\n        return <MoonOutlined />;\n      case 'high-contrast':\n        return <EyeOutlined />;\n      default:\n        return <BgColorsOutlined />;\n    }\n  };\n\n  const getThemeDescription = (themeName: string) => {\n    switch (themeName) {\n      case 'light':\n        return '适合日间使用的浅色主题';\n      case 'dark':\n        return '适合夜间使用的深色主题';\n      case 'high-contrast':\n        return '高对比度主题，提高可访问性';\n      default:\n        return '自定义主题';\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\" size=\"small\" style={style}>\n      {showLabel && (\n        <Text strong style={{ fontSize: '14px' }}>\n          主题设置\n        </Text>\n      )}\n      \n      <Select\n        value={currentTheme.name}\n        onChange={handleThemeChange}\n        size={size}\n        style={{ minWidth: 120 }}\n        suffixIcon={<BgColorsOutlined />}\n      >\n        {availableThemes.map((theme) => (\n          <Option key={theme.name} value={theme.name}>\n            <Space>\n              {getThemeIcon(theme.name)}\n              <span>{theme.displayName}</span>\n            </Space>\n          </Option>\n        ))}\n      </Select>\n      \n      {currentTheme.description && (\n        <Tooltip title={currentTheme.description} placement=\"bottom\">\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            {getThemeDescription(currentTheme.name)}\n          </Text>\n        </Tooltip>\n      )}\n    </Space>\n  );\n};\n\nexport default ThemeSwitcher;\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/layout/LayoutProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":78,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":78,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 布局提供者组件\n * 基于Spec-Kit方法重构的布局上下文提供者\n */\n\nimport React, { createContext, useContext, ReactNode, useEffect } from 'react';\nimport { useLayoutStore, selectLayout, selectIsSidebar, selectIsTop, selectIsCollapsed, selectIsLoading, type LayoutContextType } from '../../stores/layout-store';\n\n// 创建布局上下文\nconst LayoutContext = createContext<LayoutContextType | null>(null);\n\ninterface LayoutProviderProps {\n  children: ReactNode;\n}\n\nexport const LayoutProvider: React.FC<LayoutProviderProps> = ({ children }) => {\n  const layout = useLayoutStore(selectLayout);\n  const isSidebar = useLayoutStore(selectIsSidebar);\n  const isTop = useLayoutStore(selectIsTop);\n  const isCollapsed = useLayoutStore(selectIsCollapsed);\n  const isLoading = useLayoutStore(selectIsLoading);\n  \n  const setLayout = useLayoutStore((state) => state.setLayout);\n  const toggleLayout = useLayoutStore((state) => state.toggleLayout);\n  const toggleCollapse = useLayoutStore((state) => state.toggleCollapse);\n\n  // 应用布局CSS变量\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // 设置布局类型\n    root.className = root.className.replace(/layout-\\w+/g, '');\n    root.classList.add(`layout-${layout.type}`);\n    \n    // 设置折叠状态\n    if (layout.collapsed) {\n      root.classList.add('layout-collapsed');\n    } else {\n      root.classList.remove('layout-collapsed');\n    }\n    \n    // 设置固定状态\n    if (layout.fixed) {\n      root.classList.add('layout-fixed');\n    } else {\n      root.classList.remove('layout-fixed');\n    }\n    \n    // 设置CSS变量\n    root.style.setProperty('--layout-type', layout.type);\n    root.style.setProperty('--sidebar-width', `${layout.width || 240}px`);\n    root.style.setProperty('--sidebar-collapsed-width', '80px');\n    root.style.setProperty('--top-menu-height', `${layout.height || 64}px`);\n    root.style.setProperty('--layout-fixed', layout.fixed ? '1' : '0');\n    root.style.setProperty('--layout-transition-duration', '300ms');\n  }, [layout]);\n\n  // 上下文值\n  const contextValue: LayoutContextType = {\n    layout,\n    setLayout,\n    toggleLayout,\n    toggleCollapse,\n    isSidebar,\n    isTop,\n    isCollapsed,\n    isLoading,\n  };\n\n  return (\n    <LayoutContext.Provider value={contextValue}>\n      {children}\n    </LayoutContext.Provider>\n  );\n};\n\n// 使用布局上下文的Hook\nexport const useLayout = (): LayoutContextType => {\n  const context = useContext(LayoutContext);\n  if (!context) {\n    throw new Error('useLayout must be used within a LayoutProvider');\n  }\n  return context;\n};\n\n// 导出布局上下文\nexport { LayoutContext };\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/layout/LayoutSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LayoutType' is defined but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 布局切换器组件\n * 基于Spec-Kit方法重构的布局切换器\n */\n\nimport React from 'react';\nimport { Card, Radio, Space, Typography, Button, Tooltip } from 'antd';\nimport {\n  MenuOutlined,\n  AppstoreOutlined,\n  ReloadOutlined,\n  EyeOutlined,\n} from '@ant-design/icons';\nimport { useLayout } from './LayoutProvider';\nimport { type LayoutType } from '../../stores/layout-store';\nimport '../../styles/menu-theme.css';\n\nconst { Title, Text } = Typography;\n\nconst LayoutSwitcher: React.FC = () => {\n  const { layout, setLayout, toggleLayout, resetLayout } = useLayout();\n\n  const layoutOptions = [\n    {\n      value: 'sidebar' as const,\n      label: '侧边栏布局',\n      icon: <MenuOutlined />,\n      description: '左侧菜单，右侧内容区域',\n      preview: 'sidebar-preview',\n    },\n    {\n      value: 'top' as const,\n      label: '顶部菜单布局',\n      icon: <AppstoreOutlined />,\n      description: '顶部菜单，下方内容区域',\n      preview: 'top-preview',\n    },\n  ];\n\n  const handleLayoutChange = (e: any) => {\n    const newLayout = {\n      ...layout,\n      type: e.target.value,\n      collapsed: e.target.value === 'top' ? false : layout.collapsed,\n    };\n    setLayout(newLayout);\n  };\n\n  const handleReset = () => {\n    resetLayout();\n  };\n\n  return (\n    <Card className=\"layout-switcher-card\">\n      <div className=\"layout-switcher-header\">\n        <Title level={4} className=\"layout-switcher-title\">\n          布局设置\n        </Title>\n        <Text type=\"secondary\" className=\"layout-switcher-description\">\n          选择适合您工作习惯的布局方式\n        </Text>\n      </div>\n\n      <div className=\"layout-switcher-content\">\n        <Radio.Group\n          value={layout.type}\n          onChange={handleLayoutChange}\n          className=\"layout-options\"\n        >\n          <Space direction=\"vertical\" size=\"large\" className=\"layout-options-space\">\n            {layoutOptions.map((option) => (\n              <Radio key={option.value} value={option.value} className=\"layout-option\">\n                <div className=\"layout-option-content\">\n                  <div className=\"layout-option-header\">\n                    <div className=\"layout-option-icon\">\n                      {option.icon}\n                    </div>\n                    <div className=\"layout-option-info\">\n                      <div className=\"layout-option-label\">\n                        {option.label}\n                      </div>\n                      <div className=\"layout-option-description\">\n                        {option.description}\n                      </div>\n                    </div>\n                  </div>\n                  <div className={`layout-option-preview ${option.preview}`}>\n                    <div className=\"preview-content\">\n                      {option.value === 'sidebar' ? (\n                        <>\n                          <div className=\"preview-sidebar\"></div>\n                          <div className=\"preview-main\">\n                            <div className=\"preview-header\"></div>\n                            <div className=\"preview-content-area\"></div>\n                          </div>\n                        </>\n                      ) : (\n                        <>\n                          <div className=\"preview-top-header\"></div>\n                          <div className=\"preview-main-content\"></div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </Radio>\n            ))}\n          </Space>\n        </Radio.Group>\n\n        <div className=\"layout-switcher-actions\">\n          <Space>\n            <Tooltip title=\"快速切换布局\">\n              <Button\n                icon={<EyeOutlined />}\n                onClick={toggleLayout}\n                className=\"action-btn\"\n              >\n                快速切换\n              </Button>\n            </Tooltip>\n            \n            <Tooltip title=\"重置为默认设置\">\n              <Button\n                icon={<ReloadOutlined />}\n                onClick={handleReset}\n                className=\"action-btn\"\n              >\n                重置设置\n              </Button>\n            </Tooltip>\n          </Space>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default LayoutSwitcher;\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/layout/LayoutWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/layout/SidebarLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppstoreOutlined' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BgColorsOutlined' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toggleLayout' is assigned a value but never used.","line":37,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":60}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 侧边栏布局组件\n * 基于Spec-Kit方法重构的侧边栏布局\n */\n\nimport React from 'react';\nimport { Layout, Menu, Avatar, Dropdown, Button, Space, Typography } from 'antd';\nimport {\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n  UserOutlined,\n  SettingOutlined,\n  LogoutOutlined,\n  DashboardOutlined,\n  TeamOutlined,\n  FileTextOutlined,\n  BellOutlined,\n  AppstoreOutlined,\n  BgColorsOutlined,\n  SkinOutlined,\n} from '@ant-design/icons';\nimport { useLayout } from '../../contexts/LayoutContext';\nimport { useAuthStore } from '../../stores/authStore';\nimport { useTheme } from '../../contexts/ThemeContext'; // Added theme context\nimport QuickSettingsPanel from '../QuickSettingsPanel';\nimport './SidebarLayout.css';\nimport '../../styles/menu-theme.css';\n\nconst { Header, Sider, Content } = Layout;\nconst { Text } = Typography;\n\ninterface SidebarLayoutProps {\n  children: React.ReactNode;\n}\n\nconst SidebarLayout: React.FC<SidebarLayoutProps> = ({ children }) => {\n  const { layout, toggleCollapse, isCollapsed, toggleLayout } = useLayout();\n  const { user, logout } = useAuthStore();\n  const { currentTheme } = useTheme(); // Added theme context\n  const [quickSettingsVisible, setQuickSettingsVisible] = React.useState(false);\n\n  // 菜单项配置\n  const menuItems = [\n    {\n      key: 'overview',\n      icon: <DashboardOutlined />,\n      label: '概览',\n      path: '/overview',\n    },\n    {\n      key: 'users',\n      icon: <TeamOutlined />,\n      label: '用户管理',\n      path: '/users',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: '系统设置',\n      children: [\n        {\n          key: 'basic',\n          label: '基础配置',\n          path: '/system-settings/basic',\n        },\n        {\n          key: 'admin',\n          label: '管理员管理',\n          path: '/system-settings/admin',\n        },\n        {\n          key: 'security',\n          label: '安全配置',\n          path: '/system-settings/security',\n        },\n        {\n          key: 'email',\n          label: '邮箱配置',\n          path: '/system-settings/email',\n        },\n      ],\n    },\n    {\n      key: 'logs',\n      icon: <FileTextOutlined />,\n      label: '系统日志',\n      path: '/logs',\n    },\n  ];\n\n  // 用户下拉菜单\n  const userMenuItems = [\n    {\n      key: 'profile',\n      icon: <UserOutlined />,\n      label: '个人资料',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: '系统设置',\n    },\n    {\n      type: 'divider' as const,\n    },\n    {\n      key: 'logout',\n      icon: <LogoutOutlined />,\n      label: '退出登录',\n      onClick: logout,\n    },\n  ];\n\n  return (\n    <Layout className={`sidebar-layout ${currentTheme?.meta.id || 'light'}-theme`}>\n      <Sider\n        trigger={null}\n        collapsible\n        collapsed={isCollapsed}\n        width={layout.width || 240}\n        collapsedWidth={80}\n        className={`sidebar ${currentTheme?.meta.id || 'light'}-theme`}\n      >\n        <div className=\"sidebar-header\">\n          <div className=\"logo\">\n            {isCollapsed ? (\n              <div className=\"logo-icon\">S</div>\n            ) : (\n              <div className=\"logo-text\">Spec-Kit</div>\n            )}\n          </div>\n        </div>\n        \n        <Menu\n          theme={currentTheme?.menuVariant || 'light'}\n          mode=\"inline\"\n          defaultSelectedKeys={['overview']}\n          items={menuItems}\n          className=\"sidebar-menu menu-theme-unified\"\n        />\n      </Sider>\n      \n      <Layout className={`main-layout ${currentTheme?.meta.id || 'light'}-theme`}>\n        <Header className={`main-header ${currentTheme?.meta.id || 'light'}-theme`}>\n          <div className=\"header-content\">\n            <div className=\"header-left\">\n              <Button\n                type=\"text\"\n                icon={isCollapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\n                onClick={toggleCollapse}\n                className=\"collapse-btn\"\n              />\n            </div>\n            \n            <div className=\"header-center\">\n              {/* 左侧布局的中间区域为空，保持结构一致 */}\n            </div>\n            \n            <div className=\"header-right\">\n            <Space>\n              {/* 快速设置按钮 */}\n              <Button\n                type=\"text\"\n                icon={<SkinOutlined />}\n                onClick={() => setQuickSettingsVisible(true)}\n                className=\"settings-toggle-btn\"\n                title=\"快速设置\"\n              />\n              \n              <Button\n                type=\"text\"\n                icon={<BellOutlined />}\n                className=\"notification-btn\"\n              />\n              \n              <Dropdown\n                menu={{ items: userMenuItems }}\n                placement=\"bottomRight\"\n                trigger={['click']}\n              >\n                <div className=\"user-info\">\n                  <Avatar\n                    size=\"small\"\n                    icon={<UserOutlined />}\n                    src={user?.avatar}\n                    className=\"user-avatar\"\n                  />\n                  {!isCollapsed && (\n                    <div className=\"user-details\">\n                      <Text className=\"user-name\">\n                        {user?.name || user?.email?.split('@')[0] || '用户'}\n                      </Text>\n                      <Text className=\"user-role\" type=\"secondary\">\n                        {user?.role || \n                         (user?.email?.includes('admin') ? '管理员' : '用户') ||\n                         'user'}\n                      </Text>\n                    </div>\n                  )}\n                </div>\n              </Dropdown>\n            </Space>\n            </div>\n          </div>\n        </Header>\n        \n        <Content className={`main-content ${currentTheme?.meta.id || 'light'}-theme content-full-height`}>\n          {children}\n        </Content>\n      </Layout>\n      \n      {/* 快速设置面板 */}\n      <QuickSettingsPanel\n        visible={quickSettingsVisible}\n        onClose={() => setQuickSettingsVisible(false)}\n      />\n    </Layout>\n  );\n};\n\nexport default SidebarLayout;\n\n\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/layout/TopMenuLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuOutlined' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppstoreOutlined' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BgColorsOutlined' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'layout' is assigned a value but never used.","line":36,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toggleLayout' is assigned a value but never used.","line":36,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 顶部菜单布局组件\n * 基于Spec-Kit方法重构的顶部菜单布局\n */\n\nimport React from 'react';\nimport { Layout, Menu, Avatar, Dropdown, Button, Space, Typography } from 'antd';\nimport {\n  UserOutlined,\n  SettingOutlined,\n  LogoutOutlined,\n  DashboardOutlined,\n  TeamOutlined,\n  FileTextOutlined,\n  BellOutlined,\n  MenuOutlined,\n  AppstoreOutlined,\n  BgColorsOutlined,\n  SkinOutlined,\n} from '@ant-design/icons';\nimport { useLayout } from '../../contexts/LayoutContext';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { useAuthStore } from '../../stores/authStore';\nimport QuickSettingsPanel from '../QuickSettingsPanel';\nimport './TopMenuLayout.css';\nimport '../../styles/menu-theme.css';\n\nconst { Header, Content } = Layout;\nconst { Text } = Typography;\n\ninterface TopMenuLayoutProps {\n  children: React.ReactNode;\n}\n\nconst TopMenuLayout: React.FC<TopMenuLayoutProps> = ({ children }) => {\n  const { layout, toggleLayout } = useLayout();\n  const { currentTheme } = useTheme();\n  const { user, logout } = useAuthStore();\n  const [quickSettingsVisible, setQuickSettingsVisible] = React.useState(false);\n\n  // 菜单项配置\n  const menuItems = [\n    {\n      key: 'overview',\n      icon: <DashboardOutlined />,\n      label: '概览',\n      path: '/overview',\n    },\n    {\n      key: 'users',\n      icon: <TeamOutlined />,\n      label: '用户管理',\n      path: '/users',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: '系统设置',\n      children: [\n        {\n          key: 'basic',\n          label: '基础配置',\n          path: '/system-settings/basic',\n        },\n        {\n          key: 'admin',\n          label: '管理员管理',\n          path: '/system-settings/admin',\n        },\n        {\n          key: 'security',\n          label: '安全配置',\n          path: '/system-settings/security',\n        },\n        {\n          key: 'email',\n          label: '邮箱配置',\n          path: '/system-settings/email',\n        },\n      ],\n    },\n    {\n      key: 'logs',\n      icon: <FileTextOutlined />,\n      label: '系统日志',\n      path: '/logs',\n    },\n  ];\n\n  // 用户下拉菜单\n  const userMenuItems = [\n    {\n      key: 'profile',\n      icon: <UserOutlined />,\n      label: '个人资料',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: '系统设置',\n    },\n    {\n      type: 'divider' as const,\n    },\n    {\n      key: 'logout',\n      icon: <LogoutOutlined />,\n      label: '退出登录',\n      onClick: logout,\n    },\n  ];\n\n  // 根据当前主题确定菜单主题 - 使用主题包中的menuVariant配置\n  const menuTheme = currentTheme?.menuVariant || 'light';\n  \n  return (\n    <Layout className={`top-menu-layout ${currentTheme?.meta.id || 'light'}-theme`}>\n      <Header className={`top-header ${currentTheme?.meta.id || 'light'}-theme`}>\n        <div className=\"header-content\">\n          <div className=\"header-left\">\n            <div className=\"logo\">\n              <div className=\"logo-text\">Spec-Kit</div>\n            </div>\n          </div>\n          \n          <div className=\"header-center\">\n            <Menu\n              theme={menuTheme}\n              mode=\"horizontal\"\n              defaultSelectedKeys={['overview']}\n              items={menuItems}\n              className=\"top-menu menu-theme-unified\"\n            />\n          </div>\n          \n          <div className=\"header-right\">\n            <Space>\n              {/* 快速设置按钮 */}\n              <Button\n                type=\"text\"\n                icon={<SkinOutlined />}\n                onClick={() => setQuickSettingsVisible(true)}\n                className=\"settings-toggle-btn\"\n                title=\"快速设置\"\n              />\n              \n              <Button\n                type=\"text\"\n                icon={<BellOutlined />}\n                className=\"notification-btn\"\n              />\n              \n              <Dropdown\n                menu={{ items: userMenuItems }}\n                placement=\"bottomRight\"\n                trigger={['click']}\n              >\n                <div className=\"user-info\">\n                  <Avatar\n                    size=\"small\"\n                    icon={<UserOutlined />}\n                    src={user?.avatar}\n                    className=\"user-avatar\"\n                  />\n                  <div className=\"user-details\">\n                    <Text className=\"user-name\">\n                      {user?.name || user?.email?.split('@')[0] || '用户'}\n                    </Text>\n                    <Text className=\"user-role\" type=\"secondary\">\n                      {user?.role || \n                       (user?.email?.includes('admin') ? '管理员' : '用户') ||\n                       'user'}\n                    </Text>\n                  </div>\n                </div>\n              </Dropdown>\n            </Space>\n          </div>\n        </div>\n      </Header>\n      \n      <Content className={`top-content ${currentTheme?.meta.id || 'light'}-theme content-full-height`}>\n        {children}\n      </Content>\n      \n      {/* 快速设置面板 */}\n      <QuickSettingsPanel\n        visible={quickSettingsVisible}\n        onClose={() => setQuickSettingsVisible(false)}\n      />\n    </Layout>\n  );\n};\n\nexport default TopMenuLayout;\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/theme/EnhancedThemeSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[864,867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[864,867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增强主题切换器组件\n * 基于Spec-Kit方法实现的完整主题切换功能\n */\n\nimport React, { useState } from 'react';\nimport { Card, Radio, Space, Typography, Button, Tooltip, Divider, Switch, ColorPicker } from 'antd';\nimport { \n  BgColorsOutlined, \n  SunOutlined, \n  MoonOutlined, \n  EyeOutlined,\n  SettingOutlined,\n  ReloadOutlined,\n  AppstoreOutlined\n} from '@ant-design/icons';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport '../../styles/menu-theme.css';\n\nconst { Title, Text } = Typography;\n\nconst EnhancedThemeSwitcher: React.FC = () => {\n  const { currentTheme, setTheme, availableThemes, isDarkMode, toggleTheme } = useTheme();\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [previewTheme, setPreviewTheme] = useState<string | null>(null);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  // 处理主题切换\n  const handleThemeChange = (e: any) => {\n    const themeName = e.target.value;\n    setTheme(themeName);\n  };\n\n  // 预览主题\n  const handlePreview = (themeName: string) => {\n    setIsPreviewMode(true);\n    setPreviewTheme(themeName);\n    \n    // 临时应用主题\n    const tempTheme = availableThemes.find(t => t.name === themeName);\n    if (tempTheme) {\n      // 这里可以临时应用主题样式\n      document.documentElement.className = `theme-${themeName}`;\n    }\n    \n    // 3秒后恢复原主题\n    setTimeout(() => {\n      setIsPreviewMode(false);\n      setPreviewTheme(null);\n      document.documentElement.className = `theme-${currentTheme.name}`;\n    }, 3000);\n  };\n\n  // 重置主题\n  const handleReset = () => {\n    setTheme('light');\n  };\n\n  // 获取主题图标\n  const getThemeIcon = (themeName: string) => {\n    switch (themeName) {\n      case 'light':\n        return <SunOutlined />;\n      case 'dark':\n        return <MoonOutlined />;\n      case 'high-contrast':\n        return <BgColorsOutlined />;\n      default:\n        return <AppstoreOutlined />;\n    }\n  };\n\n  // 获取主题描述\n  const getThemeDescription = (themeName: string) => {\n    switch (themeName) {\n      case 'light':\n        return '明亮清爽的浅色主题，适合日间使用';\n      case 'dark':\n        return '护眼的深色主题，适合夜间使用';\n      case 'high-contrast':\n        return '高对比度主题，提升可访问性';\n      default:\n        return '自定义主题配置';\n    }\n  };\n\n  return (\n    <Card \n      title={\n        <Space>\n          <BgColorsOutlined />\n          <span>主题设置</span>\n        </Space>\n      }\n      className=\"enhanced-theme-switcher\"\n      extra={\n        <Space>\n          <Tooltip title=\"高级设置\">\n            <Button \n              type=\"text\" \n              icon={<SettingOutlined />} \n              onClick={() => setShowAdvanced(!showAdvanced)}\n              size=\"small\"\n            />\n          </Tooltip>\n          <Tooltip title=\"重置为默认主题\">\n            <Button \n              type=\"text\" \n              icon={<ReloadOutlined />} \n              onClick={handleReset}\n              size=\"small\"\n            />\n          </Tooltip>\n        </Space>\n      }\n    >\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        {/* 当前主题状态 */}\n        <div className=\"current-theme-status\">\n          <Title level={5}>当前主题</Title>\n          <div className=\"theme-status-info\">\n            <Space>\n              <span className=\"theme-type-badge\">\n                {getThemeIcon(currentTheme.name)}\n                {currentTheme.displayName}\n              </span>\n              <Text type=\"secondary\">\n                {getThemeDescription(currentTheme.name)}\n              </Text>\n            </Space>\n          </div>\n        </div>\n\n        <Divider />\n\n        {/* 主题选择 */}\n        <div className=\"theme-selection\">\n          <Title level={5}>选择主题</Title>\n          <Text type=\"secondary\">选择您偏好的界面主题</Text>\n          \n          <Radio.Group\n            value={currentTheme.name}\n            onChange={handleThemeChange}\n            className=\"theme-options\"\n            style={{ marginTop: 16 }}\n          >\n            <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n              {availableThemes.map((theme) => (\n                <Radio key={theme.name} value={theme.name} className=\"theme-option\">\n                  <div className=\"theme-option-content\">\n                    <Space>\n                      <div className=\"theme-option-icon\">\n                        {getThemeIcon(theme.name)}\n                      </div>\n                      <div className=\"theme-option-details\">\n                        <div className=\"theme-option-title\">\n                          {theme.displayName}\n                        </div>\n                        <Text type=\"secondary\" className=\"theme-option-description\">\n                          {getThemeDescription(theme.name)}\n                        </Text>\n                      </div>\n                    </Space>\n                    <div className=\"theme-option-actions\">\n                      <Tooltip title=\"预览效果\">\n                        <Button \n                          type=\"text\" \n                          icon={<EyeOutlined />} \n                          size=\"small\"\n                          onClick={() => handlePreview(theme.name)}\n                        />\n                      </Tooltip>\n                    </div>\n                  </div>\n                </Radio>\n              ))}\n            </Space>\n          </Radio.Group>\n        </div>\n\n        <Divider />\n\n        {/* 快速操作 */}\n        <div className=\"quick-actions\">\n          <Title level={5}>快速操作</Title>\n          <Space wrap>\n            <Button \n              type=\"primary\" \n              onClick={toggleTheme}\n              icon={isDarkMode ? <SunOutlined /> : <MoonOutlined />}\n            >\n              {isDarkMode ? '切换到浅色' : '切换到深色'}\n            </Button>\n            <Button \n              onClick={() => handlePreview(isDarkMode ? 'light' : 'dark')}\n              icon={<EyeOutlined />}\n            >\n              预览另一种主题\n            </Button>\n          </Space>\n        </div>\n\n        {/* 高级设置 */}\n        {showAdvanced && (\n          <>\n            <Divider />\n            <div className=\"advanced-settings\">\n              <Title level={5}>高级设置</Title>\n              <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n                <div className=\"setting-item\">\n                  <Space>\n                    <Text>自动切换主题</Text>\n                    <Switch size=\"small\" />\n                  </Space>\n                  <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                    根据系统时间自动切换浅色/深色主题\n                  </Text>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <Space>\n                    <Text>主题跟随系统</Text>\n                    <Switch size=\"small\" defaultChecked />\n                  </Space>\n                  <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                    跟随系统主题设置自动切换\n                  </Text>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <Space>\n                    <Text>自定义主色调</Text>\n                    <ColorPicker \n                      size=\"small\" \n                      defaultValue=\"#1890ff\"\n                      showText\n                    />\n                  </Space>\n                  <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                    自定义主题的主色调\n                  </Text>\n                </div>\n              </Space>\n            </div>\n          </>\n        )}\n\n        {/* 预览模式提示 */}\n        {isPreviewMode && previewTheme && (\n          <div className=\"preview-mode-tip\">\n            <Text type=\"warning\">\n              <EyeOutlined /> 正在预览 {availableThemes.find(t => t.name === previewTheme)?.displayName} 主题，3秒后自动退出\n            </Text>\n          </div>\n        )}\n      </Space>\n    </Card>\n  );\n};\n\nexport default EnhancedThemeSwitcher;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/ui/Button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":86,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":86,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../utils/helpers';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',\n        secondary: 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50 focus:ring-primary-500',\n        success: 'bg-success-600 text-white hover:bg-success-700 focus:ring-success-500',\n        warning: 'bg-warning-600 text-white hover:bg-warning-700 focus:ring-warning-500',\n        error: 'bg-error-600 text-white hover:bg-error-700 focus:ring-error-500',\n        ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-primary-500',\n        link: 'text-primary-600 hover:text-primary-700 underline-offset-4 hover:underline focus:ring-primary-500',\n      },\n      size: {\n        sm: 'px-3 py-1.5 text-xs',\n        md: 'px-4 py-2 text-sm',\n        lg: 'px-6 py-3 text-base',\n        xl: 'px-8 py-4 text-lg',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n      fullWidth: false,\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  loading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, fullWidth, loading, leftIcon, rightIcon, children, disabled, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, fullWidth, className }))}\n        ref={ref}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading && (\n          <svg\n            className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            />\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n        )}\n        {!loading && leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n        {children}\n        {!loading && rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/components/ui/Input.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":81,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":81,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../utils/helpers';\n\nconst inputVariants = cva(\n  'block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-0 transition-colors duration-200 sm:text-sm',\n  {\n    variants: {\n      variant: {\n        default: 'border-gray-300 focus:ring-primary-500 focus:border-primary-500',\n        error: 'border-error-300 focus:ring-error-500 focus:border-error-500',\n        success: 'border-success-300 focus:ring-success-500 focus:border-success-500',\n      },\n      size: {\n        sm: 'px-2 py-1 text-xs',\n        md: 'px-3 py-2 text-sm',\n        lg: 'px-4 py-3 text-base',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  }\n);\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputVariants> {\n  label?: string;\n  error?: string;\n  help?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, variant, size, label, error, help, leftIcon, rightIcon, id, ...props }, ref) => {\n    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n    const hasError = !!error;\n    const finalVariant = hasError ? 'error' : variant;\n\n    return (\n      <div className=\"space-y-1\">\n        {label && (\n          <label htmlFor={inputId} className=\"block text-sm font-medium text-gray-700\">\n            {label}\n          </label>\n        )}\n        <div className=\"relative\">\n          {leftIcon && (\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <span className=\"text-gray-400\">{leftIcon}</span>\n            </div>\n          )}\n          <input\n            id={inputId}\n            className={cn(\n              inputVariants({ variant: finalVariant, size, className }),\n              leftIcon && 'pl-10',\n              rightIcon && 'pr-10'\n            )}\n            ref={ref}\n            {...props}\n          />\n          {rightIcon && (\n            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n              <span className=\"text-gray-400\">{rightIcon}</span>\n            </div>\n          )}\n        </div>\n        {error && <p className=\"text-sm text-error-600\">{error}</p>}\n        {help && !error && <p className=\"text-sm text-gray-500\">{help}</p>}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport { Input, inputVariants };\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/contexts/LayoutContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":9,"column":13,"nodeType":"Identifier","messageId":"namedExport","endLine":9,"endColumn":23},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":25,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":25,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":47,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":47,"endColumn":33},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":91,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":91,"endColumn":49},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":196,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":196,"endColumn":23},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":205,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":205,"endColumn":25}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 布局上下文\n * 基于Spec-Kit方法实现的布局状态管理\n */\n\nimport React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\n\n// 布局类型枚举\nexport enum LayoutType {\n  SIDEBAR = 'sidebar',\n  TOP = 'top'\n}\n\n// 布局配置接口\nexport interface LayoutConfig {\n  type: LayoutType;\n  collapsed?: boolean; // 仅适用于sidebar布局\n  theme?: 'light' | 'dark';\n  fixed?: boolean; // 固定菜单栏\n  width?: number; // 菜单宽度\n  height?: number; // 顶部菜单高度\n}\n\n// 布局常量\nexport const LAYOUT_CONSTANTS = {\n  SIDEBAR_WIDTH: 240,\n  SIDEBAR_COLLAPSED_WIDTH: 80,\n  TOP_MENU_HEIGHT: 64,\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  ANIMATION_DURATION: 300,\n} as const;\n\n// 布局上下文类型\nexport interface LayoutContextType {\n  layout: LayoutConfig;\n  setLayout: (layout: LayoutConfig) => void;\n  toggleLayout: () => void;\n  toggleCollapse: () => void;\n  isSidebar: boolean;\n  isTop: boolean;\n  isCollapsed: boolean;\n  isLoading: boolean;\n}\n\n// 布局存储键\nexport const LAYOUT_STORAGE_KEYS = {\n  LAYOUT_CONFIG: 'layoutConfig',\n  LAYOUT_HISTORY: 'layoutHistory',\n  USER_PREFERENCES: 'userPreferences',\n} as const;\n\n// 应用布局CSS变量\nconst applyLayoutCSSVariables = (config: LayoutConfig): void => {\n  const root = document.documentElement;\n  \n  // 设置布局类型\n  root.style.setProperty('--layout-type', config.type);\n  \n  // 设置侧边栏宽度\n  const sidebarWidth = config.collapsed ? LAYOUT_CONSTANTS.SIDEBAR_COLLAPSED_WIDTH : LAYOUT_CONSTANTS.SIDEBAR_WIDTH;\n  root.style.setProperty('--sidebar-width', `${sidebarWidth}px`);\n  root.style.setProperty('--sidebar-collapsed-width', `${LAYOUT_CONSTANTS.SIDEBAR_COLLAPSED_WIDTH}px`);\n  \n  // 设置顶部菜单高度\n  root.style.setProperty('--top-menu-height', `${LAYOUT_CONSTANTS.TOP_MENU_HEIGHT}px`);\n  \n  // 设置内容区域高度\n  const contentHeight = config.type === 'top' ? `calc(100vh - ${LAYOUT_CONSTANTS.TOP_MENU_HEIGHT}px)` : '100vh';\n  root.style.setProperty('--content-height', contentHeight);\n  \n  // 设置内容区域宽度\n  const contentWidth = config.type === 'sidebar' ? `calc(100vw - ${sidebarWidth}px)` : '100vw';\n  root.style.setProperty('--content-width', contentWidth);\n  \n  // 设置动画持续时间\n  root.style.setProperty('--layout-transition-duration', `${LAYOUT_CONSTANTS.ANIMATION_DURATION}ms`);\n  \n  // 设置固定状态\n  root.style.setProperty('--layout-fixed', config.fixed ? '1' : '0');\n  \n  // 添加布局类名到body\n  document.body.className = document.body.className.replace(/layout-\\w+/g, '');\n  document.body.classList.add(`layout-${config.type}`);\n  if (config.collapsed) {\n    document.body.classList.add('layout-collapsed');\n  }\n};\n\n// 布局默认配置\nexport const DEFAULT_LAYOUT_CONFIG: LayoutConfig = {\n  type: 'sidebar',\n  collapsed: false,\n  theme: 'light',\n  fixed: true,\n  width: 240,\n  height: 64,\n};\n\n// 创建布局上下文\nconst LayoutContext = createContext<LayoutContextType | null>(null);\n\n// 布局提供者组件\nexport const LayoutProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [layout, setLayoutState] = useState<LayoutConfig>(DEFAULT_LAYOUT_CONFIG);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 从本地存储加载布局配置\n  useEffect(() => {\n    const loadLayoutConfig = () => {\n      try {\n        const savedConfig = localStorage.getItem(LAYOUT_STORAGE_KEYS.LAYOUT_CONFIG);\n        if (savedConfig) {\n          const parsedConfig = JSON.parse(savedConfig);\n          setLayoutState(parsedConfig);\n        }\n      } catch (error) {\n        console.warn('Failed to load layout config:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadLayoutConfig();\n  }, []);\n\n  // 保存布局配置到本地存储\n  const saveLayoutConfig = useCallback((config: LayoutConfig) => {\n    try {\n      localStorage.setItem(LAYOUT_STORAGE_KEYS.LAYOUT_CONFIG, JSON.stringify(config));\n    } catch (error) {\n      console.warn('Failed to save layout config:', error);\n    }\n  }, []);\n\n  // 设置布局配置\n  const setLayout = useCallback((newLayout: LayoutConfig) => {\n    setLayoutState(newLayout);\n    saveLayoutConfig(newLayout);\n  }, [saveLayoutConfig]);\n\n  // 切换布局类型\n  const toggleLayout = useCallback(() => {\n    const newType = layout.type === 'sidebar' ? 'top' : 'sidebar';\n    const newLayout: LayoutConfig = {\n      ...layout,\n      type: newType,\n      collapsed: newType === 'top' ? false : layout.collapsed,\n    };\n    setLayout(newLayout);\n  }, [layout, setLayout]);\n\n  // 切换侧边栏折叠状态\n  const toggleCollapse = useCallback(() => {\n    if (layout.type === 'sidebar') {\n      const newLayout: LayoutConfig = {\n        ...layout,\n        collapsed: !layout.collapsed,\n      };\n      setLayout(newLayout);\n    }\n  }, [layout, setLayout]);\n\n  // 计算布局状态\n  const isSidebar = layout.type === 'sidebar';\n  const isTop = layout.type === 'top';\n  const isCollapsed = layout.collapsed || false;\n\n  // 应用布局CSS变量\n  useEffect(() => {\n    if (!isLoading) {\n      applyLayoutCSSVariables(layout);\n    }\n  }, [layout, isLoading]);\n\n  // 上下文值\n  const contextValue: LayoutContextType = {\n    layout,\n    setLayout,\n    toggleLayout,\n    toggleCollapse,\n    isSidebar,\n    isTop,\n    isCollapsed,\n    isLoading,\n  };\n\n  return (\n    <LayoutContext.Provider value={contextValue}>\n      {children}\n    </LayoutContext.Provider>\n  );\n};\n\n// 使用布局上下文的Hook\nexport const useLayout = (): LayoutContextType => {\n  const context = useContext(LayoutContext);\n  if (!context) {\n    throw new Error('useLayout must be used within a LayoutProvider');\n  }\n  return context;\n};\n\n// 布局工具函数\nexport const layoutUtils = {\n  // 验证布局配置\n  validateLayoutConfig: (config: LayoutConfig): boolean => {\n    return config && config.type && (config.type === 'sidebar' || config.type === 'top');\n  },\n\n  // 获取布局CSS类名\n  getLayoutClassName: (config: LayoutConfig): string => {\n    const classes = [`layout-${config.type}`];\n    if (config.collapsed) classes.push('layout-collapsed');\n    if (config.fixed) classes.push('layout-fixed');\n    return classes.join(' ');\n  },\n\n  // 重置布局配置\n  resetLayoutConfig: (): LayoutConfig => {\n    return { ...DEFAULT_LAYOUT_CONFIG };\n  },\n};\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/contexts/ThemeContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'themeManager' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loadAllThemes' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getGlobalStyleManager' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":32,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":32,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":244,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":244,"endColumn":22}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题上下文\n * 基于Spec-Kit方法实现的主题状态管理\n */\n\nimport React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport { ConfigProvider } from 'antd';\nimport { \n  themeManager,\n  loadAllThemes,\n  getTheme,\n  getAllThemes,\n  initializeThemes,\n  getGlobalStyleManager\n} from '../themes';\nimport type { ThemePackageConfig } from '../themes';\nimport { useAuthStore } from '../stores/authStore';\n\n// 类型定义已移动到 antd-themes.ts 文件中\n\n// 主题上下文类型\nexport interface ThemeContextType {\n  currentTheme: ThemePackageConfig;\n  availableThemes: ThemePackageConfig[];\n  setTheme: (themeName: string) => void;\n  toggleTheme: () => void;\n  isDarkMode: boolean;\n  isLoading: boolean;\n}\n\n// 主题存储键\nexport const THEME_STORAGE_KEYS = {\n  SELECTED_THEME: 'selectedTheme',\n  THEME_CONFIG: 'themeConfig',\n  THEME_HISTORY: 'themeHistory',\n  USER_THEME_PREFIX: 'user_theme_', // 用户主题偏好前缀\n} as const;\n\n// 主题应用函数已由 ConfigProvider 处理\n\n// 创建主题上下文\nconst ThemeContext = createContext<ThemeContextType | null>(null);\n\n// 旧主题定义已移动到 antd-themes.ts 文件中\n\n// 深色主题定义已移动到 antd-themes.ts 文件中\n\n// 高对比度主题定义已移动到 antd-themes.ts 文件中\n\n// 使用从 antd-themes.ts 导入的主题列表\n\n// 主题提供者组件\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [currentTheme, setCurrentTheme] = useState<ThemePackageConfig | null>(null);\n  const [availableThemes, setAvailableThemes] = useState<ThemePackageConfig[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { user, isAuthenticated } = useAuthStore();\n\n  // 初始化主题\n  useEffect(() => {\n    const initializeTheme = async () => {\n      try {\n        // 初始化主题包系统（这会加载所有主题包）\n        await initializeThemes();\n        \n        // 获取所有已加载的主题包\n        const themes = getAllThemes();\n        setAvailableThemes(themes);\n        \n        let themeToSet;\n        \n        if (isAuthenticated && user) {\n          // 登录状态：获取用户特定的主题偏好\n          const userThemeKey = `${THEME_STORAGE_KEYS.USER_THEME_PREFIX}${user.id}`;\n          const userThemeName = localStorage.getItem(userThemeKey);\n          \n          if (userThemeName) {\n            const userTheme = getTheme(userThemeName);\n            if (userTheme) {\n              themeToSet = userTheme;\n            }\n          }\n          \n          // 如果用户没有设置主题偏好，使用浅色主题作为默认\n          if (!themeToSet) {\n            themeToSet = getTheme('light') || themes[0];\n            // 保存用户的默认主题偏好\n            localStorage.setItem(userThemeKey, 'light');\n          }\n        } else {\n          // 未登录状态：使用浅色主题作为系统默认\n          themeToSet = getTheme('light') || themes[0];\n        }\n        \n        setCurrentTheme(themeToSet);\n      } catch (error) {\n        console.error('Failed to initialize theme:', error);\n        // 使用默认浅色主题\n        const defaultTheme = getTheme('light');\n        if (defaultTheme) {\n          setCurrentTheme(defaultTheme);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeTheme();\n  }, [isAuthenticated, user]);\n\n  // 设置主题 - 简化版本，只更换样式类名\n  const setTheme = useCallback((themeName: string) => {\n    try {\n      const theme = getTheme(themeName);\n      if (theme) {\n        console.log('Setting theme:', themeName);\n        setCurrentTheme(theme);\n        \n        // 简单切换主题类名\n        const root = document.documentElement;\n        const body = document.body;\n        \n        // 移除所有主题类名\n        root.className = root.className.replace(/theme-\\w+/g, '');\n        body.className = body.className.replace(/theme-\\w+/g, '');\n        \n        // 添加新主题类名\n        const themeClass = `theme-${theme.meta.id}`;\n        root.classList.add(themeClass);\n        body.classList.add(themeClass);\n        \n        // 保存主题偏好\n        if (isAuthenticated && user) {\n          // 登录用户：保存到用户特定的存储键\n          const userThemeKey = `${THEME_STORAGE_KEYS.USER_THEME_PREFIX}${user.id}`;\n          localStorage.setItem(userThemeKey, themeName);\n          console.log('User theme preference saved:', themeName);\n        } else {\n          // 未登录用户：保存到通用存储键（临时）\n          localStorage.setItem(THEME_STORAGE_KEYS.SELECTED_THEME, themeName);\n          console.log('Temporary theme saved:', themeName);\n        }\n        \n        console.log('Theme switched to:', themeName);\n      } else {\n        console.error('Theme not found:', themeName);\n      }\n    } catch (error) {\n      console.error('Failed to set theme:', error);\n    }\n  }, [isAuthenticated, user]);\n\n  // 监听用户登录状态变化，应用用户主题偏好\n  useEffect(() => {\n    if (isAuthenticated && user && !isLoading) {\n      // 用户登录后，立即应用其主题偏好\n      const userThemeKey = `${THEME_STORAGE_KEYS.USER_THEME_PREFIX}${user.id}`;\n      const userThemeName = localStorage.getItem(userThemeKey);\n      \n      if (userThemeName && userThemeName !== currentTheme?.meta.id) {\n        console.log('Applying user theme preference:', userThemeName);\n        setTheme(userThemeName);\n      } else if (!userThemeName) {\n        // 如果用户没有主题偏好，设置默认浅色主题\n        console.log('Setting default light theme for new user');\n        setTheme('light');\n      }\n    } else if (!isAuthenticated && !isLoading) {\n      // 用户登出后，切换到系统默认浅色主题\n      console.log('User logged out, switching to default light theme');\n      setTheme('light');\n    }\n  }, [isAuthenticated, user, isLoading, currentTheme, setTheme]);\n\n  // 切换主题（在浅色和深色之间切换）\n  const toggleTheme = useCallback(() => {\n    if (!currentTheme) return;\n    const newTheme = currentTheme.meta.id === 'dark' ? getTheme('light') : getTheme('dark');\n    if (newTheme) {\n      setTheme(newTheme.meta.id);\n    }\n  }, [currentTheme, setTheme]);\n\n  // 监听系统主题变化\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      // 只有在没有手动设置主题时才跟随系统\n      const savedThemeName = localStorage.getItem(THEME_STORAGE_KEYS.SELECTED_THEME);\n      if (!savedThemeName) {\n        const systemTheme = e.matches ? getTheme('dark') : getTheme('light');\n        if (systemTheme) {\n          setCurrentTheme(systemTheme);\n        }\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  const contextValue: ThemeContextType = {\n    currentTheme: currentTheme!,\n    availableThemes,\n    setTheme,\n    toggleTheme,\n    isDarkMode: currentTheme?.meta.id === 'dark',\n    isLoading,\n  };\n\n  // 如果主题还未加载完成，显示加载状态\n  if (!currentTheme) {\n    return (\n      <ThemeContext.Provider value={contextValue}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          fontSize: '16px',\n          color: '#666'\n        }}>\n          正在加载主题...\n        </div>\n      </ThemeContext.Provider>\n    );\n  }\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      <ConfigProvider theme={currentTheme}>\n        {children}\n      </ConfigProvider>\n    </ThemeContext.Provider>\n  );\n};\n\n// 使用主题的Hook\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// 主题配置已从 antd-themes.ts 导出\n\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/layouts/AdminLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Row' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Col' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Statistic' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Progress' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChartOutlined' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BgColorsOutlined' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppstoreOutlined' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SunOutlined' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoonOutlined' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is assigned a value but never used.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentTheme' is assigned a value but never used.","line":73,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toggleTheme' is assigned a value but never used.","line":73,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'layout' is assigned a value but never used.","line":74,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toggleLayout' is assigned a value but never used.","line":74,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":215,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5216,5219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5216,5219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 管理面板布局 - 专业UI设计师设计\n * 基于Ant Design的管理界面布局\n */\nimport React, { useState, useEffect } from 'react';\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  Layout,\n  Menu,\n  Avatar,\n  Dropdown,\n  Button,\n  Space,\n  Typography,\n  Badge,\n  Drawer,\n  theme,\n  Row,\n  Col,\n  Card,\n  Statistic,\n  Progress,\n  Tag,\n} from 'antd';\nimport {\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n  DashboardOutlined,\n  UserOutlined,\n  SettingOutlined,\n  SecurityScanOutlined,\n  MailOutlined,\n  LogoutOutlined,\n  BellOutlined,\n  TeamOutlined,\n  SafetyCertificateOutlined,\n  BarChartOutlined,\n  FileTextOutlined,\n  GlobalOutlined,\n  MenuOutlined,\n  BgColorsOutlined,\n  AppstoreOutlined,\n  SunOutlined,\n  MoonOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useAuthStore } from '../stores/authStore';\nimport ThemeSwitcher from '../components/ThemeSwitcher';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useLayout } from '../contexts/LayoutContext';\nimport QuickSettingsPanel from '../components/QuickSettingsPanel';\nimport '../styles/components/admin-layout.css';\n\nconst { Header, Sider, Content } = Layout;\nconst { Title, Text } = Typography;\n\ninterface MenuItem {\n  key: string;\n  icon: React.ReactNode;\n  label: string;\n  path?: string;\n  children?: MenuItem[];\n}\n\nconst AdminLayout: React.FC = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  const [mobileMenuVisible, setMobileMenuVisible] = useState(false);\n  const [quickSettingsVisible, setQuickSettingsVisible] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user, logout, isAuthenticated } = useAuthStore();\n  const { token } = theme.useToken();\n  const { currentTheme, toggleTheme } = useTheme();\n  const { layout, toggleLayout } = useLayout();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate('/login');\n    }\n  }, [isAuthenticated, navigate]);\n\n  const menuItems: MenuItem[] = [\n    {\n      key: 'overview',\n      icon: <DashboardOutlined />,\n      label: '概览',\n      path: '/overview',\n    },\n    {\n      key: 'system-settings',\n      icon: <SettingOutlined />,\n      label: '系统设置',\n      children: [\n        {\n          key: 'basic-config',\n          icon: <GlobalOutlined />,\n          label: '基础配置',\n          path: '/system-settings/basic',\n        },\n        {\n          key: 'admin-management',\n          icon: <TeamOutlined />,\n          label: '管理员管理',\n          path: '/system-settings/admin',\n        },\n        {\n          key: 'security-config',\n          icon: <SecurityScanOutlined />,\n          label: '安全配置',\n          path: '/system-settings/security',\n        },\n        {\n          key: 'email-config',\n          icon: <MailOutlined />,\n          label: '邮箱配置',\n          path: '/system-settings/email',\n        },\n      ],\n    },\n    {\n      key: 'logs',\n      icon: <FileTextOutlined />,\n      label: '系统日志',\n      path: '/logs',\n    },\n  ];\n\n  const handleMenuClick = ({ key }: { key: string }) => {\n    const findPath = (items: MenuItem[], targetKey: string): string | null => {\n      for (const item of items) {\n        if (item.key === targetKey && item.path) {\n          return item.path;\n        }\n        if (item.children) {\n          const childPath = findPath(item.children, targetKey);\n          if (childPath) return childPath;\n        }\n      }\n      return null;\n    };\n\n    const path = findPath(menuItems, key);\n    if (path) {\n      navigate(path);\n      setMobileMenuVisible(false);\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n    navigate('/login');\n  };\n\n  const isSuperAdmin = user?.is_super_admin?.() || false;\n\n  const userMenuItems = [\n    {\n      key: 'profile',\n      icon: <UserOutlined />,\n      label: '个人资料',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: '账户设置',\n    },\n    ...(isSuperAdmin ? [{\n      key: 'system-settings',\n      icon: <SettingOutlined />,\n      label: '系统设置',\n      onClick: () => navigate('/system-settings'),\n    }] : []),\n    {\n      type: 'divider' as const,\n    },\n    {\n      key: 'theme',\n      icon: <SettingOutlined />,\n      label: '主题设置',\n      children: [\n        {\n          key: 'theme-switcher',\n          label: <ThemeSwitcher size=\"small\" showLabel={false} />,\n        },\n      ],\n    },\n    {\n      type: 'divider' as const,\n    },\n    {\n      key: 'logout',\n      icon: <LogoutOutlined />,\n      label: '退出登录',\n      onClick: handleLogout,\n    },\n  ];\n\n  const getSelectedKeys = () => {\n    const path = location.pathname;\n    if (path.startsWith('/overview')) return ['overview'];\n    if (path.startsWith('/system-settings/basic')) return ['basic-config'];\n    if (path.startsWith('/system-settings/admin')) return ['admin-management'];\n    if (path.startsWith('/system-settings/security')) return ['security-config'];\n    if (path.startsWith('/system-settings/email')) return ['email-config'];\n    if (path.startsWith('/logs')) return ['logs'];\n    return [];\n  };\n\n  const getOpenKeys = () => {\n    const path = location.pathname;\n    if (path.startsWith('/system-settings')) return ['system-settings'];\n    return [];\n  };\n\n  const renderMenuItems = (items: MenuItem[]): any[] => {\n    return items.map(item => ({\n      key: item.key,\n      icon: item.icon,\n      label: item.label,\n      children: item.children ? renderMenuItems(item.children) : undefined,\n    }));\n  };\n\n  return (\n    <Layout className=\"admin-layout\">\n      {/* 侧边栏 */}\n      <Sider\n        trigger={null}\n        collapsible\n        collapsed={collapsed}\n        className=\"admin-sider\"\n        breakpoint=\"lg\"\n        collapsedWidth={80}\n        onBreakpoint={(broken) => {\n          if (broken) {\n            setCollapsed(true);\n          }\n        }}\n      >\n               <div className=\"admin-logo\">\n                 <motion.div\n                   initial={{ scale: 0, opacity: 0 }}\n                   animate={{ scale: 1, opacity: 1 }}\n                   transition={{ duration: 0.5, delay: 0.1 }}\n                   className=\"admin-logo-content\"\n                   style={{ gap: collapsed ? 0 : 12 }}\n                 >\n                   <Avatar\n                     size={collapsed ? 32 : 40}\n                     icon={<SafetyCertificateOutlined />}\n                     className=\"admin-logo-avatar\"\n                   />\n                   {!collapsed && (\n                     <motion.div\n                       initial={{ opacity: 0, x: -10 }}\n                       animate={{ opacity: 1, x: 0 }}\n                       transition={{ duration: 0.3, delay: 0.2 }}\n                     >\n                       <Title level={5} className=\"admin-logo-text\">\n                         管理系统\n                       </Title>\n                     </motion.div>\n                   )}\n                 </motion.div>\n               </div>\n\n        <Menu\n          mode=\"inline\"\n          selectedKeys={getSelectedKeys()}\n          defaultOpenKeys={getOpenKeys()}\n          items={renderMenuItems(menuItems)}\n          onClick={handleMenuClick}\n          className=\"admin-menu\"\n          theme=\"light\"\n        />\n      </Sider>\n\n      <Layout>\n        {/* 顶部导航 */}\n        <Header className=\"admin-header\">\n          <div className=\"admin-header-left\">\n            <Button\n              type=\"text\"\n              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\n              onClick={() => setCollapsed(!collapsed)}\n              className=\"admin-menu-toggle\"\n            />\n            \n            <Button\n              type=\"text\"\n              icon={<MenuOutlined />}\n              onClick={() => setMobileMenuVisible(true)}\n              className=\"mobile-menu-btn\"\n            />\n          </div>\n\n          <div className=\"admin-header-right\">\n            {/* 快速设置按钮 */}\n            <Button\n              type=\"text\"\n              icon={<SettingOutlined />}\n              onClick={() => setQuickSettingsVisible(true)}\n              className=\"admin-settings-toggle\"\n              title=\"快速设置\"\n            />\n\n            <Badge count={5} size=\"small\">\n              <Button\n                type=\"text\"\n                icon={<BellOutlined />}\n                className=\"admin-notification-btn\"\n              />\n            </Badge>\n\n            <Dropdown\n              menu={{ items: userMenuItems }}\n              placement=\"bottomRight\"\n              arrow\n            >\n              <Space className=\"admin-user-info\">\n                <Avatar\n                  size=\"default\"\n                  icon={<UserOutlined />}\n                  className=\"admin-user-avatar\"\n                  style={{ \n                    backgroundColor: isSuperAdmin ? '#ff4d4f' : 'var(--color-primary)'\n                  }}\n                />\n                <div className=\"admin-user-details\">\n                  <Text strong className=\"admin-user-email\">\n                    {user?.email}\n                  </Text>\n                  <Tag \n                    color={isSuperAdmin ? 'red' : 'blue'} \n                    size=\"small\"\n                    className=\"admin-user-role\"\n                  >\n                    {isSuperAdmin ? '超级管理员' : '管理员'}\n                  </Tag>\n                </div>\n              </Space>\n            </Dropdown>\n          </div>\n        </Header>\n\n        {/* 主要内容区域 */}\n        <Content className=\"admin-content\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"admin-content-inner\"\n          >\n            <Outlet />\n          </motion.div>\n        </Content>\n      </Layout>\n\n      {/* 移动端菜单抽屉 */}\n      <Drawer\n        title=\"导航菜单\"\n        placement=\"left\"\n        onClose={() => setMobileMenuVisible(false)}\n        open={mobileMenuVisible}\n        width={280}\n        className=\"admin-mobile-drawer\"\n        styles={{ body: { padding: 0 } }}\n      >\n        <Menu\n          mode=\"inline\"\n          selectedKeys={getSelectedKeys()}\n          defaultOpenKeys={getOpenKeys()}\n          items={renderMenuItems(menuItems)}\n          onClick={handleMenuClick}\n          className=\"admin-mobile-menu\"\n        />\n      </Drawer>\n\n      {/* 快速设置面板 */}\n      <QuickSettingsPanel\n        visible={quickSettingsVisible}\n        onClose={() => setQuickSettingsVisible(false)}\n      />\n    </Layout>\n  );\n};\n\nexport default AdminLayout;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/DashboardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paragraph' is assigned a value but never used.","line":42,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3673,3676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3673,3676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":367,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":367,"endColumn":50}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 仪表板页面 - 专业UI设计师设计\n * 基于Ant Design的管理仪表板\n */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Row,\n  Col,\n  Card,\n  Statistic,\n  Progress,\n  Typography,\n  Space,\n  Button,\n  Avatar,\n  List,\n  Tag,\n  Timeline,\n  Table,\n  Badge,\n  Tooltip,\n  Divider,\n} from 'antd';\nimport {\n  UserOutlined,\n  TeamOutlined,\n  SafetyCertificateOutlined,\n  MailOutlined,\n  BarChartOutlined,\n  ArrowUpOutlined,\n  ArrowDownOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n  EditOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useAuthStore } from '../stores/authStore';\n\nconst { Title, Text, Paragraph } = Typography;\n\ninterface StatCardProps {\n  title: string;\n  value: number;\n  icon: React.ReactNode;\n  color: string;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  loading?: boolean;\n}\n\nconst StatCard: React.FC<StatCardProps> = ({ title, value, icon, color, trend, loading }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    transition={{ duration: 0.3 }}\n  >\n    <Card\n      className=\"stat-card\"\n      style={{\n        borderRadius: 12,\n        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02)',\n        border: 'none',\n      }}\n    >\n      <Statistic\n        title={title}\n        value={value}\n        prefix={\n          <Avatar\n            size={40}\n            icon={icon}\n            style={{ backgroundColor: color }}\n          />\n        }\n        loading={loading}\n        valueStyle={{ color: color, fontSize: 24, fontWeight: 600 }}\n      />\n      {trend && (\n        <div className=\"mt-2\">\n          <Space>\n            {trend.isPositive ? (\n              <ArrowUpOutlined style={{ color: '#52c41a' }} />\n            ) : (\n              <ArrowDownOutlined style={{ color: '#ff4d4f' }} />\n            )}\n            <Text\n              style={{\n                color: trend.isPositive ? '#52c41a' : '#ff4d4f',\n                fontSize: 12,\n              }}\n            >\n              {trend.isPositive ? '+' : ''}{trend.value}%\n            </Text>\n            <Text type=\"secondary\" style={{ fontSize: 12 }}>\n              较上月\n            </Text>\n          </Space>\n        </div>\n      )}\n    </Card>\n  </motion.div>\n);\n\nconst DashboardPage: React.FC = () => {\n  const { user } = useAuthStore();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 模拟数据加载\n    setTimeout(() => setLoading(false), 1000);\n  }, []);\n\n  const recentUsers = [\n    {\n      id: 1,\n      name: '张三',\n      email: 'zhangsan@example.com',\n      role: '管理员',\n      status: 'active',\n      lastLogin: '2024-01-15 10:30',\n    },\n    {\n      id: 2,\n      name: '李四',\n      email: 'lisi@example.com',\n      role: '用户',\n      status: 'active',\n      lastLogin: '2024-01-15 09:15',\n    },\n    {\n      id: 3,\n      name: '王五',\n      email: 'wangwu@example.com',\n      role: '用户',\n      status: 'inactive',\n      lastLogin: '2024-01-14 16:45',\n    },\n  ];\n\n  const systemLogs = [\n    {\n      time: '2024-01-15 10:30:00',\n      action: '用户登录',\n      user: '张三',\n      status: 'success',\n    },\n    {\n      time: '2024-01-15 10:25:00',\n      action: '密码修改',\n      user: '李四',\n      status: 'success',\n    },\n    {\n      time: '2024-01-15 10:20:00',\n      action: '登录失败',\n      user: '未知用户',\n      status: 'error',\n    },\n    {\n      time: '2024-01-15 10:15:00',\n      action: '系统配置更新',\n      user: '超级管理员',\n      status: 'success',\n    },\n  ];\n\n  const userColumns = [\n    {\n      title: '用户',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: string, record: any) => (\n        <Space>\n          <Avatar size=\"small\" icon={<UserOutlined />} />\n          <div>\n            <Text strong>{text}</Text>\n            <br />\n            <Text type=\"secondary\" style={{ fontSize: 12 }}>\n              {record.email}\n            </Text>\n          </div>\n        </Space>\n      ),\n    },\n    {\n      title: '角色',\n      dataIndex: 'role',\n      key: 'role',\n      render: (role: string) => (\n        <Tag color={role === '管理员' ? 'blue' : 'green'}>\n          {role}\n        </Tag>\n      ),\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string) => (\n        <Badge\n          status={status === 'active' ? 'success' : 'default'}\n          text={status === 'active' ? '活跃' : '非活跃'}\n        />\n      ),\n    },\n    {\n      title: '最后登录',\n      dataIndex: 'lastLogin',\n      key: 'lastLogin',\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: () => (\n        <Space>\n          <Tooltip title=\"查看\">\n            <Button type=\"text\" icon={<EyeOutlined />} size=\"small\" />\n          </Tooltip>\n          <Tooltip title=\"编辑\">\n            <Button type=\"text\" icon={<EditOutlined />} size=\"small\" />\n          </Tooltip>\n          <Tooltip title=\"删除\">\n            <Button type=\"text\" icon={<DeleteOutlined />} size=\"small\" danger />\n          </Tooltip>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"page-content\">\n      {/* 页面标题 */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"mb-6\"\n      >\n        <Title level={2} style={{ marginBottom: 8 }}>\n          仪表板\n        </Title>\n        <Text type=\"secondary\">\n          欢迎回来，{user?.email}！这里是您的系统概览。\n        </Text>\n      </motion.div>\n\n      {/* 统计卡片 */}\n      <Row gutter={[24, 24]} className=\"mb-6\">\n        <Col xs={24} sm={12} lg={6}>\n          <StatCard\n            title=\"总用户数\"\n            value={1248}\n            icon={<UserOutlined />}\n            color=\"#1890ff\"\n            trend={{ value: 12.5, isPositive: true }}\n            loading={loading}\n          />\n        </Col>\n        <Col xs={24} sm={12} lg={6}>\n          <StatCard\n            title=\"活跃用户\"\n            value={892}\n            icon={<TeamOutlined />}\n            color=\"#52c41a\"\n            trend={{ value: 8.2, isPositive: true }}\n            loading={loading}\n          />\n        </Col>\n        <Col xs={24} sm={12} lg={6}>\n          <StatCard\n            title=\"系统角色\"\n            value={3}\n            icon={<SafetyCertificateOutlined />}\n            color=\"#faad14\"\n            trend={{ value: 0, isPositive: true }}\n            loading={loading}\n          />\n        </Col>\n        <Col xs={24} sm={12} lg={6}>\n          <StatCard\n            title=\"邮件发送\"\n            value={156}\n            icon={<MailOutlined />}\n            color=\"#722ed1\"\n            trend={{ value: -2.1, isPositive: false }}\n            loading={loading}\n          />\n        </Col>\n      </Row>\n\n      <Row gutter={[24, 24]}>\n        {/* 系统状态 */}\n        <Col xs={24} lg={12}>\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: 0.2 }}\n          >\n            <Card\n              title={\n                <Space>\n                  <BarChartOutlined />\n                  系统状态\n                </Space>\n              }\n              style={{ borderRadius: 12, height: '100%' }}\n            >\n              <Space direction=\"vertical\" size=\"large\" className=\"w-full\">\n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <Text>CPU 使用率</Text>\n                    <Text strong>45%</Text>\n                  </div>\n                  <Progress percent={45} strokeColor=\"#1890ff\" />\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <Text>内存使用率</Text>\n                    <Text strong>68%</Text>\n                  </div>\n                  <Progress percent={68} strokeColor=\"#52c41a\" />\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <Text>磁盘使用率</Text>\n                    <Text strong>32%</Text>\n                  </div>\n                  <Progress percent={32} strokeColor=\"#faad14\" />\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <Text>网络带宽</Text>\n                    <Text strong>78%</Text>\n                  </div>\n                  <Progress percent={78} strokeColor=\"#722ed1\" />\n                </div>\n              </Space>\n            </Card>\n          </motion.div>\n        </Col>\n\n        {/* 最近活动 */}\n        <Col xs={24} lg={12}>\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: 0.2 }}\n          >\n            <Card\n              title={\n                <Space>\n                  <ClockCircleOutlined />\n                  最近活动\n                </Space>\n              }\n              style={{ borderRadius: 12, height: '100%' }}\n            >\n              <Timeline\n                items={systemLogs.map((log, index) => ({\n                  dot: log.status === 'success' ? (\n                    <CheckCircleOutlined style={{ color: '#52c41a' }} />\n                  ) : (\n                    <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />\n                  ),\n                  children: (\n                    <div>\n                      <Text strong>{log.action}</Text>\n                      <br />\n                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\n                        {log.user} • {log.time}\n                      </Text>\n                    </div>\n                  ),\n                }))}\n              />\n            </Card>\n          </motion.div>\n        </Col>\n      </Row>\n\n      {/* 用户管理 */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.4 }}\n        className=\"mt-6\"\n      >\n        <Card\n          title={\n            <Space>\n              <TeamOutlined />\n              最近用户\n            </Space>\n          }\n          extra={\n            <Button type=\"primary\" icon={<EyeOutlined />}>\n              查看全部\n            </Button>\n          }\n          style={{ borderRadius: 12 }}\n        >\n          <Table\n            columns={userColumns}\n            dataSource={recentUsers}\n            pagination={false}\n            size=\"small\"\n            rowKey=\"id\"\n          />\n        </Card>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default DashboardPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/ForgotPassword.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":58,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '../components/ui/Button';\nimport { Input } from '../components/ui/Input';\nimport { useAuthStore } from '../stores/authStore';\nimport { isValidEmail } from '../utils/helpers';\n\n// 定义忘记密码数据类型\ninterface ForgotPasswordData {\n  email: string;\n}\n\nconst ForgotPassword: React.FC = () => {\n  const { forgotPassword, isLoading, error, clearError } = useAuthStore();\n  const [formData, setFormData] = useState<ForgotPasswordData>({ email: '' });\n  const [formErrors, setFormErrors] = useState<Partial<ForgotPasswordData>>({});\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  // 清除错误信息\n  useEffect(() => {\n    return () => {\n      clearError();\n    };\n  }, [clearError]);\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    if (formErrors[name as keyof ForgotPasswordData]) {\n      setFormErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n  };\n  \n  const validateForm = (): boolean => {\n    const errors: Partial<ForgotPasswordData> = {};\n    \n    if (!formData.email) {\n      errors.email = '请输入邮箱地址';\n    } else if (!isValidEmail(formData.email)) {\n      errors.email = '请输入有效的邮箱地址';\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    try {\n      await forgotPassword(formData);\n      setIsSubmitted(true);\n    } catch (error) {\n      // 错误已经在store中处理\n    }\n  };\n  \n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-success-100\">\n              <svg className=\"h-6 w-6 text-success-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              邮件已发送\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              我们已向 <strong>{formData.email}</strong> 发送了密码重置链接。\n              请检查您的邮箱并点击链接来重置密码。\n            </p>\n            <div className=\"mt-6\">\n              <Link\n                to=\"/login\"\n                className=\"font-medium text-primary-600 hover:text-primary-500\"\n              >\n                返回登录页面\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            忘记密码？\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            输入您的邮箱地址，我们将发送重置链接给您\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div>\n            <Input\n              label=\"邮箱地址\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              error={formErrors.email}\n              placeholder=\"请输入您的邮箱\"\n              leftIcon={\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                </svg>\n              }\n            />\n          </div>\n          \n          {error && (\n            <div className=\"rounded-md bg-error-50 p-4\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-error-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-error-800\">{error}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <Button\n            type=\"submit\"\n            fullWidth\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            {isLoading ? '发送中...' : '发送重置链接'}\n          </Button>\n          \n          <div className=\"text-center\">\n            <Link\n              to=\"/login\"\n              className=\"font-medium text-primary-600 hover:text-primary-500\"\n            >\n              返回登录页面\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":86,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport { Button } from '../components/ui/Button';\nimport { Input } from '../components/ui/Input';\nimport { useAuthStore } from '../stores/authStore';\nimport { isValidEmail } from '../utils/helpers';\n\n// 定义登录凭据类型\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  remember_me?: boolean;\n}\n\nconst Login: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { login, isLoading, error, clearError, isAuthenticated } = useAuthStore();\n  \n  const [formData, setFormData] = useState<LoginCredentials>({\n    email: '',\n    password: '',\n    remember_me: false,\n  });\n  \n  const [formErrors, setFormErrors] = useState<Partial<LoginCredentials>>({});\n  \n  // 如果已经登录，重定向到仪表板\n  useEffect(() => {\n    if (isAuthenticated) {\n      const from = location.state?.from?.pathname || '/dashboard';\n      navigate(from, { replace: true });\n    }\n  }, [isAuthenticated, navigate, location]);\n  \n  // 清除错误信息\n  useEffect(() => {\n    return () => {\n      clearError();\n    };\n  }, [clearError]);\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n    \n    // 清除对应字段的错误\n    if (formErrors[name as keyof LoginCredentials]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: undefined,\n      }));\n    }\n  };\n  \n  const validateForm = (): boolean => {\n    const errors: Partial<LoginCredentials> = {};\n    \n    if (!formData.email) {\n      errors.email = '请输入邮箱地址';\n    } else if (!isValidEmail(formData.email)) {\n      errors.email = '请输入有效的邮箱地址';\n    }\n    \n    if (!formData.password) {\n      errors.password = '请输入密码';\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    try {\n      await login(formData);\n      // 登录成功后会通过useEffect重定向\n    } catch (error) {\n      // 错误已经在store中处理\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            登录您的账户\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            或者{' '}\n            <Link\n              to=\"/register\"\n              className=\"font-medium text-primary-600 hover:text-primary-500\"\n            >\n              创建新账户\n            </Link>\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"space-y-4\">\n            <Input\n              label=\"邮箱地址\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              error={formErrors.email}\n              placeholder=\"请输入您的邮箱\"\n              leftIcon={\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                </svg>\n              }\n            />\n            \n            <Input\n              label=\"密码\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              value={formData.password}\n              onChange={handleInputChange}\n              error={formErrors.password}\n              placeholder=\"请输入您的密码\"\n              leftIcon={\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                </svg>\n              }\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember_me\"\n                name=\"remember_me\"\n                type=\"checkbox\"\n                checked={formData.remember_me}\n                onChange={handleInputChange}\n                className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"remember_me\" className=\"ml-2 block text-sm text-gray-900\">\n                记住我\n              </label>\n            </div>\n            \n            <div className=\"text-sm\">\n              <Link\n                to=\"/forgot-password\"\n                className=\"font-medium text-primary-600 hover:text-primary-500\"\n              >\n                忘记密码？\n              </Link>\n            </div>\n          </div>\n          \n          {error && (\n            <div className=\"rounded-md bg-error-50 p-4\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-error-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-error-800\">{error}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <Button\n            type=\"submit\"\n            fullWidth\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            {isLoading ? '登录中...' : '登录'}\n          </Button>\n        </form>\n        \n        <div className=\"mt-6\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-300\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-2 bg-gray-50 text-gray-500\">演示账户</span>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 text-center text-sm text-gray-600\">\n            <p>测试账户: demo@example.com</p>\n            <p>测试密码: MySecure2024!</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":50,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1559,1562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1559,1562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 登录页面 - 专业UI设计师设计\n * 基于Ant Design的美观登录界面\n */\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  Card,\n  Form,\n  Input,\n  Button,\n  Checkbox,\n  Typography,\n  Space,\n  Divider,\n  message,\n  Row,\n  Col,\n  Avatar,\n  Tooltip,\n} from 'antd';\nimport {\n  UserOutlined,\n  LockOutlined,\n  EyeInvisibleOutlined,\n  EyeTwoTone,\n  GithubOutlined,\n  GoogleOutlined,\n  TwitterOutlined,\n  SafetyCertificateOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useAuthStore } from '../stores/authStore';\nimport Captcha from '../components/Captcha';\n\nconst { Title, Text, Paragraph } = Typography;\n\n// 定义登录凭据类型\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  remember_me?: boolean;\n  captcha?: string;\n  captcha_id?: string;\n}\n\nconst LoginPage: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { login, isLoading, error, clearError, isAuthenticated } = useAuthStore();\n  const [form] = Form.useForm();\n  const [showCaptcha, setShowCaptcha] = useState(false);\n\n  useEffect(() => {\n    clearError();\n    if (isAuthenticated) {\n      const from = location.state?.from?.pathname || '/dashboard';\n      navigate(from, { replace: true });\n    }\n  }, [isAuthenticated, navigate, location.state, clearError]);\n\n  const handleSubmit = async (values: LoginCredentials) => {\n    try {\n      await login(values);\n      message.success('登录成功！');\n      setShowCaptcha(false); // 登录成功后隐藏验证码\n    } catch (err: any) {\n      message.error(err.detail || '登录失败，请检查您的凭据');\n      // 登录失败后显示验证码\n      setShowCaptcha(true);\n    }\n  };\n\n  const handleDemoLogin = () => {\n    form.setFieldsValue({\n      email: 'demo@example.com',\n      password: 'MySecure2024!',\n    });\n  };\n\n  const handleAdminLogin = () => {\n    form.setFieldsValue({\n      email: 'admin@system.com',\n      password: 'Admin123!',\n    });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"w-full max-w-6xl mx-auto\"\n      >\n        <Row gutter={[48, 48]} align=\"middle\" justify=\"center\">\n          {/* 左侧品牌区域 */}\n          <Col xs={24} lg={12}>\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"text-center lg:text-left\"\n            >\n              <div className=\"mb-8\">\n                <Avatar\n                  size={80}\n                  icon={<SafetyCertificateOutlined />}\n                  style={{\n                    backgroundColor: '#1890ff',\n                    marginBottom: 24,\n                  }}\n                />\n                <Title level={1} style={{ color: 'white', marginBottom: 16 }}>\n                  多用户管理系统\n                </Title>\n                <Paragraph style={{ color: 'rgba(255,255,255,0.8)', fontSize: 18, marginBottom: 32 }}>\n                  安全、高效、现代化的企业级用户管理解决方案\n                </Paragraph>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center text-white\">\n                  <div className=\"w-2 h-2 bg-white rounded-full mr-3\"></div>\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    基于角色的权限控制 (RBAC)\n                  </Text>\n                </div>\n                <div className=\"flex items-center text-white\">\n                  <div className=\"w-2 h-2 bg-white rounded-full mr-3\"></div>\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    JWT 安全认证机制\n                  </Text>\n                </div>\n                <div className=\"flex items-center text-white\">\n                  <div className=\"w-2 h-2 bg-white rounded-full mr-3\"></div>\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    GDPR 合规数据处理\n                  </Text>\n                </div>\n                <div className=\"flex items-center text-white\">\n                  <div className=\"w-2 h-2 bg-white rounded-full mr-3\"></div>\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    响应式现代化界面\n                  </Text>\n                </div>\n              </div>\n            </motion.div>\n          </Col>\n\n          {/* 右侧登录表单 */}\n          <Col xs={24} lg={12}>\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <Card\n                className=\"login-card\"\n                style={{\n                  borderRadius: 16,\n                  boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1)',\n                  border: 'none',\n                }}\n              >\n                <div className=\"text-center mb-8\">\n                  <Title level={2} style={{ marginBottom: 8 }}>\n                    欢迎回来\n                  </Title>\n                  <Text type=\"secondary\">\n                    请登录您的账户以继续使用系统\n                  </Text>\n                </div>\n\n                <Form\n                  form={form}\n                  name=\"login\"\n                  onFinish={handleSubmit}\n                  layout=\"vertical\"\n                  size=\"large\"\n                  autoComplete=\"off\"\n                >\n                  <Form.Item\n                    name=\"email\"\n                    label=\"邮箱地址\"\n                    rules={[\n                      { required: true, message: '请输入邮箱地址' },\n                      { type: 'email', message: '请输入有效的邮箱地址' },\n                    ]}\n                  >\n                    <Input\n                      prefix={<UserOutlined style={{ color: '#bfbfbf' }} />}\n                      placeholder=\"请输入邮箱地址\"\n                      style={{ borderRadius: 8 }}\n                    />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"password\"\n                    label=\"密码\"\n                    rules={[\n                      { required: true, message: '请输入密码' },\n                      { min: 6, message: '密码至少6位字符' },\n                    ]}\n                  >\n                    <Input.Password\n                      prefix={<LockOutlined style={{ color: '#bfbfbf' }} />}\n                      placeholder=\"请输入密码\"\n                      iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                      style={{ borderRadius: 8 }}\n                    />\n                  </Form.Item>\n\n                  {showCaptcha && (\n                    <Form.Item\n                      name=\"captcha\"\n                      label=\"验证码\"\n                      rules={[\n                        { required: true, message: '请输入验证码' },\n                        { len: 4, message: '验证码为4位字符' },\n                      ]}\n                    >\n                      <Captcha\n                        placeholder=\"请输入验证码\"\n                        onCaptchaIdChange={(captchaId) => {\n                          form.setFieldsValue({ captcha_id: captchaId });\n                        }}\n                      />\n                    </Form.Item>\n                  )}\n\n                  <Form.Item>\n                    <div className=\"flex justify-between items-center\">\n                      <Form.Item name=\"remember_me\" valuePropName=\"checked\" noStyle>\n                        <Checkbox>记住我</Checkbox>\n                      </Form.Item>\n                      <Link to=\"/forgot-password\" style={{ color: '#1890ff' }}>\n                        忘记密码？\n                      </Link>\n                    </div>\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      loading={isLoading}\n                      block\n                      size=\"large\"\n                      style={{\n                        height: 48,\n                        borderRadius: 8,\n                        fontSize: 16,\n                        fontWeight: 500,\n                      }}\n                    >\n                      {isLoading ? '登录中...' : '登录'}\n                    </Button>\n                  </Form.Item>\n                </Form>\n\n                <Divider>快速登录</Divider>\n\n                <Space direction=\"vertical\" size=\"middle\" className=\"w-full\">\n                  <Button\n                    type=\"default\"\n                    block\n                    size=\"large\"\n                    onClick={handleDemoLogin}\n                    style={{ height: 44, borderRadius: 8 }}\n                  >\n                    <UserOutlined /> 演示账户登录\n                  </Button>\n                  \n                  <Button\n                    type=\"default\"\n                    block\n                    size=\"large\"\n                    onClick={handleAdminLogin}\n                    style={{ height: 44, borderRadius: 8 }}\n                  >\n                    <SafetyCertificateOutlined /> 超级管理员登录\n                  </Button>\n                </Space>\n\n                <div className=\"text-center mt-6\">\n                  <Text type=\"secondary\">\n                    还没有账户？{' '}\n                    <Link to=\"/register\" style={{ color: '#1890ff', fontWeight: 500 }}>\n                      立即注册\n                    </Link>\n                  </Text>\n                </div>\n\n                <div className=\"text-center mt-4\">\n                  <Space size=\"large\">\n                    <Tooltip title=\"GitHub\">\n                      <Button type=\"text\" icon={<GithubOutlined />} size=\"large\" />\n                    </Tooltip>\n                    <Tooltip title=\"Google\">\n                      <Button type=\"text\" icon={<GoogleOutlined />} size=\"large\" />\n                    </Tooltip>\n                    <Tooltip title=\"Twitter\">\n                      <Button type=\"text\" icon={<TwitterOutlined />} size=\"large\" />\n                    </Tooltip>\n                  </Space>\n                </div>\n              </Card>\n            </motion.div>\n          </Col>\n        </Row>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/OverviewPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MailOutlined' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 概览页面 - 系统总览和统计信息\n */\nimport React from 'react';\nimport {\n  Row,\n  Col,\n  Card,\n  Statistic,\n  Progress,\n  Table,\n  Tag,\n  Space,\n  Typography,\n  Avatar,\n  List,\n  Timeline,\n} from 'antd';\nimport {\n  UserOutlined,\n  SafetyCertificateOutlined,\n  MailOutlined,\n  FileTextOutlined,\n  ArrowUpOutlined,\n  ArrowDownOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Title, Text } = Typography;\n\nconst OverviewPage: React.FC = () => {\n  // 模拟数据\n  const systemStats = [\n    {\n      title: '总用户数',\n      value: 1234,\n      icon: <UserOutlined style={{ color: '#1890ff' }} />,\n      trend: '+12%',\n      trendUp: true,\n    },\n    {\n      title: '活跃用户',\n      value: 856,\n      icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\n      trend: '+8%',\n      trendUp: true,\n    },\n    {\n      title: '安全事件',\n      value: 23,\n      icon: <SafetyCertificateOutlined style={{ color: '#faad14' }} />,\n      trend: '-15%',\n      trendUp: false,\n    },\n    {\n      title: '系统日志',\n      value: 15420,\n      icon: <FileTextOutlined style={{ color: '#722ed1' }} />,\n      trend: '+5%',\n      trendUp: true,\n    },\n  ];\n\n  const recentActivities = [\n    {\n      time: '2024-01-15 14:30',\n      user: 'admin@system.com',\n      action: '修改系统配置',\n      status: 'success',\n    },\n    {\n      time: '2024-01-15 14:25',\n      user: 'user@example.com',\n      action: '登录系统',\n      status: 'success',\n    },\n    {\n      time: '2024-01-15 14:20',\n      user: 'test@example.com',\n      action: '登录失败',\n      status: 'error',\n    },\n    {\n      time: '2024-01-15 14:15',\n      user: 'admin@system.com',\n      action: '创建新用户',\n      status: 'success',\n    },\n  ];\n\n  const systemHealth = [\n    { name: 'CPU使用率', value: 45, status: 'normal' },\n    { name: '内存使用率', value: 68, status: 'warning' },\n    { name: '磁盘使用率', value: 32, status: 'normal' },\n    { name: '网络状态', value: 95, status: 'excellent' },\n  ];\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Title level={2} style={{ marginBottom: 24 }}>\n          系统概览\n        </Title>\n\n        {/* 统计卡片 */}\n        <Row gutter={[24, 24]} style={{ marginBottom: 24 }}>\n          {systemStats.map((stat, index) => (\n            <Col xs={24} sm={12} lg={6} key={index}>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n              >\n                <Card\n                  hoverable\n                  style={{\n                    borderRadius: 12,\n                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',\n                  }}\n                >\n                  <Statistic\n                    title={stat.title}\n                    value={stat.value}\n                    prefix={stat.icon}\n                    suffix={\n                      <Space>\n                        {stat.trendUp ? (\n                          <ArrowUpOutlined style={{ color: '#52c41a' }} />\n                        ) : (\n                          <ArrowDownOutlined style={{ color: '#ff4d4f' }} />\n                        )}\n                        <Text\n                          type={stat.trendUp ? 'success' : 'danger'}\n                          style={{ fontSize: 12 }}\n                        >\n                          {stat.trend}\n                        </Text>\n                      </Space>\n                    }\n                  />\n                </Card>\n              </motion.div>\n            </Col>\n          ))}\n        </Row>\n\n        <Row gutter={[24, 24]}>\n          {/* 系统健康状态 */}\n          <Col xs={24} lg={12}>\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n            >\n              <Card\n                title=\"系统健康状态\"\n                style={{\n                  borderRadius: 12,\n                  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',\n                }}\n              >\n                <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n                  {systemHealth.map((item, index) => (\n                    <div key={index}>\n                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\n                        <Text strong>{item.name}</Text>\n                        <Text>{item.value}%</Text>\n                      </div>\n                      <Progress\n                        percent={item.value}\n                        strokeColor={\n                          item.status === 'excellent'\n                            ? '#52c41a'\n                            : item.status === 'normal'\n                            ? '#1890ff'\n                            : '#faad14'\n                        }\n                        showInfo={false}\n                      />\n                    </div>\n                  ))}\n                </Space>\n              </Card>\n            </motion.div>\n          </Col>\n\n          {/* 最近活动 */}\n          <Col xs={24} lg={12}>\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.5, delay: 0.3 }}\n            >\n              <Card\n                title=\"最近活动\"\n                style={{\n                  borderRadius: 12,\n                  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',\n                }}\n              >\n                <Timeline\n                  items={recentActivities.map((activity, index) => ({\n                    key: index,\n                    color: activity.status === 'success' ? 'green' : 'red',\n                    dot: activity.status === 'success' ? (\n                      <CheckCircleOutlined />\n                    ) : (\n                      <ExclamationCircleOutlined />\n                    ),\n                    children: (\n                      <div>\n                        <Text strong>{activity.user}</Text>\n                        <br />\n                        <Text type=\"secondary\">{activity.action}</Text>\n                        <br />\n                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\n                          {activity.time}\n                        </Text>\n                      </div>\n                    )\n                  }))}\n                />\n              </Card>\n            </motion.div>\n          </Col>\n        </Row>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default OverviewPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/Register.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":104,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '../components/ui/Button';\nimport { Input } from '../components/ui/Input';\nimport { useAuthStore } from '../stores/authStore';\nimport { isValidEmail, getPasswordStrength, getPasswordStrengthColor, getPasswordStrengthText } from '../utils/helpers';\n\n// 定义注册数据类型\ninterface RegisterData {\n  email: string;\n  password: string;\n  first_name?: string;\n  last_name?: string;\n  consent: boolean;\n}\n\nconst Register: React.FC = () => {\n  const navigate = useNavigate();\n  const { register, isLoading, error, clearError, isAuthenticated } = useAuthStore();\n  \n  const [formData, setFormData] = useState<RegisterData>({\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    consent: false,\n  });\n  \n  const [formErrors, setFormErrors] = useState<Partial<RegisterData>>({});\n  const [passwordStrength, setPasswordStrength] = useState({ score: 0, feedback: [] });\n  \n  // 如果已经登录，重定向到仪表板\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/dashboard', { replace: true });\n    }\n  }, [isAuthenticated, navigate]);\n  \n  // 清除错误信息\n  useEffect(() => {\n    return () => {\n      clearError();\n    };\n  }, [clearError]);\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n    \n    // 清除对应字段的错误\n    if (formErrors[name as keyof RegisterData]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: undefined,\n      }));\n    }\n    \n    // 实时检查密码强度\n    if (name === 'password') {\n      const strength = getPasswordStrength(value);\n      setPasswordStrength(strength);\n    }\n  };\n  \n  const validateForm = (): boolean => {\n    const errors: Partial<RegisterData> = {};\n    \n    if (!formData.email) {\n      errors.email = '请输入邮箱地址';\n    } else if (!isValidEmail(formData.email)) {\n      errors.email = '请输入有效的邮箱地址';\n    }\n    \n    if (!formData.password) {\n      errors.password = '请输入密码';\n    } else if (passwordStrength.score < 3) {\n      errors.password = '密码强度不够，请使用更强的密码';\n    }\n    \n    if (!formData.consent) {\n      errors.consent = '请同意用户协议和隐私政策';\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    try {\n      await register(formData);\n      // 注册成功，跳转到登录页面\n      navigate('/login', { \n        state: { message: '注册成功！请检查您的邮箱并点击验证链接激活账户。' }\n      });\n    } catch (error) {\n      // 错误已经在store中处理\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            创建新账户\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            或者{' '}\n            <Link\n              to=\"/login\"\n              className=\"font-medium text-primary-600 hover:text-primary-500\"\n            >\n              登录现有账户\n            </Link>\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Input\n                label=\"名字\"\n                name=\"first_name\"\n                type=\"text\"\n                autoComplete=\"given-name\"\n                value={formData.first_name}\n                onChange={handleInputChange}\n                error={formErrors.first_name}\n                placeholder=\"名字\"\n              />\n              \n              <Input\n                label=\"姓氏\"\n                name=\"last_name\"\n                type=\"text\"\n                autoComplete=\"family-name\"\n                value={formData.last_name}\n                onChange={handleInputChange}\n                error={formErrors.last_name}\n                placeholder=\"姓氏\"\n              />\n            </div>\n            \n            <Input\n              label=\"邮箱地址\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              error={formErrors.email}\n              placeholder=\"请输入您的邮箱\"\n              leftIcon={\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                </svg>\n              }\n            />\n            \n            <div>\n              <Input\n                label=\"密码\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                error={formErrors.password}\n                placeholder=\"请输入密码\"\n                leftIcon={\n                  <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                  </svg>\n                }\n              />\n              \n              {formData.password && (\n                <div className=\"mt-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-600\">密码强度:</span>\n                    <span className={`font-medium ${getPasswordStrengthColor(passwordStrength.score)}`}>\n                      {getPasswordStrengthText(passwordStrength.score)}\n                    </span>\n                  </div>\n                  <div className=\"mt-1 w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full transition-all duration-300 ${\n                        passwordStrength.score <= 1 ? 'bg-error-500' :\n                        passwordStrength.score <= 2 ? 'bg-warning-500' :\n                        passwordStrength.score <= 3 ? 'bg-warning-400' :\n                        passwordStrength.score <= 4 ? 'bg-success-400' : 'bg-success-500'\n                      }`}\n                      style={{ width: `${(passwordStrength.score / 5) * 100}%` }}\n                    />\n                  </div>\n                  {passwordStrength.feedback.length > 0 && (\n                    <ul className=\"mt-2 text-xs text-gray-600\">\n                      {passwordStrength.feedback.map((item, index) => (\n                        <li key={index} className=\"flex items-center\">\n                          <span className=\"mr-1\">•</span>\n                          {item}\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center\">\n            <input\n              id=\"consent\"\n              name=\"consent\"\n              type=\"checkbox\"\n              checked={formData.consent}\n              onChange={handleInputChange}\n              className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n            />\n            <label htmlFor=\"consent\" className=\"ml-2 block text-sm text-gray-900\">\n              我同意{' '}\n              <Link to=\"/terms\" className=\"text-primary-600 hover:text-primary-500\">\n                用户协议\n              </Link>\n              {' '}和{' '}\n              <Link to=\"/privacy\" className=\"text-primary-600 hover:text-primary-500\">\n                隐私政策\n              </Link>\n            </label>\n          </div>\n          {formErrors.consent && (\n            <p className=\"text-sm text-error-600\">{formErrors.consent}</p>\n          )}\n          \n          {error && (\n            <div className=\"rounded-md bg-error-50 p-4\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-error-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-error-800\">{error}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <Button\n            type=\"submit\"\n            fullWidth\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            {isLoading ? '注册中...' : '创建账户'}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/RegisterPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Space' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":53,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1863,1866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1863,1866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 注册页面 - 专业UI设计师设计\n * 基于Ant Design的美观注册界面\n */\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport {\n  Card,\n  Form,\n  Input,\n  Button,\n  Checkbox,\n  Typography,\n  Space,\n  Divider,\n  message,\n  Row,\n  Col,\n  Avatar,\n  Progress,\n  Tooltip,\n} from 'antd';\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  EyeInvisibleOutlined,\n  EyeTwoTone,\n  SafetyCertificateOutlined,\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useAuthStore } from '../stores/authStore';\nimport { getPasswordStrength, getPasswordStrengthColor, getPasswordStrengthText } from '../utils/helpers';\nimport Captcha from '../components/Captcha';\n\nconst { Title, Text, Paragraph } = Typography;\n\n// 定义注册数据类型\ninterface RegisterData {\n  email: string;\n  password: string;\n  first_name?: string;\n  last_name?: string;\n  consent: boolean;\n  captcha: string;\n  captcha_id: string;\n}\n\nconst RegisterPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { register, isLoading, error, clearError, isAuthenticated } = useAuthStore();\n  const [form] = Form.useForm();\n  const [password, setPassword] = useState('');\n  const [passwordStrength, setPasswordStrength] = useState(0);\n\n  useEffect(() => {\n    clearError();\n    if (isAuthenticated) {\n      navigate('/dashboard', { replace: true });\n    }\n  }, [isAuthenticated, navigate, clearError]);\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newPassword = e.target.value;\n    setPassword(newPassword);\n    setPasswordStrength(getPasswordStrength(newPassword));\n  };\n\n  const handleSubmit = async (values: RegisterData) => {\n    try {\n      await register(values);\n      message.success('注册成功！请检查您的邮箱进行验证。');\n      navigate('/login');\n    } catch (err: any) {\n      message.error(err.detail || '注册失败，请重试');\n    }\n  };\n\n  const getPasswordRequirements = () => {\n    const requirements = [\n      { text: '至少8个字符', met: password.length >= 8 },\n      { text: '包含大写字母', met: /[A-Z]/.test(password) },\n      { text: '包含小写字母', met: /[a-z]/.test(password) },\n      { text: '包含数字', met: /\\d/.test(password) },\n      { text: '包含特殊字符', met: /[!@#$%^&*(),.?\":{}|<>]/.test(password) },\n    ];\n    return requirements;\n  };\n\n  return (\n    <div className=\"login-container\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"w-full max-w-6xl mx-auto\"\n      >\n        <Row gutter={[48, 48]} align=\"middle\" justify=\"center\">\n          {/* 左侧品牌区域 */}\n          <Col xs={24} lg={12}>\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"text-center lg:text-left\"\n            >\n              <div className=\"mb-8\">\n                <Avatar\n                  size={80}\n                  icon={<SafetyCertificateOutlined />}\n                  style={{\n                    backgroundColor: '#52c41a',\n                    marginBottom: 24,\n                  }}\n                />\n                <Title level={1} style={{ color: 'white', marginBottom: 16 }}>\n                  加入我们\n                </Title>\n                <Paragraph style={{ color: 'rgba(255,255,255,0.8)', fontSize: 18, marginBottom: 32 }}>\n                  创建您的账户，开始使用专业的多用户管理系统\n                </Paragraph>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center text-white\">\n                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 12 }} />\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    免费注册，无隐藏费用\n                  </Text>\n                </div>\n                <div className=\"flex items-center text-white\">\n                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 12 }} />\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    企业级安全保障\n                  </Text>\n                </div>\n                <div className=\"flex items-center text-white\">\n                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 12 }} />\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    24/7 技术支持\n                  </Text>\n                </div>\n                <div className=\"flex items-center text-white\">\n                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 12 }} />\n                  <Text style={{ color: 'rgba(255,255,255,0.9)' }}>\n                    数据隐私保护\n                  </Text>\n                </div>\n              </div>\n            </motion.div>\n          </Col>\n\n          {/* 右侧注册表单 */}\n          <Col xs={24} lg={12}>\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <Card\n                className=\"login-card\"\n                style={{\n                  borderRadius: 16,\n                  boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1)',\n                  border: 'none',\n                }}\n              >\n                <div className=\"text-center mb-8\">\n                  <Title level={2} style={{ marginBottom: 8 }}>\n                    创建账户\n                  </Title>\n                  <Text type=\"secondary\">\n                    填写以下信息完成注册\n                  </Text>\n                </div>\n\n                <Form\n                  form={form}\n                  name=\"register\"\n                  onFinish={handleSubmit}\n                  layout=\"vertical\"\n                  size=\"large\"\n                  autoComplete=\"off\"\n                >\n                  <Row gutter={16}>\n                    <Col xs={24} sm={12}>\n                      <Form.Item\n                        name=\"first_name\"\n                        label=\"名字\"\n                      >\n                        <Input\n                          prefix={<UserOutlined style={{ color: '#bfbfbf' }} />}\n                          placeholder=\"名字（可选）\"\n                          style={{ borderRadius: 8 }}\n                        />\n                      </Form.Item>\n                    </Col>\n                    <Col xs={24} sm={12}>\n                      <Form.Item\n                        name=\"last_name\"\n                        label=\"姓氏\"\n                      >\n                        <Input\n                          prefix={<UserOutlined style={{ color: '#bfbfbf' }} />}\n                          placeholder=\"姓氏（可选）\"\n                          style={{ borderRadius: 8 }}\n                        />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n                  <Form.Item\n                    name=\"email\"\n                    label=\"邮箱地址\"\n                    rules={[\n                      { required: true, message: '请输入邮箱地址' },\n                      { type: 'email', message: '请输入有效的邮箱地址' },\n                    ]}\n                  >\n                    <Input\n                      prefix={<MailOutlined style={{ color: '#bfbfbf' }} />}\n                      placeholder=\"请输入邮箱地址\"\n                      style={{ borderRadius: 8 }}\n                    />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"password\"\n                    label=\"密码\"\n                    rules={[\n                      { required: true, message: '请输入密码' },\n                      { min: 8, message: '密码至少8位字符' },\n                    ]}\n                  >\n                    <Input.Password\n                      prefix={<LockOutlined style={{ color: '#bfbfbf' }} />}\n                      placeholder=\"请输入密码\"\n                      iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                      style={{ borderRadius: 8 }}\n                      onChange={handlePasswordChange}\n                    />\n                  </Form.Item>\n\n                  {password && (\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <Text strong>密码强度</Text>\n                        <Text style={{ color: getPasswordStrengthColor(passwordStrength) }}>\n                          {getPasswordStrengthText(passwordStrength)}\n                        </Text>\n                      </div>\n                      <Progress\n                        percent={passwordStrength * 20}\n                        strokeColor={getPasswordStrengthColor(passwordStrength)}\n                        showInfo={false}\n                        style={{ marginBottom: 12 }}\n                      />\n                      <div className=\"space-y-1\">\n                        {getPasswordRequirements().map((req, index) => (\n                          <div key={index} className=\"flex items-center\">\n                            {req.met ? (\n                              <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\n                            ) : (\n                              <CloseCircleOutlined style={{ color: '#ff4d4f', marginRight: 8 }} />\n                            )}\n                            <Text\n                              style={{\n                                color: req.met ? '#52c41a' : '#ff4d4f',\n                                fontSize: 12,\n                              }}\n                            >\n                              {req.text}\n                            </Text>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <Form.Item\n                    name=\"captcha\"\n                    label=\"验证码\"\n                    rules={[\n                      { required: true, message: '请输入验证码' },\n                      { len: 4, message: '验证码为4位字符' },\n                    ]}\n                  >\n                    <Captcha\n                      placeholder=\"请输入验证码\"\n                      onCaptchaIdChange={(captchaId) => {\n                        form.setFieldsValue({ captcha_id: captchaId });\n                      }}\n                    />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"consent\"\n                    valuePropName=\"checked\"\n                    rules={[\n                      {\n                        validator: (_, value) =>\n                          value ? Promise.resolve() : Promise.reject(new Error('请同意隐私政策和使用条款')),\n                      },\n                    ]}\n                  >\n                    <Checkbox>\n                      我同意{' '}\n                      <Link to=\"/privacy\" style={{ color: '#1890ff' }}>\n                        隐私政策\n                      </Link>{' '}\n                      和{' '}\n                      <Link to=\"/terms\" style={{ color: '#1890ff' }}>\n                        使用条款\n                      </Link>\n                    </Checkbox>\n                  </Form.Item>\n\n                  <Form.Item>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      loading={isLoading}\n                      block\n                      size=\"large\"\n                      style={{\n                        height: 48,\n                        borderRadius: 8,\n                        fontSize: 16,\n                        fontWeight: 500,\n                      }}\n                    >\n                      {isLoading ? '注册中...' : '创建账户'}\n                    </Button>\n                  </Form.Item>\n                </Form>\n\n                <Divider>已有账户？</Divider>\n\n                <div className=\"text-center\">\n                  <Link to=\"/login\">\n                    <Button\n                      type=\"default\"\n                      block\n                      size=\"large\"\n                      style={{ height: 44, borderRadius: 8 }}\n                    >\n                      立即登录\n                    </Button>\n                  </Link>\n                </div>\n\n                <div className=\"text-center mt-6\">\n                  <Text type=\"secondary\" style={{ fontSize: 12 }}>\n                    注册即表示您同意我们的服务条款和隐私政策。\n                    我们承诺保护您的个人信息安全。\n                  </Text>\n                </div>\n              </Card>\n            </motion.div>\n          </Col>\n        </Row>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/ResetPassword.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":85,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\nimport { Button } from '../components/ui/Button';\nimport { Input } from '../components/ui/Input';\nimport { useAuthStore } from '../stores/authStore';\nimport { getPasswordStrength, getPasswordStrengthColor, getPasswordStrengthText } from '../utils/helpers';\n\n// 定义重置密码数据类型\ninterface ResetPasswordData {\n  token: string;\n  password: string;\n}\n\nconst ResetPassword: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { resetPassword, isLoading, error, clearError } = useAuthStore();\n  \n  const [formData, setFormData] = useState<ResetPasswordData>({\n    token: '',\n    password: '',\n  });\n  \n  const [formErrors, setFormErrors] = useState<Partial<ResetPasswordData>>({});\n  const [passwordStrength, setPasswordStrength] = useState({ score: 0, feedback: [] });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  // 从URL参数获取token\n  useEffect(() => {\n    const token = searchParams.get('token');\n    if (token) {\n      setFormData(prev => ({ ...prev, token }));\n    }\n  }, [searchParams]);\n  \n  // 清除错误信息\n  useEffect(() => {\n    return () => {\n      clearError();\n    };\n  }, [clearError]);\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    if (formErrors[name as keyof ResetPasswordData]) {\n      setFormErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n    \n    // 实时检查密码强度\n    if (name === 'password') {\n      const strength = getPasswordStrength(value);\n      setPasswordStrength(strength);\n    }\n  };\n  \n  const validateForm = (): boolean => {\n    const errors: Partial<ResetPasswordData> = {};\n    \n    if (!formData.token) {\n      errors.token = '重置令牌无效';\n    }\n    \n    if (!formData.password) {\n      errors.password = '请输入新密码';\n    } else if (passwordStrength.score < 3) {\n      errors.password = '密码强度不够，请使用更强的密码';\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    try {\n      await resetPassword(formData);\n      setIsSubmitted(true);\n    } catch (error) {\n      // 错误已经在store中处理\n    }\n  };\n  \n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-success-100\">\n              <svg className=\"h-6 w-6 text-success-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              密码重置成功\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              您的密码已成功重置。现在可以使用新密码登录了。\n            </p>\n            <div className=\"mt-6\">\n              <Button\n                onClick={() => navigate('/login')}\n                fullWidth\n              >\n                前往登录页面\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!formData.token) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-error-100\">\n              <svg className=\"h-6 w-6 text-error-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              无效的重置链接\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              密码重置链接无效或已过期。请重新申请密码重置。\n            </p>\n            <div className=\"mt-6\">\n              <Link\n                to=\"/forgot-password\"\n                className=\"font-medium text-primary-600 hover:text-primary-500\"\n              >\n                重新申请密码重置\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            重置密码\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            请输入您的新密码\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div>\n            <Input\n              label=\"新密码\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"new-password\"\n              value={formData.password}\n              onChange={handleInputChange}\n              error={formErrors.password}\n              placeholder=\"请输入新密码\"\n              leftIcon={\n                <svg className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                </svg>\n              }\n            />\n            \n            {formData.password && (\n              <div className=\"mt-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">密码强度:</span>\n                  <span className={`font-medium ${getPasswordStrengthColor(passwordStrength.score)}`}>\n                    {getPasswordStrengthText(passwordStrength.score)}\n                  </span>\n                </div>\n                <div className=\"mt-1 w-full bg-gray-200 rounded-full h-2\">\n                  <div\n                    className={`h-2 rounded-full transition-all duration-300 ${\n                      passwordStrength.score <= 1 ? 'bg-error-500' :\n                      passwordStrength.score <= 2 ? 'bg-warning-500' :\n                      passwordStrength.score <= 3 ? 'bg-warning-400' :\n                      passwordStrength.score <= 4 ? 'bg-success-400' : 'bg-success-500'\n                    }`}\n                    style={{ width: `${(passwordStrength.score / 5) * 100}%` }}\n                  />\n                </div>\n                {passwordStrength.feedback.length > 0 && (\n                  <ul className=\"mt-2 text-xs text-gray-600\">\n                    {passwordStrength.feedback.map((item, index) => (\n                      <li key={index} className=\"flex items-center\">\n                        <span className=\"mr-1\">•</span>\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n            )}\n          </div>\n          \n          {error && (\n            <div className=\"rounded-md bg-error-50 p-4\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-error-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-error-800\">{error}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <Button\n            type=\"submit\"\n            fullWidth\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            {isLoading ? '重置中...' : '重置密码'}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/SystemConfigPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InfoCircleOutlined' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircleOutlined' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExclamationCircleOutlined' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paragraph' is assigned a value but never used.","line":39,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Option' is assigned a value but never used.","line":41,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4897,4900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4897,4900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mockConfigs'. Either include it or remove the dependency array.","line":246,"column":6,"nodeType":"ArrayExpression","endLine":246,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [form, mockConfigs]","fix":{"range":[5268,5274],"text":"[form, mockConfigs]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5314,5317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5314,5317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":272,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":19}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 系统配置管理页面 - 专业UI设计师设计\n * 基于Ant Design的系统配置界面\n */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Form,\n  Input,\n  Button,\n  Switch,\n  Select,\n  InputNumber,\n  Typography,\n  Space,\n  Row,\n  Col,\n  Tabs,\n  message,\n  Divider,\n  Tag,\n  Tooltip,\n  Modal,\n  Alert,\n} from 'antd';\nimport {\n  SettingOutlined,\n  SecurityScanOutlined,\n  MailOutlined,\n  GlobalOutlined,\n  SaveOutlined,\n  ReloadOutlined,\n  InfoCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Title, Text, Paragraph } = Typography;\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\ninterface ConfigItem {\n  key: string;\n  value: string;\n  value_type: string;\n  category: string;\n  description: string;\n  is_encrypted: boolean;\n  is_public: boolean;\n}\n\nconst SystemConfigPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [configs, setConfigs] = useState<ConfigItem[]>([]);\n  const [activeTab, setActiveTab] = useState('security');\n\n  // 模拟配置数据\n  const mockConfigs: ConfigItem[] = [\n    // 安全配置\n    {\n      key: 'password.min_length',\n      value: '8',\n      value_type: 'int',\n      category: 'security',\n      description: '密码最小长度',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'password.require_uppercase',\n      value: 'true',\n      value_type: 'bool',\n      category: 'security',\n      description: '密码需要大写字母',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'password.require_lowercase',\n      value: 'true',\n      value_type: 'bool',\n      category: 'security',\n      description: '密码需要小写字母',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'password.require_digit',\n      value: 'true',\n      value_type: 'bool',\n      category: 'security',\n      description: '密码需要数字',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'password.require_special',\n      value: 'false',\n      value_type: 'bool',\n      category: 'security',\n      description: '密码需要特殊字符',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'login.max_attempts',\n      value: '5',\n      value_type: 'int',\n      category: 'security',\n      description: '最大登录尝试次数',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'login.lockout_duration',\n      value: '30',\n      value_type: 'int',\n      category: 'security',\n      description: '账户锁定时间(分钟)',\n      is_encrypted: false,\n      is_public: false,\n    },\n    \n    // 邮箱配置\n    {\n      key: 'email.smtp_host',\n      value: 'localhost',\n      value_type: 'string',\n      category: 'email',\n      description: 'SMTP服务器地址',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'email.smtp_port',\n      value: '1025',\n      value_type: 'int',\n      category: 'email',\n      description: 'SMTP服务器端口',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'email.smtp_username',\n      value: '',\n      value_type: 'string',\n      category: 'email',\n      description: 'SMTP用户名',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'email.smtp_password',\n      value: '',\n      value_type: 'string',\n      category: 'email',\n      description: 'SMTP密码',\n      is_encrypted: true,\n      is_public: false,\n    },\n    {\n      key: 'email.from_address',\n      value: 'noreply@example.com',\n      value_type: 'string',\n      category: 'email',\n      description: '发件人邮箱',\n      is_encrypted: false,\n      is_public: false,\n    },\n    {\n      key: 'email.from_name',\n      value: '系统通知',\n      value_type: 'string',\n      category: 'email',\n      description: '发件人名称',\n      is_encrypted: false,\n      is_public: false,\n    },\n    \n    // 系统配置\n    {\n      key: 'system.name',\n      value: '多用户管理系统',\n      value_type: 'string',\n      category: 'system',\n      description: '系统名称',\n      is_encrypted: false,\n      is_public: true,\n    },\n    {\n      key: 'system.version',\n      value: '1.0.0',\n      value_type: 'string',\n      category: 'system',\n      description: '系统版本',\n      is_encrypted: false,\n      is_public: true,\n    },\n    {\n      key: 'system.maintenance_mode',\n      value: 'false',\n      value_type: 'bool',\n      category: 'system',\n      description: '维护模式',\n      is_encrypted: false,\n      is_public: false,\n    },\n    \n    // UI配置\n    {\n      key: 'ui.theme',\n      value: 'light',\n      value_type: 'string',\n      category: 'ui',\n      description: '默认主题',\n      is_encrypted: false,\n      is_public: true,\n    },\n    {\n      key: 'ui.language',\n      value: 'zh-CN',\n      value_type: 'string',\n      category: 'ui',\n      description: '默认语言',\n      is_encrypted: false,\n      is_public: true,\n    },\n  ];\n\n  useEffect(() => {\n    setConfigs(mockConfigs);\n    // 初始化表单值\n    const formValues: any = {};\n    mockConfigs.forEach(config => {\n      if (config.value_type === 'bool') {\n        formValues[config.key] = config.value === 'true';\n      } else if (config.value_type === 'int') {\n        formValues[config.key] = parseInt(config.value);\n      } else {\n        formValues[config.key] = config.value;\n      }\n    });\n    form.setFieldsValue(formValues);\n  }, [form]);\n\n  const handleSave = async (values: any) => {\n    setLoading(true);\n    try {\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // 更新配置\n      const updatedConfigs = configs.map(config => {\n        const newValue = values[config.key];\n        let stringValue = '';\n        \n        if (config.value_type === 'bool') {\n          stringValue = newValue ? 'true' : 'false';\n        } else if (config.value_type === 'int') {\n          stringValue = newValue.toString();\n        } else {\n          stringValue = newValue;\n        }\n        \n        return { ...config, value: stringValue };\n      });\n      \n      setConfigs(updatedConfigs);\n      message.success('配置保存成功！');\n    } catch (error) {\n      message.error('配置保存失败，请重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleReset = () => {\n    Modal.confirm({\n      title: '确认重置',\n      content: '确定要重置所有配置到默认值吗？此操作不可撤销。',\n      onOk: () => {\n        form.resetFields();\n        message.success('配置已重置');\n      },\n    });\n  };\n\n  const getConfigsByCategory = (category: string) => {\n    return configs.filter(config => config.category === category);\n  };\n\n  const renderConfigField = (config: ConfigItem) => {\n    const { key, value_type, description, is_encrypted, is_public } = config;\n    \n    const label = (\n      <Space>\n        <span>{description}</span>\n        {is_encrypted && (\n          <Tooltip title=\"加密存储\">\n            <SecurityScanOutlined style={{ color: '#1890ff' }} />\n          </Tooltip>\n        )}\n        {is_public && (\n          <Tooltip title=\"公开配置\">\n            <GlobalOutlined style={{ color: '#52c41a' }} />\n          </Tooltip>\n        )}\n      </Space>\n    );\n\n    switch (value_type) {\n      case 'bool':\n        return (\n          <Form.Item\n            key={key}\n            name={key}\n            label={label}\n            valuePropName=\"checked\"\n          >\n            <Switch />\n          </Form.Item>\n        );\n      \n      case 'int':\n        return (\n          <Form.Item\n            key={key}\n            name={key}\n            label={label}\n            rules={[{ required: true, message: '请输入数值' }]}\n          >\n            <InputNumber\n              style={{ width: '100%' }}\n              min={0}\n              placeholder=\"请输入数值\"\n            />\n          </Form.Item>\n        );\n      \n      case 'string':\n        return (\n          <Form.Item\n            key={key}\n            name={key}\n            label={label}\n            rules={[{ required: true, message: '请输入值' }]}\n          >\n            {is_encrypted ? (\n              <Input.Password placeholder=\"请输入密码\" />\n            ) : (\n              <Input placeholder=\"请输入值\" />\n            )}\n          </Form.Item>\n        );\n      \n      default:\n        return (\n          <Form.Item\n            key={key}\n            name={key}\n            label={label}\n          >\n            <Input placeholder=\"请输入值\" />\n          </Form.Item>\n        );\n    }\n  };\n\n  const renderConfigTab = (category: string, title: string, icon: React.ReactNode) => {\n    const categoryConfigs = getConfigsByCategory(category);\n    \n    return (\n      <TabPane\n        tab={\n          <Space>\n            {icon}\n            {title}\n            <Tag color=\"blue\">{categoryConfigs.length}</Tag>\n          </Space>\n        }\n        key={category}\n      >\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          <Row gutter={[24, 24]}>\n            {categoryConfigs.map(config => (\n              <Col xs={24} lg={12} key={config.key}>\n                <Card\n                  size=\"small\"\n                  style={{ marginBottom: 16 }}\n                  styles={{ body: { padding: '16px' } }}\n                >\n                  {renderConfigField(config)}\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </motion.div>\n      </TabPane>\n    );\n  };\n\n  return (\n    <div className=\"page-content\">\n      {/* 页面标题 */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"mb-6\"\n      >\n        <Title level={2} style={{ marginBottom: 8 }}>\n          系统配置\n        </Title>\n        <Text type=\"secondary\">\n          管理系统配置参数，包括安全设置、邮箱配置等。\n        </Text>\n      </motion.div>\n\n      {/* 配置表单 */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.1 }}\n      >\n        <Card\n          title={\n            <Space>\n              <SettingOutlined />\n              配置管理\n            </Space>\n          }\n          extra={\n            <Space>\n              <Button\n                icon={<ReloadOutlined />}\n                onClick={handleReset}\n              >\n                重置\n              </Button>\n              <Button\n                type=\"primary\"\n                icon={<SaveOutlined />}\n                loading={loading}\n                onClick={() => form.submit()}\n              >\n                保存配置\n              </Button>\n            </Space>\n          }\n          style={{ borderRadius: 12 }}\n        >\n          <Alert\n            message=\"配置说明\"\n            description=\"修改配置后需要保存才能生效。加密配置会以安全方式存储，公开配置对普通用户可见。\"\n            type=\"info\"\n            showIcon\n            style={{ marginBottom: 24 }}\n          />\n\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSave}\n            size=\"large\"\n          >\n            <Tabs\n              activeKey={activeTab}\n              onChange={setActiveTab}\n              type=\"card\"\n              size=\"large\"\n            >\n              {renderConfigTab('security', '安全设置', <SecurityScanOutlined />)}\n              {renderConfigTab('email', '邮箱配置', <MailOutlined />)}\n              {renderConfigTab('system', '系统设置', <SettingOutlined />)}\n              {renderConfigTab('ui', '界面配置', <GlobalOutlined />)}\n            </Tabs>\n          </Form>\n        </Card>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default SystemConfigPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/SystemSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":115,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Card, \n  Tabs, \n  Typography, \n  Row, \n  Col, \n  Statistic, \n  Progress, \n  Table, \n  Tag, \n  Button, \n  Space,\n  Alert,\n  Spin,\n  message\n} from 'antd';\nimport {\n  DashboardOutlined,\n  SecurityScanOutlined,\n  MailOutlined,\n  TeamOutlined,\n  SettingOutlined,\n  FileTextOutlined,\n  ReloadOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ClockCircleOutlined\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useAuthStore } from '../stores/authStore';\n\nconst { Title, Text } = Typography;\nconst { TabPane } = Tabs;\n\ninterface SystemStats {\n  login_attempts_24h: number;\n  failed_attempts_24h: number;\n  success_rate_24h: number;\n  active_frozen_ips: number;\n  email_requests_24h: number;\n  security_level: string;\n}\n\ninterface SecurityLog {\n  id: string;\n  timestamp: string;\n  event_type: string;\n  user_email: string;\n  ip_address: string;\n  result: string;\n  details: string;\n}\n\nconst SystemSettings: React.FC = () => {\n  const { user } = useAuthStore();\n  const [loading, setLoading] = useState(false);\n  const [systemStats, setSystemStats] = useState<SystemStats | null>(null);\n  const [securityLogs, setSecurityLogs] = useState<SecurityLog[]>([]);\n\n  // 检查是否为超级管理员\n  const isSuperAdmin = user?.email === 'superadmin@system.com' || user?.email === 'demo@example.com';\n\n  useEffect(() => {\n    if (isSuperAdmin) {\n      loadSystemData();\n    }\n  }, [isSuperAdmin]);\n\n  const loadSystemData = async () => {\n    setLoading(true);\n    try {\n      // 模拟加载系统数据\n      setTimeout(() => {\n        setSystemStats({\n          login_attempts_24h: 156,\n          failed_attempts_24h: 23,\n          success_rate_24h: 85.3,\n          active_frozen_ips: 2,\n          email_requests_24h: 45,\n          security_level: 'basic'\n        });\n\n        setSecurityLogs([\n          {\n            id: '1',\n            timestamp: '2024-01-15 14:30:25',\n            event_type: 'LOGIN_ATTEMPT',\n            user_email: 'user@example.com',\n            ip_address: '192.168.1.100',\n            result: 'SUCCESS',\n            details: '正常登录'\n          },\n          {\n            id: '2',\n            timestamp: '2024-01-15 14:25:10',\n            event_type: 'LOGIN_ATTEMPT',\n            user_email: 'hacker@evil.com',\n            ip_address: '192.168.1.200',\n            result: 'FAILED',\n            details: '密码错误，IP已冻结'\n          },\n          {\n            id: '3',\n            timestamp: '2024-01-15 14:20:05',\n            event_type: 'REGISTRATION',\n            user_email: 'newuser@example.com',\n            ip_address: '192.168.1.150',\n            result: 'SUCCESS',\n            details: '新用户注册'\n          }\n        ]);\n        setLoading(false);\n      }, 1000);\n    } catch (error) {\n      message.error('加载系统数据失败');\n      setLoading(false);\n    }\n  };\n\n  const securityLogColumns = [\n    {\n      title: '时间',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      width: 150,\n    },\n    {\n      title: '事件类型',\n      dataIndex: 'event_type',\n      key: 'event_type',\n      width: 120,\n      render: (type: string) => {\n        const typeMap: { [key: string]: { color: string; text: string } } = {\n          'LOGIN_ATTEMPT': { color: 'blue', text: '登录尝试' },\n          'REGISTRATION': { color: 'green', text: '用户注册' },\n          'PASSWORD_RESET': { color: 'orange', text: '密码重置' },\n          'ACCOUNT_LOCK': { color: 'red', text: '账户锁定' },\n          'IP_FREEZE': { color: 'purple', text: 'IP冻结' }\n        };\n        const config = typeMap[type] || { color: 'default', text: type };\n        return <Tag color={config.color}>{config.text}</Tag>;\n      }\n    },\n    {\n      title: '用户邮箱',\n      dataIndex: 'user_email',\n      key: 'user_email',\n      width: 200,\n    },\n    {\n      title: 'IP地址',\n      dataIndex: 'ip_address',\n      key: 'ip_address',\n      width: 120,\n    },\n    {\n      title: '结果',\n      dataIndex: 'result',\n      key: 'result',\n      width: 100,\n      render: (result: string) => {\n        const isSuccess = result === 'SUCCESS';\n        return (\n          <Tag color={isSuccess ? 'green' : 'red'} icon={isSuccess ? <CheckCircleOutlined /> : <ExclamationCircleOutlined />}>\n            {isSuccess ? '成功' : '失败'}\n          </Tag>\n        );\n      }\n    },\n    {\n      title: '详情',\n      dataIndex: 'details',\n      key: 'details',\n    }\n  ];\n\n  if (!isSuperAdmin) {\n    return (\n      <div className=\"p-6\">\n        <Alert\n          message=\"访问被拒绝\"\n          description=\"只有超级管理员才能访问系统设置页面。\"\n          type=\"error\"\n          showIcon\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"mb-6\">\n          <Title level={2} className=\"mb-2\">\n            <SettingOutlined className=\"mr-2\" />\n            系统设置\n          </Title>\n          <Text type=\"secondary\">\n            管理系统配置、安全策略和监控信息\n          </Text>\n        </div>\n\n        <Tabs defaultActiveKey=\"overview\" size=\"large\">\n          {/* 概览页面 */}\n          <TabPane \n            tab={\n              <span>\n                <DashboardOutlined />\n                概览\n              </span>\n            } \n            key=\"overview\"\n          >\n            <Spin spinning={loading}>\n              <Row gutter={[16, 16]} className=\"mb-6\">\n                <Col xs={24} sm={12} lg={6}>\n                  <Card>\n                    <Statistic\n                      title=\"24小时登录尝试\"\n                      value={systemStats?.login_attempts_24h || 0}\n                      prefix={<ClockCircleOutlined />}\n                    />\n                  </Card>\n                </Col>\n                <Col xs={24} sm={12} lg={6}>\n                  <Card>\n                    <Statistic\n                      title=\"失败尝试\"\n                      value={systemStats?.failed_attempts_24h || 0}\n                      valueStyle={{ color: '#cf1322' }}\n                      prefix={<ExclamationCircleOutlined />}\n                    />\n                  </Card>\n                </Col>\n                <Col xs={24} sm={12} lg={6}>\n                  <Card>\n                    <Statistic\n                      title=\"成功率\"\n                      value={systemStats?.success_rate_24h || 0}\n                      suffix=\"%\"\n                      valueStyle={{ color: '#3f8600' }}\n                      prefix={<CheckCircleOutlined />}\n                    />\n                  </Card>\n                </Col>\n                <Col xs={24} sm={12} lg={6}>\n                  <Card>\n                    <Statistic\n                      title=\"冻结IP数\"\n                      value={systemStats?.active_frozen_ips || 0}\n                      valueStyle={{ color: '#cf1322' }}\n                      prefix={<SecurityScanOutlined />}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]}>\n                <Col xs={24} lg={12}>\n                  <Card title=\"系统状态\" extra={<Button icon={<ReloadOutlined />} onClick={loadSystemData} />}>\n                    <Space direction=\"vertical\" className=\"w-full\">\n                      <div className=\"flex justify-between items-center\">\n                        <Text>安全策略级别</Text>\n                        <Tag color={systemStats?.security_level === 'advanced' ? 'red' : 'blue'}>\n                          {systemStats?.security_level === 'advanced' ? '高级' : '基础'}\n                        </Tag>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <Text>邮箱验证码请求</Text>\n                        <Text strong>{systemStats?.email_requests_24h || 0} 次/24h</Text>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <Text>系统运行状态</Text>\n                        <Tag color=\"green\" icon={<CheckCircleOutlined />}>正常</Tag>\n                      </div>\n                    </Space>\n                  </Card>\n                </Col>\n                <Col xs={24} lg={12}>\n                  <Card title=\"安全概览\">\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <Text>登录成功率</Text>\n                        <Text strong>{systemStats?.success_rate_24h || 0}%</Text>\n                      </div>\n                      <Progress \n                        percent={systemStats?.success_rate_24h || 0} \n                        strokeColor=\"#52c41a\"\n                        showInfo={false}\n                      />\n                    </div>\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <Text>安全威胁</Text>\n                        <Text strong style={{ color: '#cf1322' }}>\n                          {systemStats?.active_frozen_ips || 0} 个IP被冻结\n                        </Text>\n                      </div>\n                      <Progress \n                        percent={Math.min((systemStats?.active_frozen_ips || 0) * 10, 100)} \n                        strokeColor=\"#cf1322\"\n                        showInfo={false}\n                      />\n                    </div>\n                  </Card>\n                </Col>\n              </Row>\n            </Spin>\n          </TabPane>\n\n          {/* 安全设置 */}\n          <TabPane \n            tab={\n              <span>\n                <SecurityScanOutlined />\n                安全设置\n              </span>\n            } \n            key=\"security\"\n          >\n            <Card title=\"安全策略配置\">\n              <Alert\n                message=\"安全设置功能开发中\"\n                description=\"此功能正在开发中，将包括验证码配置、登录策略设置、IP白名单管理等功能。\"\n                type=\"info\"\n                showIcon\n              />\n            </Card>\n          </TabPane>\n\n          {/* 邮箱服务 */}\n          <TabPane \n            tab={\n              <span>\n                <MailOutlined />\n                邮箱服务\n              </span>\n            } \n            key=\"email\"\n          >\n            <Card title=\"邮箱服务配置\">\n              <Alert\n                message=\"邮箱服务配置功能开发中\"\n                description=\"此功能正在开发中，将包括SMTP配置、邮件模板管理、发送频率限制等功能。\"\n                type=\"info\"\n                showIcon\n              />\n            </Card>\n          </TabPane>\n\n          {/* 用户管理 */}\n          <TabPane \n            tab={\n              <span>\n                <TeamOutlined />\n                用户管理\n              </span>\n            } \n            key=\"users\"\n          >\n            <Card title=\"用户管理\">\n              <Alert\n                message=\"用户管理功能开发中\"\n                description=\"此功能正在开发中，将包括用户列表、角色分配、权限管理等功能。\"\n                type=\"info\"\n                showIcon\n              />\n            </Card>\n          </TabPane>\n\n          {/* 系统配置 */}\n          <TabPane \n            tab={\n              <span>\n                <SettingOutlined />\n                系统配置\n              </span>\n            } \n            key=\"config\"\n          >\n            <Card title=\"系统配置\">\n              <Alert\n                message=\"系统配置功能开发中\"\n                description=\"此功能正在开发中，将包括基础配置、参数设置、配置验证等功能。\"\n                type=\"info\"\n                showIcon\n              />\n            </Card>\n          </TabPane>\n\n          {/* 日志监控 */}\n          <TabPane \n            tab={\n              <span>\n                <FileTextOutlined />\n                日志监控\n              </span>\n            } \n            key=\"logs\"\n          >\n            <Card \n              title=\"安全日志\" \n              extra={<Button icon={<ReloadOutlined />} onClick={loadSystemData} />}\n            >\n              <Table\n                columns={securityLogColumns}\n                dataSource={securityLogs}\n                rowKey=\"id\"\n                pagination={{ pageSize: 10 }}\n                size=\"small\"\n                scroll={{ x: 800 }}\n              />\n            </Card>\n          </TabPane>\n        </Tabs>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default SystemSettings;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/SystemSettingsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'collapsed' is assigned a value but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCollapsed' is assigned a value but never used.","line":29,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 系统设置页面 - 统一管理所有系统配置\n */\nimport React, { useState } from 'react';\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  Layout,\n  Menu,\n  Card,\n  Typography,\n  Space,\n  Button,\n  theme,\n} from 'antd';\nimport {\n  GlobalOutlined,\n  TeamOutlined,\n  SecurityScanOutlined,\n  MailOutlined,\n  LayoutOutlined,\n  ArrowLeftOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Sider, Content } = Layout;\nconst { Title } = Typography;\n\nconst SystemSettingsPage: React.FC = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { token } = theme.useToken();\n\n  const settingsMenuItems = [\n    {\n      key: 'basic',\n      icon: <GlobalOutlined />,\n      label: '基础配置',\n      path: '/system-settings/basic',\n    },\n    {\n      key: 'admin',\n      icon: <TeamOutlined />,\n      label: '管理员管理',\n      path: '/system-settings/admin',\n    },\n    {\n      key: 'security',\n      icon: <SecurityScanOutlined />,\n      label: '安全配置',\n      path: '/system-settings/security',\n    },\n    {\n      key: 'email',\n      icon: <MailOutlined />,\n      label: '邮箱配置',\n      path: '/system-settings/email',\n    },\n    {\n      key: 'layout',\n      icon: <LayoutOutlined />,\n      label: '布局配置',\n      path: '/system-settings/layout',\n    },\n  ];\n\n  const handleMenuClick = ({ key }: { key: string }) => {\n    const item = settingsMenuItems.find(item => item.key === key);\n    if (item) {\n      navigate(item.path);\n    }\n  };\n\n  const getSelectedKey = () => {\n    const path = location.pathname;\n    if (path.includes('/basic')) return 'basic';\n    if (path.includes('/admin')) return 'admin';\n    if (path.includes('/security')) return 'security';\n    if (path.includes('/email')) return 'email';\n    if (path.includes('/layout')) return 'layout';\n    return 'basic';\n  };\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        {/* 页面头部 */}\n        <Card\n          style={{\n            marginBottom: 24,\n            borderRadius: 12,\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',\n          }}\n        >\n          <Space align=\"center\">\n            <Button\n              type=\"text\"\n              icon={<ArrowLeftOutlined />}\n              onClick={() => navigate('/overview')}\n              style={{ marginRight: 16 }}\n            >\n              返回概览\n            </Button>\n            <Title level={2} style={{ margin: 0 }}>\n              系统设置\n            </Title>\n          </Space>\n        </Card>\n\n        <Layout\n          style={{\n            background: 'transparent',\n            minHeight: 'calc(100vh - 200px)',\n          }}\n        >\n          {/* 左侧设置菜单 */}\n          <Sider\n            width={250}\n            style={{\n              background: token.colorBgContainer,\n              borderRadius: 12,\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',\n              marginRight: 24,\n            }}\n          >\n            <Menu\n              mode=\"inline\"\n              selectedKeys={[getSelectedKey()]}\n              items={settingsMenuItems}\n              onClick={handleMenuClick}\n              style={{\n                border: 'none',\n                background: 'transparent',\n                padding: '16px 0',\n              }}\n            />\n          </Sider>\n\n          {/* 右侧内容区域 */}\n          <Content\n            style={{\n              background: token.colorBgContainer,\n              borderRadius: 12,\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',\n              padding: 24,\n            }}\n          >\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Outlet />\n            </motion.div>\n          </Content>\n        </Layout>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default SystemSettingsPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/ThemeDemoPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HeartOutlined' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StarOutlined' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThunderboltOutlined' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包演示页面\n * 展示扩展后的主题包可控制的元素\n */\n\nimport React from 'react';\nimport { \n  Card, \n  Row, \n  Col, \n  Button, \n  Input, \n  Select, \n  Switch, \n  Tag, \n  Badge, \n  Avatar, \n  Progress, \n  Space,\n  Typography,\n  Divider,\n  Alert\n} from 'antd';\nimport '../styles/menu-theme.css';\nimport { \n  UserOutlined, \n  SettingOutlined, \n  HeartOutlined,\n  StarOutlined,\n  ThunderboltOutlined\n} from '@ant-design/icons';\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Option } = Select;\n\nconst ThemeDemoPage: React.FC = () => {\n  return (\n    <div className=\"theme-demo-container\">\n      <Title level={2}>🎨 主题包演示页面</Title>\n      <Paragraph>\n        展示扩展后的主题包系统可以控制的各种UI元素和样式属性\n      </Paragraph>\n\n      <Row gutter={[16, 16]}>\n        {/* 基础组件演示 */}\n        <Col span={24}>\n          <Card title=\"🔧 基础组件\" size=\"small\">\n            <Space wrap>\n              <Button type=\"primary\">主要按钮</Button>\n              <Button>默认按钮</Button>\n              <Button type=\"dashed\">虚线按钮</Button>\n              <Button type=\"text\">文本按钮</Button>\n              <Button type=\"link\">链接按钮</Button>\n            </Space>\n          </Card>\n        </Col>\n\n        {/* 输入组件演示 */}\n        <Col span={12}>\n          <Card title=\"📝 输入组件\" size=\"small\">\n            <Space direction=\"vertical\" className=\"theme-demo-section\">\n              <Input placeholder=\"基础输入框\" />\n              <Input.Password placeholder=\"密码输入框\" />\n              <Select placeholder=\"选择器\" className=\"theme-demo-select\">\n                <Option value=\"option1\">选项1</Option>\n                <Option value=\"option2\">选项2</Option>\n                <Option value=\"option3\">选项3</Option>\n              </Select>\n              <Switch defaultChecked />\n            </Space>\n          </Card>\n        </Col>\n\n        {/* 展示组件演示 */}\n        <Col span={12}>\n          <Card title=\"🏷️ 展示组件\" size=\"small\">\n            <Space direction=\"vertical\" className=\"theme-demo-section\">\n              <Space wrap>\n                <Tag color=\"blue\">蓝色标签</Tag>\n                <Tag color=\"green\">绿色标签</Tag>\n                <Tag color=\"orange\">橙色标签</Tag>\n                <Tag color=\"red\">红色标签</Tag>\n              </Space>\n              <Space>\n                <Badge count={5}>\n                  <Avatar icon={<UserOutlined />} />\n                </Badge>\n                <Badge dot>\n                  <Avatar icon={<SettingOutlined />} />\n                </Badge>\n              </Space>\n              <Progress percent={30} />\n              <Progress percent={70} status=\"active\" />\n            </Space>\n          </Card>\n        </Col>\n\n        {/* 自定义样式演示 */}\n        <Col span={24}>\n          <Card title=\"🎨 自定义样式演示\" size=\"small\">\n            <Row gutter={[16, 16]}>\n              <Col span={8}>\n                <Card \n                  title=\"渐变背景\" \n                  size=\"small\"\n                  className=\"theme-demo-gradient-card\"\n                >\n                  <Text className=\"theme-demo-text-white\">\n                    使用主题包中的渐变背景\n                  </Text>\n                </Card>\n              </Col>\n              <Col span={8}>\n                <Card \n                  title=\"自定义阴影\" \n                  size=\"small\"\n                  className=\"theme-demo-shadow-card\"\n                >\n                  <Text>\n                    使用主题包中的自定义阴影效果\n                  </Text>\n                </Card>\n              </Col>\n              <Col span={8}>\n                <Card \n                  title=\"发光效果\" \n                  size=\"small\"\n                  className=\"theme-demo-glow-card\"\n                >\n                  <Text>\n                    使用主题包中的发光效果\n                  </Text>\n                </Card>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n\n        {/* 扩展属性演示 */}\n        <Col span={24}>\n          <Card title=\"⚡ 扩展属性演示\" size=\"small\">\n            <Row gutter={[16, 16]}>\n              <Col span={6}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>自定义圆角</Title>\n                  <div className=\"theme-demo-radius-box\">\n                    20px\n                  </div>\n                </div>\n              </Col>\n              <Col span={6}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>自定义间距</Title>\n                  <div className=\"theme-demo-padding-box\">\n                    <Text>30px 内边距</Text>\n                  </div>\n                </div>\n              </Col>\n              <Col span={6}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>自定义字体</Title>\n                  <div>\n                    <Text className=\"theme-demo-large-bold-text\">\n                      大号粗体\n                    </Text>\n                  </div>\n                </div>\n              </Col>\n              <Col span={6}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>透明度控制</Title>\n                  <div \n                    style={{\n                      background: 'rgba(24, 144, 255, 0.3)',\n                      padding: '20px',\n                      borderRadius: '8px'\n                    }}\n                  >\n                    <Text>30% 透明度</Text>\n                  </div>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n\n        {/* 动画效果演示 */}\n        <Col span={24}>\n          <Card title=\"🎭 动画效果演示\" size=\"small\">\n            <Row gutter={[16, 16]}>\n              <Col span={8}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>快速动画</Title>\n                  <Button className=\"theme-demo-fast-animation\">\n                    0.05s 快速\n                  </Button>\n                </div>\n              </Col>\n              <Col span={8}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>中等动画</Title>\n                  <Button className=\"theme-demo-medium-animation\">\n                    0.25s 中等\n                  </Button>\n                </div>\n              </Col>\n              <Col span={8}>\n                <div className=\"theme-demo-center\">\n                  <Title level={4}>慢速动画</Title>\n                  <Button className=\"theme-demo-slow-animation\">\n                    0.55s 慢速\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n\n        {/* 功能说明 */}\n        <Col span={24}>\n          <Alert\n            message=\"🎨 主题包扩展功能说明\"\n            description={\n              <div>\n                <Paragraph>\n                  <strong>新增的可控制元素：</strong>\n                </Paragraph>\n                <ul>\n                  <li><strong>自定义颜色变量：</strong>5个自定义颜色，可用于品牌色、强调色等</li>\n                  <li><strong>渐变背景：</strong>5种预设渐变，支持主要、次要、成功、警告、错误状态</li>\n                  <li><strong>扩展阴影效果：</strong>包括内阴影、发光效果、多层阴影等</li>\n                  <li><strong>扩展圆角：</strong>4种自定义圆角大小，适应不同设计需求</li>\n                  <li><strong>扩展间距：</strong>8种自定义间距，提供更精细的布局控制</li>\n                  <li><strong>扩展字体：</strong>8种字体大小 + 6种字体权重，满足各种文本需求</li>\n                  <li><strong>扩展行高：</strong>6种行高选项，优化阅读体验</li>\n                  <li><strong>扩展动画：</strong>6种动画持续时间 + 5种缓动函数</li>\n                  <li><strong>透明度控制：</strong>9种透明度级别，支持叠加效果</li>\n                  <li><strong>边框宽度：</strong>5种边框宽度，适应不同设计风格</li>\n                  <li><strong>Z-index层级：</strong>5种层级控制，管理元素堆叠</li>\n                  <li><strong>新增组件：</strong>Select选择器、Switch开关等组件的完整样式控制</li>\n                </ul>\n                <Paragraph>\n                  <strong>使用方式：</strong>通过主题包系统，这些属性会自动应用到所有使用Ant Design组件的页面中，无需手动设置样式。\n                </Paragraph>\n              </div>\n            }\n            type=\"info\"\n            showIcon\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default ThemeDemoPage;\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/UserManagementPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Form' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SearchOutlined' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1458,1461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1458,1461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 用户管理页面\n * 基于Ant Design的用户管理界面\n */\nimport React from 'react';\nimport {\n  Card,\n  Table,\n  Button,\n  Space,\n  Tag,\n  Avatar,\n  Typography,\n  Row,\n  Col,\n  Statistic,\n  Input,\n  Select,\n  DatePicker,\n  Form,\n} from 'antd';\nimport {\n  UserOutlined,\n  PlusOutlined,\n  EditOutlined,\n  DeleteOutlined,\n  SearchOutlined,\n  ExportOutlined,\n  ImportOutlined,\n  ReloadOutlined,\n} from '@ant-design/icons';\n\nconst { Title, Text } = Typography;\nconst { Search } = Input;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\nconst UserManagementPage: React.FC = () => {\n  // 模拟用户数据\n  const mockUsers = [\n    {\n      key: '1',\n      id: '1',\n      name: '张三',\n      email: 'zhangsan@example.com',\n      role: '普通用户',\n      status: 'active',\n      lastLogin: '2024-01-15 10:30:00',\n      registrationDate: '2024-01-01',\n      avatar: null,\n    },\n    {\n      key: '2',\n      id: '2',\n      name: '李四',\n      email: 'lisi@example.com',\n      role: '管理员',\n      status: 'active',\n      lastLogin: '2024-01-14 15:45:00',\n      registrationDate: '2024-01-02',\n      avatar: null,\n    },\n    {\n      key: '3',\n      id: '3',\n      name: '王五',\n      email: 'wangwu@example.com',\n      role: '普通用户',\n      status: 'inactive',\n      lastLogin: '2024-01-10 09:20:00',\n      registrationDate: '2024-01-03',\n      avatar: null,\n    },\n  ];\n\n  const columns = [\n    {\n      title: '用户',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: string, record: any) => (\n        <Space>\n          <Avatar icon={<UserOutlined />} />\n          <div>\n            <div>{text}</div>\n            <Text type=\"secondary\">{record.email}</Text>\n          </div>\n        </Space>\n      ),\n    },\n    {\n      title: '角色',\n      dataIndex: 'role',\n      key: 'role',\n      render: (role: string) => (\n        <Tag color={role === '管理员' ? 'blue' : 'default'}>\n          {role}\n        </Tag>\n      ),\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string) => (\n        <Tag color={status === 'active' ? 'green' : 'red'}>\n          {status === 'active' ? '活跃' : '非活跃'}\n        </Tag>\n      ),\n    },\n    {\n      title: '最后登录',\n      dataIndex: 'lastLogin',\n      key: 'lastLogin',\n    },\n    {\n      title: '注册时间',\n      dataIndex: 'registrationDate',\n      key: 'registrationDate',\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: () => (\n        <Space size=\"middle\">\n          <Button type=\"link\" icon={<EditOutlined />} size=\"small\">\n            编辑\n          </Button>\n          <Button type=\"link\" danger icon={<DeleteOutlined />} size=\"small\">\n            删除\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <Title level={2}>用户管理</Title>\n      \n      {/* 统计卡片 */}\n      <Row gutter={16} style={{ marginBottom: '24px' }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"总用户数\"\n              value={1128}\n              prefix={<UserOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"活跃用户\"\n              value={856}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"今日新增\"\n              value={23}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"在线用户\"\n              value={45}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* 操作栏 */}\n      <Card style={{ marginBottom: '16px' }}>\n        <Row gutter={16} align=\"middle\">\n          <Col flex=\"auto\">\n            <Space wrap>\n              <Search\n                placeholder=\"搜索用户\"\n                allowClear\n                style={{ width: 200 }}\n              />\n              <Select placeholder=\"角色筛选\" style={{ width: 120 }} allowClear>\n                <Option value=\"admin\">管理员</Option>\n                <Option value=\"user\">普通用户</Option>\n              </Select>\n              <Select placeholder=\"状态筛选\" style={{ width: 120 }} allowClear>\n                <Option value=\"active\">活跃</Option>\n                <Option value=\"inactive\">非活跃</Option>\n              </Select>\n              <RangePicker placeholder={['开始日期', '结束日期']} />\n            </Space>\n          </Col>\n          <Col>\n            <Space>\n              <Button type=\"primary\" icon={<PlusOutlined />}>\n                新增用户\n              </Button>\n              <Button icon={<ImportOutlined />}>\n                导入\n              </Button>\n              <Button icon={<ExportOutlined />}>\n                导出\n              </Button>\n              <Button icon={<ReloadOutlined />}>\n                刷新\n              </Button>\n            </Space>\n          </Col>\n        </Row>\n      </Card>\n\n      {/* 用户表格 */}\n      <Card>\n        <Table\n          columns={columns}\n          dataSource={mockUsers}\n          pagination={{\n            total: mockUsers.length,\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) =>\n              `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,\n          }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default UserManagementPage;\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/VerifyEmail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":35,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'error', 'handleVerify', and 'isVerified'. Either include them or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [error, handleVerify, isVerified, token]","fix":{"range":[1099,1106],"text":"[error, handleVerify, isVerified, token]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\nimport { Button } from '../components/ui/Button';\nimport { useAuthStore } from '../stores/authStore';\n\nconst VerifyEmail: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { verifyEmail, isLoading, error, clearError } = useAuthStore();\n  \n  const [token, setToken] = useState<string>('');\n  const [isVerified, setIsVerified] = useState(false);\n  \n  // 从URL参数获取token\n  useEffect(() => {\n    const tokenParam = searchParams.get('token');\n    if (tokenParam) {\n      setToken(tokenParam);\n    }\n  }, [searchParams]);\n  \n  // 清除错误信息\n  useEffect(() => {\n    return () => {\n      clearError();\n    };\n  }, [clearError]);\n  \n  const handleVerify = async () => {\n    if (!token) return;\n    \n    try {\n      await verifyEmail({ token });\n      setIsVerified(true);\n    } catch (error) {\n      // 错误已经在store中处理\n    }\n  };\n  \n  // 自动验证\n  useEffect(() => {\n    if (token && !isVerified && !error) {\n      handleVerify();\n    }\n  }, [token]);\n  \n  if (isVerified) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-success-100\">\n              <svg className=\"h-6 w-6 text-success-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              邮箱验证成功\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              您的邮箱已成功验证。现在可以正常使用所有功能了。\n            </p>\n            <div className=\"mt-6\">\n              <Button\n                onClick={() => navigate('/login')}\n                fullWidth\n              >\n                前往登录页面\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!token) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-warning-100\">\n              <svg className=\"h-6 w-6 text-warning-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              验证链接无效\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              邮箱验证链接无效或已过期。请重新注册或联系管理员。\n            </p>\n            <div className=\"mt-6\">\n              <Link\n                to=\"/register\"\n                className=\"font-medium text-primary-600 hover:text-primary-500\"\n              >\n                重新注册\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-error-100\">\n              <svg className=\"h-6 w-6 text-error-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              验证失败\n            </h2>\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\n              {error}\n            </p>\n            <div className=\"mt-6 space-y-4\">\n              <Button\n                onClick={handleVerify}\n                loading={isLoading}\n                fullWidth\n              >\n                重试验证\n              </Button>\n              <Link\n                to=\"/register\"\n                className=\"block font-medium text-primary-600 hover:text-primary-500 text-center\"\n              >\n                重新注册\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-primary-100\">\n            <svg className=\"animate-spin h-6 w-6 text-primary-600\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n          </div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            正在验证邮箱\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            请稍候，我们正在验证您的邮箱地址...\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VerifyEmail;\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/settings/AdminManagementPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 管理员管理页面 - 管理系统管理员账户\n */\nimport React, { useState } from 'react';\nimport {\n  Table,\n  Button,\n  Space,\n  Tag,\n  Modal,\n  Form,\n  Input,\n  Select,\n  Switch,\n  message,\n  Popconfirm,\n  Typography,\n  Card,\n  Row,\n  Col,\n  Statistic,\n  Avatar,\n} from 'antd';\nimport {\n  PlusOutlined,\n  EditOutlined,\n  DeleteOutlined,\n  UserOutlined,\n  SafetyCertificateOutlined,\n  TeamOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\ninterface AdminUser {\n  id: string;\n  email: string;\n  name: string;\n  role: 'super_admin' | 'admin' | 'moderator';\n  status: 'active' | 'inactive' | 'suspended';\n  lastLogin: string;\n  createdAt: string;\n  permissions: string[];\n}\n\nconst AdminManagementPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [editingUser, setEditingUser] = useState<AdminUser | null>(null);\n\n  // 模拟数据\n  const [adminUsers, setAdminUsers] = useState<AdminUser[]>([\n    {\n      id: '1',\n      email: 'superadmin@system.com',\n      name: '超级管理员',\n      role: 'super_admin',\n      status: 'active',\n      lastLogin: '2024-01-15 14:30:00',\n      createdAt: '2024-01-01 00:00:00',\n      permissions: ['all'],\n    },\n    {\n      id: '2',\n      email: 'admin@system.com',\n      name: '系统管理员',\n      role: 'admin',\n      status: 'active',\n      lastLogin: '2024-01-15 12:15:00',\n      createdAt: '2024-01-05 10:30:00',\n      permissions: ['user_management', 'system_config'],\n    },\n    {\n      id: '3',\n      email: 'moderator@system.com',\n      name: '内容管理员',\n      role: 'moderator',\n      status: 'inactive',\n      lastLogin: '2024-01-10 16:45:00',\n      createdAt: '2024-01-08 14:20:00',\n      permissions: ['content_management'],\n    },\n  ]);\n\n  const columns = [\n    {\n      title: '用户信息',\n      key: 'user',\n      render: (record: AdminUser) => (\n        <Space>\n          <Avatar icon={<UserOutlined />} />\n          <div>\n            <div style={{ fontWeight: 500 }}>{record.name}</div>\n            <Text type=\"secondary\" style={{ fontSize: 12 }}>\n              {record.email}\n            </Text>\n          </div>\n        </Space>\n      ),\n    },\n    {\n      title: '角色',\n      dataIndex: 'role',\n      key: 'role',\n      render: (role: string) => {\n        const roleConfig = {\n          super_admin: { color: 'red', text: '超级管理员' },\n          admin: { color: 'blue', text: '管理员' },\n          moderator: { color: 'green', text: '内容管理员' },\n        };\n        const config = roleConfig[role as keyof typeof roleConfig];\n        return <Tag color={config.color}>{config.text}</Tag>;\n      },\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string) => {\n        const statusConfig = {\n          active: { color: 'green', text: '活跃' },\n          inactive: { color: 'orange', text: '非活跃' },\n          suspended: { color: 'red', text: '已暂停' },\n        };\n        const config = statusConfig[status as keyof typeof statusConfig];\n        return <Tag color={config.color}>{config.text}</Tag>;\n      },\n    },\n    {\n      title: '最后登录',\n      dataIndex: 'lastLogin',\n      key: 'lastLogin',\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: (record: AdminUser) => (\n        <Space>\n          <Button\n            type=\"link\"\n            icon={<EditOutlined />}\n            onClick={() => handleEdit(record)}\n          >\n            编辑\n          </Button>\n          <Popconfirm\n            title=\"确定要删除这个管理员吗？\"\n            onConfirm={() => handleDelete(record.id)}\n            okText=\"确定\"\n            cancelText=\"取消\"\n          >\n            <Button type=\"link\" danger icon={<DeleteOutlined />}>\n              删除\n            </Button>\n          </Popconfirm>\n        </Space>\n      ),\n    },\n  ];\n\n  const handleAdd = () => {\n    setEditingUser(null);\n    form.resetFields();\n    setModalVisible(true);\n  };\n\n  const handleEdit = (user: AdminUser) => {\n    setEditingUser(user);\n    form.setFieldsValue(user);\n    setModalVisible(true);\n  };\n\n  const handleDelete = (id: string) => {\n    setAdminUsers(adminUsers.filter(user => user.id !== id));\n    message.success('删除成功');\n  };\n\n  const handleModalOk = async () => {\n    try {\n      const values = await form.validateFields();\n      setLoading(true);\n      \n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      if (editingUser) {\n        // 编辑\n        setAdminUsers(adminUsers.map(user => \n          user.id === editingUser.id ? { ...user, ...values } : user\n        ));\n        message.success('更新成功');\n      } else {\n        // 新增\n        const newUser: AdminUser = {\n          id: Date.now().toString(),\n          ...values,\n          lastLogin: '从未登录',\n          createdAt: new Date().toLocaleString(),\n        };\n        setAdminUsers([...adminUsers, newUser]);\n        message.success('添加成功');\n      }\n      \n      setModalVisible(false);\n    } catch (error) {\n      console.error('Validation failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const stats = [\n    {\n      title: '总管理员',\n      value: adminUsers.length,\n      icon: <TeamOutlined style={{ color: '#1890ff' }} />,\n    },\n    {\n      title: '活跃管理员',\n      value: adminUsers.filter(u => u.status === 'active').length,\n      icon: <SafetyCertificateOutlined style={{ color: '#52c41a' }} />,\n    },\n    {\n      title: '超级管理员',\n      value: adminUsers.filter(u => u.role === 'super_admin').length,\n      icon: <UserOutlined style={{ color: '#ff4d4f' }} />,\n    },\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Title level={3} style={{ marginBottom: 24 }}>\n        <TeamOutlined style={{ marginRight: 8 }} />\n        管理员管理\n      </Title>\n\n      {/* 统计卡片 */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n        {stats.map((stat, index) => (\n          <Col xs={24} sm={8} key={index}>\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n            >\n              <Card>\n                <Statistic\n                  title={stat.title}\n                  value={stat.value}\n                  prefix={stat.icon}\n                />\n              </Card>\n            </motion.div>\n          </Col>\n        ))}\n      </Row>\n\n      {/* 管理员列表 */}\n      <Card\n        title=\"管理员列表\"\n        extra={\n          <Button\n            type=\"primary\"\n            icon={<PlusOutlined />}\n            onClick={handleAdd}\n          >\n            添加管理员\n          </Button>\n        }\n      >\n        <Table\n          columns={columns}\n          dataSource={adminUsers}\n          rowKey=\"id\"\n          pagination={{\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total) => `共 ${total} 条记录`,\n          }}\n        />\n      </Card>\n\n      {/* 添加/编辑模态框 */}\n      <Modal\n        title={editingUser ? '编辑管理员' : '添加管理员'}\n        open={modalVisible}\n        onOk={handleModalOk}\n        onCancel={() => setModalVisible(false)}\n        confirmLoading={loading}\n        width={600}\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          initialValues={{\n            status: 'active',\n            role: 'admin',\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"姓名\"\n            rules={[{ required: true, message: '请输入姓名' }]}\n          >\n            <Input placeholder=\"请输入姓名\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"email\"\n            label=\"邮箱\"\n            rules={[\n              { required: true, message: '请输入邮箱' },\n              { type: 'email', message: '请输入有效的邮箱地址' },\n            ]}\n          >\n            <Input placeholder=\"请输入邮箱\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"role\"\n            label=\"角色\"\n            rules={[{ required: true, message: '请选择角色' }]}\n          >\n            <Select placeholder=\"请选择角色\">\n              <Option value=\"super_admin\">超级管理员</Option>\n              <Option value=\"admin\">管理员</Option>\n              <Option value=\"moderator\">内容管理员</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"status\"\n            label=\"状态\"\n            rules={[{ required: true, message: '请选择状态' }]}\n          >\n            <Select placeholder=\"请选择状态\">\n              <Option value=\"active\">活跃</Option>\n              <Option value=\"inactive\">非活跃</Option>\n              <Option value=\"suspended\">已暂停</Option>\n            </Select>\n          </Form.Item>\n\n          {!editingUser && (\n            <Form.Item\n              name=\"password\"\n              label=\"初始密码\"\n              rules={[\n                { required: true, message: '请输入初始密码' },\n                { min: 6, message: '密码至少6位' },\n              ]}\n            >\n              <Input.Password placeholder=\"请输入初始密码\" />\n            </Form.Item>\n          )}\n        </Form>\n      </Modal>\n    </motion.div>\n  );\n};\n\nexport default AdminManagementPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/settings/BasicConfigPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":36,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[611,614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[611,614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":42,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1030,1033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1030,1033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 基础配置页面 - 系统标题、Logo、主题配置\n */\nimport React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  Button,\n  Upload,\n  Switch,\n  Select,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Space,\n  message,\n  Avatar,\n  Divider,\n} from 'antd';\nimport {\n  UploadOutlined,\n  SettingOutlined,\n  PictureOutlined,\n  BgColorsOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\nconst BasicConfigPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = async (values: any) => {\n    setLoading(true);\n    try {\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      message.success('基础配置保存成功！');\n    } catch (error) {\n      message.error('保存失败，请重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const uploadProps = {\n    name: 'file',\n    action: '/api/upload',\n    headers: {\n      authorization: 'authorization-text',\n    },\n    onChange(info: any) {\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (info.file.status === 'done') {\n        message.success(`${info.file.name} 文件上传成功`);\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} 文件上传失败`);\n      }\n    },\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Title level={3} style={{ marginBottom: 24 }}>\n        <SettingOutlined style={{ marginRight: 8 }} />\n        基础配置\n      </Title>\n\n      <Form\n        form={form}\n        layout=\"vertical\"\n        onFinish={onFinish}\n        initialValues={{\n          systemTitle: '管理系统',\n          systemDescription: '现代化管理系统',\n          theme: 'light',\n          language: 'zh-CN',\n          enableDarkMode: false,\n        }}\n      >\n        <Row gutter={[24, 24]}>\n          {/* 系统信息配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SettingOutlined />\n                  系统信息\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"systemTitle\"\n                label=\"系统标题\"\n                rules={[{ required: true, message: '请输入系统标题' }]}\n              >\n                <Input placeholder=\"请输入系统标题\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"systemDescription\"\n                label=\"系统描述\"\n                rules={[{ required: true, message: '请输入系统描述' }]}\n              >\n                <Input.TextArea\n                  rows={3}\n                  placeholder=\"请输入系统描述\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"systemVersion\"\n                label=\"系统版本\"\n              >\n                <Input placeholder=\"请输入系统版本\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"copyright\"\n                label=\"版权信息\"\n              >\n                <Input placeholder=\"请输入版权信息\" />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* Logo配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <PictureOutlined />\n                  Logo配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item label=\"当前Logo\">\n                <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                  <Avatar\n                    size={80}\n                    icon={<SettingOutlined />}\n                    style={{ backgroundColor: '#1890ff' }}\n                  />\n                  <Text type=\"secondary\">当前系统Logo</Text>\n                </Space>\n              </Form.Item>\n\n              <Divider />\n\n              <Form.Item\n                name=\"logo\"\n                label=\"上传新Logo\"\n              >\n                <Upload {...uploadProps}>\n                  <Button icon={<UploadOutlined />}>\n                    点击上传Logo\n                  </Button>\n                </Upload>\n              </Form.Item>\n\n              <Form.Item\n                name=\"favicon\"\n                label=\"网站图标 (Favicon)\"\n              >\n                <Upload {...uploadProps}>\n                  <Button icon={<UploadOutlined />}>\n                    点击上传Favicon\n                  </Button>\n                </Upload>\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 主题配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <BgColorsOutlined />\n                  主题配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"theme\"\n                label=\"默认主题\"\n                rules={[{ required: true, message: '请选择默认主题' }]}\n              >\n                <Select placeholder=\"请选择默认主题\">\n                  <Option value=\"light\">浅色主题</Option>\n                  <Option value=\"dark\">深色主题</Option>\n                  <Option value=\"auto\">跟随系统</Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                name=\"primaryColor\"\n                label=\"主色调\"\n              >\n                <Select placeholder=\"请选择主色调\">\n                  <Option value=\"#1890ff\">蓝色</Option>\n                  <Option value=\"#52c41a\">绿色</Option>\n                  <Option value=\"#faad14\">橙色</Option>\n                  <Option value=\"#f5222d\">红色</Option>\n                  <Option value=\"#722ed1\">紫色</Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableDarkMode\"\n                label=\"启用深色模式\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableAnimation\"\n                label=\"启用动画效果\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 语言配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SettingOutlined />\n                  语言配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"language\"\n                label=\"默认语言\"\n                rules={[{ required: true, message: '请选择默认语言' }]}\n              >\n                <Select placeholder=\"请选择默认语言\">\n                  <Option value=\"zh-CN\">简体中文</Option>\n                  <Option value=\"zh-TW\">繁体中文</Option>\n                  <Option value=\"en-US\">English</Option>\n                  <Option value=\"ja-JP\">日本語</Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                name=\"timezone\"\n                label=\"时区设置\"\n              >\n                <Select placeholder=\"请选择时区\">\n                  <Option value=\"Asia/Shanghai\">中国标准时间 (UTC+8)</Option>\n                  <Option value=\"UTC\">协调世界时 (UTC)</Option>\n                  <Option value=\"America/New_York\">美国东部时间 (UTC-5)</Option>\n                  <Option value=\"Europe/London\">英国时间 (UTC+0)</Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                name=\"dateFormat\"\n                label=\"日期格式\"\n              >\n                <Select placeholder=\"请选择日期格式\">\n                  <Option value=\"YYYY-MM-DD\">2024-01-15</Option>\n                  <Option value=\"MM/DD/YYYY\">01/15/2024</Option>\n                  <Option value=\"DD/MM/YYYY\">15/01/2024</Option>\n                  <Option value=\"YYYY年MM月DD日\">2024年01月15日</Option>\n                </Select>\n              </Form.Item>\n            </Card>\n          </Col>\n        </Row>\n\n        {/* 保存按钮 */}\n        <Row justify=\"center\" style={{ marginTop: 32 }}>\n          <Space>\n            <Button size=\"large\" onClick={() => form.resetFields()}>\n              重置\n            </Button>\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              htmlType=\"submit\"\n              loading={loading}\n            >\n              保存配置\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </motion.div>\n  );\n};\n\nexport default BasicConfigPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/settings/EmailConfigPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircleOutlined' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Option' is assigned a value but never used.","line":32,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Step' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":40,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[702,705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[702,705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":46,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":59,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":19}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 邮箱配置页面 - 邮件服务设置\n */\nimport React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  Switch,\n  Select,\n  InputNumber,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Space,\n  Button,\n  message,\n  Divider,\n  Alert,\n  Tag,\n  Steps,\n} from 'antd';\nimport {\n  MailOutlined,\n  SendOutlined,\n  SettingOutlined,\n  CheckCircleOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { Step } = Steps;\n\nconst EmailConfigPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [testLoading, setTestLoading] = useState(false);\n\n  const onFinish = async (values: any) => {\n    setLoading(true);\n    try {\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      message.success('邮箱配置保存成功！');\n    } catch (error) {\n      message.error('保存失败，请重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTestEmail = async () => {\n    setTestLoading(true);\n    try {\n      // 模拟发送测试邮件\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      message.success('测试邮件发送成功！请检查邮箱');\n    } catch (error) {\n      message.error('测试邮件发送失败');\n    } finally {\n      setTestLoading(false);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Title level={3} style={{ marginBottom: 24 }}>\n        <MailOutlined style={{ marginRight: 8 }} />\n        邮箱配置\n      </Title>\n\n      <Form\n        form={form}\n        layout=\"vertical\"\n        onFinish={onFinish}\n        initialValues={{\n          smtpHost: 'smtp.gmail.com',\n          smtpPort: 587,\n          smtpSecure: false,\n          smtpUser: '',\n          smtpPassword: '',\n          fromEmail: '',\n          fromName: '系统管理员',\n          enableEmail: true,\n          enableSSL: true,\n          enableTLS: true,\n        }}\n      >\n        <Row gutter={[24, 24]}>\n          {/* SMTP服务器配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SettingOutlined />\n                  SMTP服务器配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"smtpHost\"\n                label=\"SMTP服务器地址\"\n                rules={[{ required: true, message: '请输入SMTP服务器地址' }]}\n              >\n                <Input placeholder=\"例如：smtp.gmail.com\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"smtpPort\"\n                label=\"SMTP端口\"\n                rules={[{ required: true, message: '请输入SMTP端口' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={65535}\n                  style={{ width: '100%' }}\n                  placeholder=\"例如：587\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"smtpUser\"\n                label=\"SMTP用户名\"\n                rules={[{ required: true, message: '请输入SMTP用户名' }]}\n              >\n                <Input placeholder=\"请输入SMTP用户名\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"smtpPassword\"\n                label=\"SMTP密码\"\n                rules={[{ required: true, message: '请输入SMTP密码' }]}\n              >\n                <Input.Password placeholder=\"请输入SMTP密码\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"smtpSecure\"\n                label=\"使用SSL连接\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableTLS\"\n                label=\"启用TLS\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 邮件发送配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SendOutlined />\n                  邮件发送配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"fromEmail\"\n                label=\"发件人邮箱\"\n                rules={[\n                  { required: true, message: '请输入发件人邮箱' },\n                  { type: 'email', message: '请输入有效的邮箱地址' },\n                ]}\n              >\n                <Input placeholder=\"请输入发件人邮箱\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"fromName\"\n                label=\"发件人名称\"\n                rules={[{ required: true, message: '请输入发件人名称' }]}\n              >\n                <Input placeholder=\"请输入发件人名称\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"replyTo\"\n                label=\"回复邮箱\"\n              >\n                <Input placeholder=\"请输入回复邮箱\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"maxRecipients\"\n                label=\"单次最大收件人数\"\n                rules={[{ required: true, message: '请输入单次最大收件人数' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={1000}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入单次最大收件人数\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"sendTimeout\"\n                label=\"发送超时时间（秒）\"\n                rules={[{ required: true, message: '请输入发送超时时间' }]}\n              >\n                <InputNumber\n                  min={5}\n                  max={300}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入发送超时时间\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableEmail\"\n                label=\"启用邮件发送\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 邮件模板配置 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <MailOutlined />\n                  邮件模板配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"welcomeSubject\"\n                label=\"欢迎邮件主题\"\n                rules={[{ required: true, message: '请输入欢迎邮件主题' }]}\n              >\n                <Input placeholder=\"请输入欢迎邮件主题\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"welcomeTemplate\"\n                label=\"欢迎邮件模板\"\n                rules={[{ required: true, message: '请输入欢迎邮件模板' }]}\n              >\n                <Input.TextArea\n                  rows={4}\n                  placeholder=\"请输入欢迎邮件模板内容\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"resetPasswordSubject\"\n                label=\"密码重置邮件主题\"\n                rules={[{ required: true, message: '请输入密码重置邮件主题' }]}\n              >\n                <Input placeholder=\"请输入密码重置邮件主题\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"resetPasswordTemplate\"\n                label=\"密码重置邮件模板\"\n                rules={[{ required: true, message: '请输入密码重置邮件模板' }]}\n              >\n                <Input.TextArea\n                  rows={4}\n                  placeholder=\"请输入密码重置邮件模板内容\"\n                />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 邮件发送限制 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SettingOutlined />\n                  发送限制配置\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"dailyLimit\"\n                label=\"每日发送限制\"\n                rules={[{ required: true, message: '请输入每日发送限制' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={10000}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入每日发送限制\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"hourlyLimit\"\n                label=\"每小时发送限制\"\n                rules={[{ required: true, message: '请输入每小时发送限制' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={1000}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入每小时发送限制\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableRateLimit\"\n                label=\"启用发送频率限制\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableBlacklist\"\n                label=\"启用黑名单功能\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"blacklistEmails\"\n                label=\"黑名单邮箱\"\n                extra=\"每行一个邮箱地址\"\n              >\n                <Input.TextArea\n                  rows={3}\n                  placeholder=\"例如：&#10;spam@example.com&#10;test@example.com\"\n                />\n              </Form.Item>\n            </Card>\n          </Col>\n        </Row>\n\n        {/* 配置状态 */}\n        <Card\n          title=\"配置状态\"\n          style={{ marginTop: 24 }}\n        >\n          <Row gutter={[16, 16]}>\n            <Col xs={24} sm={8}>\n              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                <Tag color=\"green\" style={{ fontSize: 16, padding: '8px 16px' }}>\n                  SMTP连接\n                </Tag>\n                <Text type=\"secondary\">连接正常</Text>\n              </Space>\n            </Col>\n            <Col xs={24} sm={8}>\n              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                <Tag color=\"blue\" style={{ fontSize: 16, padding: '8px 16px' }}>\n                  邮件发送\n                </Tag>\n                <Text type=\"secondary\">功能正常</Text>\n              </Space>\n            </Col>\n            <Col xs={24} sm={8}>\n              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                <Tag color=\"orange\" style={{ fontSize: 16, padding: '8px 16px' }}>\n                  发送限制\n                </Tag>\n                <Text type=\"secondary\">已启用</Text>\n              </Space>\n            </Col>\n          </Row>\n        </Card>\n\n        {/* 操作按钮 */}\n        <Row justify=\"center\" style={{ marginTop: 32 }}>\n          <Space>\n            <Button\n              size=\"large\"\n              icon={<SendOutlined />}\n              loading={testLoading}\n              onClick={handleTestEmail}\n            >\n              发送测试邮件\n            </Button>\n            <Button size=\"large\" onClick={() => form.resetFields()}>\n              重置\n            </Button>\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              htmlType=\"submit\"\n              loading={loading}\n            >\n              保存配置\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </motion.div>\n  );\n};\n\nexport default EmailConfigPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/settings/LayoutConfigPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/pages/settings/SecurityConfigPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[628,631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[628,631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":43,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 安全配置页面 - 系统安全设置\n */\nimport React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  Switch,\n  Select,\n  InputNumber,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Space,\n  Button,\n  message,\n  Divider,\n  Alert,\n  Tag,\n} from 'antd';\nimport {\n  SecurityScanOutlined,\n  LockOutlined,\n  SafetyCertificateOutlined,\n  SafetyOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\nconst SecurityConfigPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = async (values: any) => {\n    setLoading(true);\n    try {\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      message.success('安全配置保存成功！');\n    } catch (error) {\n      message.error('保存失败，请重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Title level={3} style={{ marginBottom: 24 }}>\n        <SecurityScanOutlined style={{ marginRight: 8 }} />\n        安全配置\n      </Title>\n\n      <Form\n        form={form}\n        layout=\"vertical\"\n        onFinish={onFinish}\n        initialValues={{\n          enableTwoFactor: false,\n          enableCaptcha: true,\n          maxLoginAttempts: 5,\n          lockoutDuration: 30,\n          sessionTimeout: 60,\n          passwordMinLength: 8,\n          requireSpecialChars: true,\n          enableIPWhitelist: false,\n          enableAuditLog: true,\n        }}\n      >\n        <Row gutter={[24, 24]}>\n          {/* 登录安全 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <LockOutlined />\n                  登录安全\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"enableTwoFactor\"\n                label=\"启用双因素认证\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableCaptcha\"\n                label=\"启用图形验证码\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"maxLoginAttempts\"\n                label=\"最大登录尝试次数\"\n                rules={[{ required: true, message: '请输入最大登录尝试次数' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={10}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入最大登录尝试次数\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"lockoutDuration\"\n                label=\"账户锁定时间（分钟）\"\n                rules={[{ required: true, message: '请输入账户锁定时间' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={1440}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入账户锁定时间\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"sessionTimeout\"\n                label=\"会话超时时间（分钟）\"\n                rules={[{ required: true, message: '请输入会话超时时间' }]}\n              >\n                <InputNumber\n                  min={5}\n                  max={1440}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入会话超时时间\"\n                />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 密码策略 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SafetyOutlined />\n                  密码策略\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"passwordMinLength\"\n                label=\"密码最小长度\"\n                rules={[{ required: true, message: '请输入密码最小长度' }]}\n              >\n                <InputNumber\n                  min={6}\n                  max={32}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入密码最小长度\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"requireUppercase\"\n                label=\"要求大写字母\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"requireLowercase\"\n                label=\"要求小写字母\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"requireNumbers\"\n                label=\"要求数字\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"requireSpecialChars\"\n                label=\"要求特殊字符\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordExpiry\"\n                label=\"密码过期时间（天）\"\n              >\n                <InputNumber\n                  min={0}\n                  max={365}\n                  style={{ width: '100%' }}\n                  placeholder=\"0表示永不过期\"\n                />\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 访问控制 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SafetyCertificateOutlined />\n                  访问控制\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"enableIPWhitelist\"\n                label=\"启用IP白名单\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"allowedIPs\"\n                label=\"允许的IP地址\"\n                extra=\"每行一个IP地址或IP段\"\n              >\n                <Input.TextArea\n                  rows={4}\n                  placeholder=\"例如：&#10;192.168.1.1&#10;192.168.1.0/24&#10;10.0.0.0/8\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableGeoBlocking\"\n                label=\"启用地理位置限制\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"allowedCountries\"\n                label=\"允许的国家/地区\"\n              >\n                <Select\n                  mode=\"multiple\"\n                  placeholder=\"请选择允许的国家/地区\"\n                  style={{ width: '100%' }}\n                >\n                  <Option value=\"CN\">中国</Option>\n                  <Option value=\"US\">美国</Option>\n                  <Option value=\"JP\">日本</Option>\n                  <Option value=\"KR\">韩国</Option>\n                  <Option value=\"SG\">新加坡</Option>\n                </Select>\n              </Form.Item>\n            </Card>\n          </Col>\n\n          {/* 审计日志 */}\n          <Col xs={24} lg={12}>\n            <Card\n              title={\n                <Space>\n                  <SecurityScanOutlined />\n                  审计日志\n                </Space>\n              }\n              style={{ height: '100%' }}\n            >\n              <Form.Item\n                name=\"enableAuditLog\"\n                label=\"启用审计日志\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"logRetentionDays\"\n                label=\"日志保留天数\"\n                rules={[{ required: true, message: '请输入日志保留天数' }]}\n              >\n                <InputNumber\n                  min={1}\n                  max={3650}\n                  style={{ width: '100%' }}\n                  placeholder=\"请输入日志保留天数\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"logLevel\"\n                label=\"日志级别\"\n                rules={[{ required: true, message: '请选择日志级别' }]}\n              >\n                <Select placeholder=\"请选择日志级别\">\n                  <Option value=\"DEBUG\">DEBUG</Option>\n                  <Option value=\"INFO\">INFO</Option>\n                  <Option value=\"WARN\">WARN</Option>\n                  <Option value=\"ERROR\">ERROR</Option>\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                name=\"enableRealTimeAlert\"\n                label=\"启用实时告警\"\n                valuePropName=\"checked\"\n              >\n                <Switch />\n              </Form.Item>\n\n              <Form.Item\n                name=\"alertEmail\"\n                label=\"告警邮箱\"\n              >\n                <Input placeholder=\"请输入告警邮箱\" />\n              </Form.Item>\n            </Card>\n          </Col>\n        </Row>\n\n        {/* 安全状态 */}\n        <Card\n          title=\"当前安全状态\"\n          style={{ marginTop: 24 }}\n        >\n          <Row gutter={[16, 16]}>\n            <Col xs={24} sm={8}>\n              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                <Tag color=\"green\" style={{ fontSize: 16, padding: '8px 16px' }}>\n                  系统安全\n                </Tag>\n                <Text type=\"secondary\">所有安全检查通过</Text>\n              </Space>\n            </Col>\n            <Col xs={24} sm={8}>\n              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                <Tag color=\"blue\" style={{ fontSize: 16, padding: '8px 16px' }}>\n                  密码策略\n                </Tag>\n                <Text type=\"secondary\">强密码策略已启用</Text>\n              </Space>\n            </Col>\n            <Col xs={24} sm={8}>\n              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n                <Tag color=\"orange\" style={{ fontSize: 16, padding: '8px 16px' }}>\n                  访问控制\n                </Tag>\n                <Text type=\"secondary\">基础访问控制已启用</Text>\n              </Space>\n            </Col>\n          </Row>\n        </Card>\n\n        {/* 保存按钮 */}\n        <Row justify=\"center\" style={{ marginTop: 32 }}>\n          <Space>\n            <Button size=\"large\" onClick={() => form.resetFields()}>\n              重置\n            </Button>\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              htmlType=\"submit\"\n              loading={loading}\n            >\n              保存配置\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </motion.div>\n  );\n};\n\nexport default SecurityConfigPage;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/services/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2056,2059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2056,2059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2192,2195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2192,2195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2217,2220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2217,2220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2346,2349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2346,2349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2371,2374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2371,2374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2501,2504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2501,2504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2526,2529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2526,2529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2659,2662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2659,2662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\n\n// 定义错误类型\ninterface ApiError {\n  detail: string | string[];\n  code?: string;\n  field?: string;\n}\n\n// 创建axios实例\nconst api: AxiosInstance = axios.create({\n  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    // 从localStorage获取token\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    // 如果是401错误且不是刷新token的请求\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (refreshToken) {\n          const response = await api.post('/v1/auth/refresh', {\n            refresh_token: refreshToken,\n          });\n\n          const { access_token, refresh_token } = response.data;\n          localStorage.setItem('access_token', access_token);\n          localStorage.setItem('refresh_token', refresh_token);\n\n          // 重新发送原始请求\n          originalRequest.headers.Authorization = `Bearer ${access_token}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // 刷新token失败，清除本地存储并跳转到登录页\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    // 处理其他错误\n    const apiError: ApiError = {\n      detail: error.response?.data?.detail || '网络错误，请稍后重试',\n    };\n\n    return Promise.reject(apiError);\n  }\n);\n\n// 通用请求方法\nexport const request = {\n  get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    api.get(url, config).then((response) => response.data),\n\n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    api.post(url, data, config).then((response) => response.data),\n\n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    api.put(url, data, config).then((response) => response.data),\n\n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    api.patch(url, data, config).then((response) => response.data),\n\n  delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    api.delete(url, config).then((response) => response.data),\n};\n\n// 设置token的方法\nexport const setAuthToken = (token: string) => {\n  localStorage.setItem('access_token', token);\n};\n\nexport const setRefreshToken = (token: string) => {\n  localStorage.setItem('refresh_token', token);\n};\n\nexport const clearAuthTokens = () => {\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('refresh_token');\n};\n\nexport const getAuthToken = (): string | null => {\n  return localStorage.getItem('access_token');\n};\n\nexport const getRefreshToken = (): string | null => {\n  return localStorage.getItem('refresh_token');\n};\n\nexport default api;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/services/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VerifyEmailData' is defined but never used.","line":66,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { request } from './api';\n\n// 定义所有需要的类型，避免跨文件导入问题\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role?: string;\n  avatar?: string;\n  email_verified: boolean;\n  account_status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';\n  failed_login_attempts: number;\n  account_locked_until?: string;\n  registration_timestamp: string;\n  last_login_timestamp?: string;\n  last_password_change?: string;\n  consent_timestamp?: string;\n  consent_status: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  remember_me?: boolean;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  first_name?: string;\n  last_name?: string;\n  consent: boolean;\n}\n\ninterface LoginResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n  user: User;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\ninterface ForgotPasswordData {\n  email: string;\n}\n\ninterface ResetPasswordData {\n  token: string;\n  password: string;\n}\n\ninterface ChangePasswordData {\n  current_password: string;\n  new_password: string;\n}\n\ninterface VerifyEmailData {\n  token: string;\n}\n\ninterface PasswordPolicy {\n  level: 'basic' | 'high';\n  min_length: number;\n  require_uppercase: boolean;\n  require_lowercase: boolean;\n  require_digit: boolean;\n  require_special: boolean;\n  description: string;\n}\n\n// 认证相关API\nexport const authApi = {\n  // 用户登录\n  login: (credentials: LoginCredentials): Promise<LoginResponse> =>\n    request.post('/v1/auth/login', credentials),\n\n  // 用户注册\n  register: (data: RegisterData): Promise<{ message: string }> =>\n    request.post('/v1/auth/register', data),\n\n  // 用户登出\n  logout: (refreshToken: string): Promise<{ message: string }> =>\n    request.post('/v1/auth/logout', { refresh_token: refreshToken }),\n\n  // 刷新token\n  refreshToken: (refreshToken: string): Promise<RefreshTokenResponse> =>\n    request.post('/v1/auth/refresh', { refresh_token: refreshToken }),\n\n  // 忘记密码\n  forgotPassword: (data: ForgotPasswordData): Promise<{ message: string }> =>\n    request.post('/v1/auth/forgot-password', data),\n\n  // 重置密码\n  resetPassword: (data: ResetPasswordData): Promise<{ message: string }> =>\n    request.post('/v1/auth/reset-password', data),\n\n  // 验证邮箱\n  verifyEmail: (token: string): Promise<{ message: string }> =>\n    request.get(`/v1/auth/verify-email/${token}`),\n\n  // 获取密码策略\n  getPasswordRequirements: (): Promise<PasswordPolicy> =>\n    request.get('/v1/auth/password-requirements'),\n};\n\n// 用户相关API\nexport const userApi = {\n  // 获取当前用户信息\n  getCurrentUser: (): Promise<User> =>\n    request.get('/v1/users/me'),\n\n  // 修改密码\n  changePassword: (data: ChangePasswordData): Promise<{ message: string }> =>\n    request.post('/v1/users/me/change-password', data),\n\n  // 导出用户数据\n  exportData: (): Promise<Blob> =>\n    request.get('/v1/users/me/data', { responseType: 'blob' }),\n\n  // 删除账户\n  deleteAccount: (): Promise<{ message: string }> =>\n    request.delete('/v1/users/me'),\n};\n\n// 健康检查API\nexport const healthApi = {\n  // 健康检查\n  check: (): Promise<{ status: string; timestamp: string }> =>\n    request.get('/health'),\n};\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/services/userPreferencesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/stores/authStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2818,2821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2818,2821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3224,3227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3224,3227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5227,5230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5227,5230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5651,5654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5651,5654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6076,6079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6076,6079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6500,6503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6500,6503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { authApi, userApi } from '../services/auth';\nimport { setAuthToken, setRefreshToken, clearAuthTokens } from '../services/api';\n\n// 定义所有需要的类型，避免跨文件导入问题\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role?: string;\n  avatar?: string;\n  email_verified: boolean;\n  account_status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';\n  failed_login_attempts: number;\n  account_locked_until?: string;\n  registration_timestamp: string;\n  last_login_timestamp?: string;\n  last_password_change?: string;\n  consent_timestamp?: string;\n  consent_status: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  remember_me?: boolean;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  first_name?: string;\n  last_name?: string;\n  consent: boolean;\n}\n\ninterface ForgotPasswordData {\n  email: string;\n}\n\ninterface ResetPasswordData {\n  token: string;\n  password: string;\n}\n\ninterface ChangePasswordData {\n  current_password: string;\n  new_password: string;\n}\n\ninterface VerifyEmailData {\n  token: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  refreshTokenValue: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface AuthActions {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n  forgotPassword: (data: ForgotPasswordData) => Promise<void>;\n  resetPassword: (data: ResetPasswordData) => Promise<void>;\n  changePassword: (data: ChangePasswordData) => Promise<void>;\n  verifyEmail: (data: VerifyEmailData) => Promise<void>;\n  updateUser: (userData: Partial<User>) => void;\n  clearError: () => void;\n}\n\ntype AuthStore = AuthState & AuthActions;\n\nexport const useAuthStore = create<AuthStore>()(\n  persist(\n        (set, get) => ({\n          // 状态\n          user: null,\n          token: null,\n          refreshTokenValue: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: null,\n\n      // 登录\n      login: async (credentials: LoginCredentials) => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          const response = await authApi.login(credentials);\n          const { access_token, refresh_token, user } = response;\n          \n          // 保存token到localStorage\n          setAuthToken(access_token);\n          setRefreshToken(refresh_token);\n          \n          set({\n            user,\n            token: access_token,\n            refreshTokenValue: refresh_token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.detail || '登录失败，请检查邮箱和密码',\n          });\n          throw error;\n        }\n      },\n\n      // 注册\n      register: async (data: RegisterData) => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          await authApi.register(data);\n          set({ isLoading: false, error: null });\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.detail || '注册失败，请稍后重试',\n          });\n          throw error;\n        }\n      },\n\n      // 登出\n      logout: async () => {\n        set({ isLoading: true });\n        \n        try {\n          const refreshToken = get().refreshTokenValue;\n          if (refreshToken) {\n            await authApi.logout(refreshToken);\n          }\n        } catch (error) {\n          // 即使API调用失败也要清除本地状态\n          console.error('Logout API error:', error);\n        } finally {\n          // 清除本地存储\n          clearAuthTokens();\n          \n          set({\n            user: null,\n            token: null,\n            refreshTokenValue: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: null,\n          });\n        }\n      },\n\n      // 刷新token\n      refreshToken: async () => {\n        const { refreshTokenValue: currentRefreshToken } = get();\n        if (!currentRefreshToken) {\n          throw new Error('No refresh token available');\n        }\n        \n        try {\n          const response = await authApi.refreshToken(currentRefreshToken);\n          const { access_token, refresh_token } = response;\n          \n          // 更新token\n          setAuthToken(access_token);\n          setRefreshToken(refresh_token);\n          \n          set({\n            token: access_token,\n            refreshTokenValue: refresh_token,\n          });\n        } catch (error) {\n          // 刷新失败，清除状态并跳转到登录页\n          clearAuthTokens();\n          set({\n            user: null,\n            token: null,\n            refreshToken: null,\n            isAuthenticated: false,\n            error: '登录已过期，请重新登录',\n          });\n          throw error;\n        }\n      },\n\n      // 忘记密码\n      forgotPassword: async (data: ForgotPasswordData) => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          await authApi.forgotPassword(data);\n          set({ isLoading: false, error: null });\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.detail || '发送重置邮件失败，请稍后重试',\n          });\n          throw error;\n        }\n      },\n\n      // 重置密码\n      resetPassword: async (data: ResetPasswordData) => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          await authApi.resetPassword(data);\n          set({ isLoading: false, error: null });\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.detail || '密码重置失败，请稍后重试',\n          });\n          throw error;\n        }\n      },\n\n      // 修改密码\n      changePassword: async (data: ChangePasswordData) => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          await userApi.changePassword(data);\n          set({ isLoading: false, error: null });\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.detail || '密码修改失败，请检查当前密码',\n          });\n          throw error;\n        }\n      },\n\n      // 验证邮箱\n      verifyEmail: async (data: VerifyEmailData) => {\n        set({ isLoading: true, error: null });\n        \n        try {\n          await authApi.verifyEmail(data.token);\n          set({ isLoading: false, error: null });\n        } catch (error: any) {\n          set({\n            isLoading: false,\n            error: error.detail || '邮箱验证失败，请检查验证链接',\n          });\n          throw error;\n        }\n      },\n\n      // 更新用户信息\n      updateUser: (userData: Partial<User>) => {\n        const { user } = get();\n        if (user) {\n          set({ user: { ...user, ...userData } });\n        }\n      },\n\n      // 清除错误\n      clearError: () => {\n        set({ error: null });\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n        refreshTokenValue: state.refreshTokenValue,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/stores/layout-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/stores/userPreferencesStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2110,2113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2110,2113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2785,2788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2785,2788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3423,3426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3423,3426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3933,3936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3933,3936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4560,4563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4560,4563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5069,5072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5069,5072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5749,5752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5749,5752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6295,6298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6295,6298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 用户偏好状态管理\n * 使用 Zustand 管理用户主题和布局偏好\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { userPreferencesService } from '../services/userPreferencesService';\nimport type {\n  UserPreferences,\n  UserPreferencesUpdate,\n  AdminPreferences,\n  PreferencesSyncStatus,\n  PreferencesPermissionCheck,\n  PreferencesChangeHistory,\n} from '../types/user-preferences';\nimport { DEFAULT_USER_PREFERENCES } from '../types/user-preferences';\n\ninterface UserPreferencesState {\n  // 状态\n  preferences: UserPreferences;\n  adminPreferences: AdminPreferences | null;\n  permissions: PreferencesPermissionCheck | null;\n  syncStatus: PreferencesSyncStatus;\n  isLoading: boolean;\n  error: string | null;\n  history: PreferencesChangeHistory[];\n}\n\ninterface UserPreferencesActions {\n  // 偏好管理\n  loadPreferences: () => Promise<void>;\n  updatePreferences: (update: UserPreferencesUpdate) => Promise<void>;\n  resetPreferences: () => Promise<void>;\n  \n  // 管理员功能\n  loadAdminPreferences: () => Promise<void>;\n  updateAdminPreferences: (update: Partial<AdminPreferences>) => Promise<void>;\n  \n  // 权限管理\n  loadPermissions: () => Promise<void>;\n  \n  // 同步功能\n  syncPreferences: () => Promise<void>;\n  \n  // 历史记录\n  loadHistory: (userId?: string) => Promise<void>;\n  \n  // 工具方法\n  clearError: () => void;\n  setLoading: (loading: boolean) => void;\n  \n  // 本地存储\n  saveToLocalStorage: () => void;\n  loadFromLocalStorage: () => void;\n}\n\ntype UserPreferencesStore = UserPreferencesState & UserPreferencesActions;\n\nexport const useUserPreferencesStore = create<UserPreferencesStore>()(\n  persist(\n    (set, get) => ({\n      // 初始状态\n      preferences: DEFAULT_USER_PREFERENCES,\n      adminPreferences: null,\n      permissions: null,\n      syncStatus: { isSyncing: false },\n      isLoading: false,\n      error: null,\n      history: [],\n\n      // 加载用户偏好\n      loadPreferences: async () => {\n        set({ isLoading: true, error: null });\n        try {\n          const preferences = await userPreferencesService.getCurrentUserPreferences();\n          set({ preferences, isLoading: false });\n        } catch (error: any) {\n          console.error('Failed to load user preferences:', error);\n          set({ \n            error: error.message || 'Failed to load preferences',\n            isLoading: false \n          });\n        }\n      },\n\n      // 更新用户偏好\n      updatePreferences: async (update: UserPreferencesUpdate) => {\n        set({ isLoading: true, error: null });\n        try {\n          const updatedPreferences = await userPreferencesService.updateCurrentUserPreferences(update);\n          set({ \n            preferences: updatedPreferences,\n            isLoading: false \n          });\n          \n          // 自动同步到服务器\n          await get().syncPreferences();\n        } catch (error: any) {\n          console.error('Failed to update user preferences:', error);\n          set({ \n            error: error.message || 'Failed to update preferences',\n            isLoading: false \n          });\n        }\n      },\n\n      // 重置用户偏好\n      resetPreferences: async () => {\n        set({ isLoading: true, error: null });\n        try {\n          const resetPreferences = await userPreferencesService.resetCurrentUserPreferences();\n          set({ \n            preferences: resetPreferences,\n            isLoading: false \n          });\n          \n          // 自动同步到服务器\n          await get().syncPreferences();\n        } catch (error: any) {\n          console.error('Failed to reset user preferences:', error);\n          set({ \n            error: error.message || 'Failed to reset preferences',\n            isLoading: false \n          });\n        }\n      },\n\n      // 加载管理员偏好\n      loadAdminPreferences: async () => {\n        set({ isLoading: true, error: null });\n        try {\n          const adminPreferences = await userPreferencesService.getAdminPreferences();\n          set({ adminPreferences, isLoading: false });\n        } catch (error: any) {\n          console.error('Failed to load admin preferences:', error);\n          set({ \n            error: error.message || 'Failed to load admin preferences',\n            isLoading: false \n          });\n        }\n      },\n\n      // 更新管理员偏好\n      updateAdminPreferences: async (update: Partial<AdminPreferences>) => {\n        set({ isLoading: true, error: null });\n        try {\n          const updatedAdminPreferences = await userPreferencesService.updateAdminPreferences(update);\n          set({ \n            adminPreferences: updatedAdminPreferences,\n            isLoading: false \n          });\n        } catch (error: any) {\n          console.error('Failed to update admin preferences:', error);\n          set({ \n            error: error.message || 'Failed to update admin preferences',\n            isLoading: false \n          });\n        }\n      },\n\n      // 加载权限信息\n      loadPermissions: async () => {\n        set({ isLoading: true, error: null });\n        try {\n          const permissions = await userPreferencesService.getPreferencesPermissions();\n          set({ permissions, isLoading: false });\n        } catch (error: any) {\n          console.error('Failed to load permissions:', error);\n          set({ \n            error: error.message || 'Failed to load permissions',\n            isLoading: false \n          });\n        }\n      },\n\n      // 同步偏好设置\n      syncPreferences: async () => {\n        const { preferences } = get();\n        set({ syncStatus: { isSyncing: true } });\n        \n        try {\n          const syncStatus = await userPreferencesService.syncPreferences(preferences);\n          set({ \n            syncStatus: {\n              ...syncStatus,\n              isSyncing: false,\n              lastSyncTime: new Date().toISOString(),\n            }\n          });\n        } catch (error: any) {\n          console.error('Failed to sync preferences:', error);\n          set({ \n            syncStatus: {\n              isSyncing: false,\n              syncError: error.message || 'Failed to sync preferences',\n            }\n          });\n        }\n      },\n\n      // 加载历史记录\n      loadHistory: async (userId?: string) => {\n        set({ isLoading: true, error: null });\n        try {\n          const history = await userPreferencesService.getPreferencesHistory(userId);\n          set({ history, isLoading: false });\n        } catch (error: any) {\n          console.error('Failed to load preferences history:', error);\n          set({ \n            error: error.message || 'Failed to load history',\n            isLoading: false \n          });\n        }\n      },\n\n      // 清除错误\n      clearError: () => {\n        set({ error: null });\n      },\n\n      // 设置加载状态\n      setLoading: (loading: boolean) => {\n        set({ isLoading: loading });\n      },\n\n      // 保存到本地存储\n      saveToLocalStorage: () => {\n        const { preferences } = get();\n        localStorage.setItem('user-preferences', JSON.stringify(preferences));\n      },\n\n      // 从本地存储加载\n      loadFromLocalStorage: () => {\n        try {\n          const stored = localStorage.getItem('user-preferences');\n          if (stored) {\n            const preferences = JSON.parse(stored);\n            set({ preferences });\n          }\n        } catch (error) {\n          console.error('Failed to load preferences from localStorage:', error);\n        }\n      },\n    }),\n    {\n      name: 'user-preferences-store',\n      partialize: (state) => ({\n        preferences: state.preferences,\n        syncStatus: state.syncStatus,\n      }),\n    }\n  )\n);\n\n// 便捷的 Hook 用于获取特定偏好\nexport const useThemePreference = () => {\n  const { preferences, updatePreferences } = useUserPreferencesStore();\n  \n  return {\n    theme: preferences.theme,\n    setTheme: (theme: UserPreferences['theme']) => \n      updatePreferences({ theme }),\n  };\n};\n\nexport const useLayoutPreference = () => {\n  const { preferences, updatePreferences } = useUserPreferencesStore();\n  \n  return {\n    layout: preferences.layout,\n    setLayout: (layout: UserPreferences['layout']) => \n      updatePreferences({ layout }),\n  };\n};\n\n// 管理员专用 Hook\nexport const useAdminPreferences = () => {\n  const { \n    adminPreferences, \n    permissions, \n    loadAdminPreferences, \n    updateAdminPreferences,\n    loadPermissions \n  } = useUserPreferencesStore();\n  \n  return {\n    adminPreferences,\n    permissions,\n    loadAdminPreferences,\n    updateAdminPreferences,\n    loadPermissions,\n    canManagePreferences: permissions?.canChangeTheme && permissions?.canChangeLayout,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/styles/antd-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/accessibility-check.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":156,"column":52,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":156,"endColumn":83}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题可访问性检查工具\n * 检查文本、图标、颜色与背景的适配性\n */\n\nimport { checkThemeAccessibility, generateAccessibilityReport } from './core/accessibility';\nimport lightTheme from './packages/light';\nimport darkTheme from './packages/dark';\n\n/**\n * 检查所有主题的可访问性\n */\nexport function checkAllThemesAccessibility() {\n  console.log('🔍 开始检查主题可访问性...\\n');\n\n  // 检查浅色主题\n  console.log('📋 检查浅色主题可访问性');\n  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n  const lightAccessibility = checkThemeAccessibility(lightTheme);\n  console.log(`可访问性分数: ${lightAccessibility.score}/100`);\n  \n  if (lightAccessibility.issues.length > 0) {\n    console.log('\\n🚨 发现的问题:');\n    lightAccessibility.issues.forEach((issue, index) => {\n      console.log(`${index + 1}. ${issue.component} - ${issue.property}`);\n      console.log(`   问题: ${issue.issue}`);\n      console.log(`   建议: ${issue.suggestion}\\n`);\n    });\n  }\n\n  if (lightAccessibility.recommendations.length > 0) {\n    console.log('💡 改进建议:');\n    lightAccessibility.recommendations.forEach((rec, index) => {\n      console.log(`${index + 1}. ${rec}`);\n    });\n  }\n\n  console.log('\\n' + '='.repeat(50) + '\\n');\n\n  // 检查深色主题\n  console.log('📋 检查深色主题可访问性');\n  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n  const darkAccessibility = checkThemeAccessibility(darkTheme);\n  console.log(`可访问性分数: ${darkAccessibility.score}/100`);\n  \n  if (darkAccessibility.issues.length > 0) {\n    console.log('\\n🚨 发现的问题:');\n    darkAccessibility.issues.forEach((issue, index) => {\n      console.log(`${index + 1}. ${issue.component} - ${issue.property}`);\n      console.log(`   问题: ${issue.issue}`);\n      console.log(`   建议: ${issue.suggestion}\\n`);\n    });\n  }\n\n  if (darkAccessibility.recommendations.length > 0) {\n    console.log('💡 改进建议:');\n    darkAccessibility.recommendations.forEach((rec, index) => {\n      console.log(`${index + 1}. ${rec}`);\n    });\n  }\n\n  // 生成详细报告\n  console.log('\\n' + '='.repeat(50) + '\\n');\n  console.log('📊 生成详细可访问性报告...');\n  \n  const lightReport = generateAccessibilityReport(lightTheme);\n  const darkReport = generateAccessibilityReport(darkTheme);\n  \n  console.log('\\n📄 浅色主题可访问性报告:');\n  console.log(lightReport);\n  \n  console.log('\\n📄 深色主题可访问性报告:');\n  console.log(darkReport);\n\n  return {\n    light: lightAccessibility,\n    dark: darkAccessibility,\n    lightReport,\n    darkReport\n  };\n}\n\n/**\n * 生成可访问性优化建议\n */\nexport function generateAccessibilityOptimizations() {\n  const optimizations = {\n    light: {\n      textContrast: {\n        current: '#1f1f1f',\n        optimized: '#000000',\n        reason: '使用纯黑色文本可提供最佳对比度'\n      },\n      secondaryText: {\n        current: '#595959',\n        optimized: '#404040',\n        reason: '提高次要文本对比度，确保可读性'\n      },\n      placeholder: {\n        current: '#8c8c8c',\n        optimized: '#666666',\n        reason: '提高占位符文本对比度'\n      },\n      menuText: {\n        current: 'rgba(255, 255, 255, 0.95)',\n        optimized: '#ffffff',\n        reason: '菜单文本使用纯白色确保最佳对比度'\n      }\n    },\n    dark: {\n      textContrast: {\n        current: '#ffffff',\n        optimized: '#ffffff',\n        reason: '深色主题中纯白色文本已提供最佳对比度'\n      },\n      secondaryText: {\n        current: '#d9d9d9',\n        optimized: '#e6e6e6',\n        reason: '进一步提高次要文本对比度'\n      },\n      placeholder: {\n        current: '#a6a6a6',\n        optimized: '#bfbfbf',\n        reason: '提高占位符文本对比度'\n      },\n      menuText: {\n        current: 'rgba(255, 255, 255, 0.95)',\n        optimized: '#ffffff',\n        reason: '菜单文本使用纯白色确保最佳对比度'\n      }\n    }\n  };\n\n  console.log('🎯 可访问性优化建议');\n  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n  \n  console.log('\\n📋 浅色主题优化建议:');\n  Object.entries(optimizations.light).forEach(([key, value]) => {\n    console.log(`• ${key}: ${value.current} → ${value.optimized}`);\n    console.log(`  原因: ${value.reason}\\n`);\n  });\n\n  console.log('\\n📋 深色主题优化建议:');\n  Object.entries(optimizations.dark).forEach(([key, value]) => {\n    console.log(`• ${key}: ${value.current} → ${value.optimized}`);\n    console.log(`  原因: ${value.reason}\\n`);\n  });\n\n  return optimizations;\n}\n\n/**\n * 检查特定颜色组合的对比度\n */\nexport function checkColorContrast(foreground: string, background: string, component: string = 'Unknown') {\n  const { getContrastRatio, checkContrastRatio } = require('./core/accessibility');\n  \n  const ratio = getContrastRatio(foreground, background);\n  const contrast = checkContrastRatio(foreground, background);\n  \n  console.log(`🔍 检查 ${component} 颜色对比度:`);\n  console.log(`前景色: ${foreground}`);\n  console.log(`背景色: ${background}`);\n  console.log(`对比度: ${ratio.toFixed(2)}:1`);\n  console.log(`WCAG AA: ${contrast.aa ? '✅ 通过' : '❌ 未通过'}`);\n  console.log(`WCAG AAA: ${contrast.aaa ? '✅ 通过' : '❌ 未通过'}`);\n  console.log(`等级: ${contrast.level.toUpperCase()}\\n`);\n  \n  return { ratio, contrast };\n}\n\n// 导出检查函数\nexport { checkThemeAccessibility, generateAccessibilityReport } from './core/accessibility';\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/antd-themes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'magenta' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'volcano' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'orange' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'lime' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[347,350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[347,350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Ant Design 主题配置\n * 基于 Spec-Kit 方法实现的完整主题系统\n */\n\nimport { theme } from 'antd';\nimport { \n  blue, \n  purple, \n  cyan, \n  green, \n  magenta, \n  red, \n  volcano, \n  orange, \n  gold, \n  lime \n} from '@ant-design/colors';\n\n// 完整的主题类型定义\nexport interface AntdThemeConfig {\n  name: string;\n  displayName: string;\n  description: string;\n  algorithm: any;\n  token: {\n    // 主色调\n    colorPrimary: string;\n    colorSuccess: string;\n    colorWarning: string;\n    colorError: string;\n    colorInfo: string;\n    \n    // 背景色\n    colorBgBase: string;\n    colorBgContainer: string;\n    colorBgElevated: string;\n    colorBgLayout: string;\n    colorBgSpotlight: string;\n    colorBgMask: string;\n    \n    // 文字色\n    colorText: string;\n    colorTextSecondary: string;\n    colorTextTertiary: string;\n    colorTextQuaternary: string;\n    colorTextDisabled: string;\n    colorTextHeading: string;\n    colorTextDescription: string;\n    colorTextPlaceholder: string;\n    \n    // 边框色\n    colorBorder: string;\n    colorBorderSecondary: string;\n    colorSplit: string;\n    \n    // 填充色\n    colorFill: string;\n    colorFillSecondary: string;\n    colorFillTertiary: string;\n    colorFillQuaternary: string;\n    \n    // 链接色\n    colorLink: string;\n    colorLinkHover: string;\n    colorLinkActive: string;\n    \n    // 圆角\n    borderRadius: number;\n    borderRadiusLG: number;\n    borderRadiusSM: number;\n    borderRadiusXS: number;\n    \n    // 阴影\n    boxShadow: string;\n    boxShadowSecondary: string;\n    boxShadowTertiary: string;\n    \n    // 字体\n    fontFamily: string;\n    fontSize: number;\n    fontSizeLG: number;\n    fontSizeSM: number;\n    fontSizeXL: number;\n    fontSizeHeading1: number;\n    fontSizeHeading2: number;\n    fontSizeHeading3: number;\n    fontSizeHeading4: number;\n    fontSizeHeading5: number;\n    \n    // 行高\n    lineHeight: number;\n    lineHeightLG: number;\n    lineHeightSM: number;\n    \n    // 间距\n    padding: number;\n    paddingLG: number;\n    paddingSM: number;\n    paddingXS: number;\n    margin: number;\n    marginLG: number;\n    marginSM: number;\n    marginXS: number;\n    \n    // 动画\n    motionDurationFast: string;\n    motionDurationMid: string;\n    motionDurationSlow: string;\n    motionEaseInOut: string;\n    motionEaseOut: string;\n    motionEaseIn: string;\n    \n    // 其他\n    wireframe: boolean;\n    controlHeight: number;\n    controlHeightLG: number;\n    controlHeightSM: number;\n  };\n  components: {\n    // 布局组件\n    Layout: {\n      bodyBg: string;\n      headerBg: string;\n      headerColor: string;\n      headerHeight: number;\n      siderBg: string;\n      siderColor: string;\n      triggerBg: string;\n      triggerColor: string;\n    };\n    \n    // 菜单组件\n    Menu: {\n      itemBg: string;\n      itemSelectedBg: string;\n      itemHoverBg: string;\n      itemColor: string;\n      itemSelectedColor: string;\n      itemHoverColor: string;\n      itemActiveBg: string;\n      itemActiveColor: string;\n      itemDisabledColor: string;\n      subMenuItemBg: string;\n      groupTitleColor: string;\n      iconSize: number;\n      collapsedIconSize: number;\n      collapsedWidth: number;\n    };\n    \n    // 按钮组件\n    Button: {\n      primaryColor: string;\n      defaultBg: string;\n      defaultColor: string;\n      defaultBorderColor: string;\n      defaultHoverBg: string;\n      defaultHoverColor: string;\n      defaultHoverBorderColor: string;\n      defaultActiveBg: string;\n      defaultActiveColor: string;\n      defaultActiveBorderColor: string;\n      textHoverBg: string;\n      textHoverColor: string;\n      dangerColor: string;\n      dangerBg: string;\n      dangerBorderColor: string;\n      dangerHoverColor: string;\n      dangerHoverBg: string;\n      dangerHoverBorderColor: string;\n      borderRadius: number;\n      controlHeight: number;\n      controlHeightLG: number;\n      controlHeightSM: number;\n      paddingInline: number;\n      paddingInlineLG: number;\n      paddingInlineSM: number;\n      fontSize: number;\n      fontSizeLG: number;\n      fontSizeSM: number;\n      fontWeight: number;\n      lineWidth: number;\n      shadow: string;\n    };\n    \n    // 卡片组件\n    Card: {\n      headerBg: string;\n      headerColor: string;\n      bodyBg: string;\n      bodyColor: string;\n      borderColor: string;\n      borderRadius: number;\n      boxShadow: string;\n      boxShadowTertiary: string;\n      paddingLG: number;\n      paddingSM: number;\n      paddingXS: number;\n      headerFontSize: number;\n      headerFontSizeSM: number;\n      headerFontSizeLG: number;\n      headerHeight: number;\n      headerHeightSM: number;\n      headerHeightLG: number;\n    };\n    \n    // 输入框组件\n    Input: {\n      colorBgContainer: string;\n      colorBorder: string;\n      colorBorderHover: string;\n      colorPrimary: string;\n      colorText: string;\n      colorTextPlaceholder: string;\n      colorTextDisabled: string;\n      colorTextSecondary: string;\n      colorError: string;\n      colorErrorHover: string;\n      colorWarning: string;\n      colorWarningHover: string;\n      borderRadius: number;\n      controlHeight: number;\n      controlHeightLG: number;\n      controlHeightSM: number;\n      paddingInline: number;\n      paddingInlineLG: number;\n      paddingInlineSM: number;\n      fontSize: number;\n      fontSizeLG: number;\n      fontSizeSM: number;\n      lineWidth: number;\n      lineWidthFocus: number;\n      boxShadow: string;\n      activeShadow: string;\n      hoverShadow: string;\n    };\n    \n    // 表格组件\n    Table: {\n      headerBg: string;\n      headerColor: string;\n      headerSortActiveBg: string;\n      headerSortHoverBg: string;\n      bodySortBg: string;\n      rowHoverBg: string;\n      rowSelectedBg: string;\n      rowSelectedHoverBg: string;\n      rowExpandedBg: string;\n      cellPaddingBlock: number;\n      cellPaddingInline: number;\n      cellPaddingBlockMD: number;\n      cellPaddingInlineMD: number;\n      cellPaddingBlockSM: number;\n      cellPaddingInlineSM: number;\n      borderColor: string;\n      headerBorderBottom: string;\n      headerSplitColor: string;\n      footerBg: string;\n      footerColor: string;\n      stickyScrollBarBg: string;\n      stickyScrollBarBorderRadius: number;\n    };\n    \n    // 模态框组件\n    Modal: {\n      contentBg: string;\n      headerBg: string;\n      titleColor: string;\n      titleFontSize: number;\n      titleLineHeight: number;\n      contentPadding: number;\n      contentPaddingHorizontal: number;\n      contentPaddingVertical: number;\n      borderRadius: number;\n      boxShadow: string;\n      maskBg: string;\n      footerBg: string;\n      footerPaddingVertical: number;\n      footerPaddingHorizontal: number;\n      closeBtnColor: string;\n      closeBtnHoverColor: string;\n      closeBtnSize: number;\n    };\n    \n    // 抽屉组件\n    Drawer: {\n      colorBgElevated: string;\n      colorBgMask: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorTextTertiary: string;\n      colorTextQuaternary: string;\n      colorBorder: string;\n      colorFillSecondary: string;\n      colorFillTertiary: string;\n      colorFillQuaternary: string;\n      colorPrimary: string;\n      colorSuccess: string;\n      colorWarning: string;\n      colorError: string;\n      colorInfo: string;\n      colorLink: string;\n      colorLinkHover: string;\n      colorLinkActive: string;\n      borderRadius: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n      paddingLG: number;\n      padding: number;\n      paddingSM: number;\n      paddingXS: number;\n      paddingXXS: number;\n      marginLG: number;\n      margin: number;\n      marginSM: number;\n      marginXS: number;\n      marginXXS: number;\n      fontSize: number;\n      fontSizeLG: number;\n      fontSizeSM: number;\n      fontSizeXL: number;\n      lineHeight: number;\n      lineHeightLG: number;\n      lineHeightSM: number;\n      motionDurationSlow: string;\n      motionDurationMid: string;\n      motionDurationFast: string;\n      motionEaseInOut: string;\n      motionEaseOut: string;\n      motionEaseIn: string;\n    };\n    \n    // 消息组件\n    Message: {\n      contentBg: string;\n      contentPadding: number;\n      contentPaddingVertical: number;\n      contentPaddingHorizontal: number;\n      borderRadius: number;\n      boxShadow: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorSuccess: string;\n      colorError: string;\n      colorWarning: string;\n      colorInfo: string;\n      fontSize: number;\n      lineHeight: number;\n      marginBottom: number;\n      zIndexPopup: number;\n    };\n    \n    // 通知组件\n    Notification: {\n      contentBg: string;\n      contentPadding: number;\n      contentPaddingVertical: number;\n      contentPaddingHorizontal: number;\n      borderRadius: number;\n      boxShadow: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorSuccess: string;\n      colorError: string;\n      colorWarning: string;\n      colorInfo: string;\n      fontSize: number;\n      lineHeight: number;\n      marginBottom: number;\n      zIndexPopup: number;\n      titleFontSize: number;\n      titleLineHeight: number;\n      titleMarginBottom: number;\n      descriptionFontSize: number;\n      descriptionLineHeight: number;\n      descriptionMarginBottom: number;\n      closeBtnColor: string;\n      closeBtnHoverColor: string;\n      closeBtnSize: number;\n    };\n    \n    // 标签组件\n    Tag: {\n      defaultBg: string;\n      defaultColor: string;\n      defaultBorderColor: string;\n      successBg: string;\n      successColor: string;\n      successBorderColor: string;\n      warningBg: string;\n      warningColor: string;\n      warningBorderColor: string;\n      errorBg: string;\n      errorColor: string;\n      errorBorderColor: string;\n      infoBg: string;\n      infoColor: string;\n      infoBorderColor: string;\n      borderRadius: number;\n      fontSize: number;\n      lineHeight: number;\n      paddingInline: number;\n      paddingBlock: number;\n      marginInlineEnd: number;\n      closeBtnColor: string;\n      closeBtnHoverColor: string;\n      closeBtnSize: number;\n    };\n    \n    // 徽章组件\n    Badge: {\n      textFontSize: number;\n      textFontWeight: number;\n      statusSize: number;\n      dotSize: number;\n      dotSizeMin: number;\n      dotSizeMax: number;\n      colorBgContainer: string;\n      colorError: string;\n      colorWarning: string;\n      colorSuccess: string;\n      colorInfo: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorTextTertiary: string;\n      colorTextQuaternary: string;\n      colorBorder: string;\n      colorBorderSecondary: string;\n      colorFill: string;\n      colorFillSecondary: string;\n      colorFillTertiary: string;\n      colorFillQuaternary: string;\n      borderRadius: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n      paddingInline: number;\n      paddingBlock: number;\n      marginInlineEnd: number;\n      zIndexPopup: number;\n    };\n    \n    // 头像组件\n    Avatar: {\n      textFontSize: number;\n      textFontSizeLG: number;\n      textFontSizeSM: number;\n      textFontWeight: number;\n      textColor: string;\n      textColorSecondary: string;\n      textColorTertiary: string;\n      textColorQuaternary: string;\n      bg: string;\n      bgSecondary: string;\n      bgTertiary: string;\n      bgQuaternary: string;\n      colorBgContainer: string;\n      colorBorder: string;\n      colorBorderSecondary: string;\n      borderRadius: number;\n      borderRadiusLG: number;\n      borderRadiusSM: number;\n      size: number;\n      sizeLG: number;\n      sizeSM: number;\n      sizeXS: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n    };\n    \n    // 分页组件\n    Pagination: {\n      itemBg: string;\n      itemSize: number;\n      itemSizeSM: number;\n      itemActiveBg: string;\n      itemActiveBgDisabled: string;\n      itemInputBg: string;\n      itemLinkBg: string;\n      itemLinkBgHover: string;\n      itemLinkBgActive: string;\n      itemLinkBgActiveHover: string;\n      itemColor: string;\n      itemColorHover: string;\n      itemColorActive: string;\n      itemColorActiveHover: string;\n      itemColorDisabled: string;\n      itemColorDisabledHover: string;\n      itemBorderColor: string;\n      itemBorderColorHover: string;\n      itemBorderColorActive: string;\n      itemBorderColorActiveHover: string;\n      itemBorderColorDisabled: string;\n      itemBorderColorDisabledHover: string;\n      borderRadius: number;\n      borderRadiusSM: number;\n      fontSize: number;\n      fontSizeSM: number;\n      lineHeight: number;\n      lineHeightSM: number;\n      paddingInline: number;\n      paddingInlineSM: number;\n      paddingBlock: number;\n      paddingBlockSM: number;\n      margin: number;\n      marginSM: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n    };\n    \n    // 面包屑组件\n    Breadcrumb: {\n      itemColor: string;\n      itemColorHover: string;\n      itemColorActive: string;\n      itemColorDisabled: string;\n      lastItemColor: string;\n      separatorColor: string;\n      separatorMargin: number;\n      fontSize: number;\n      fontSizeSM: number;\n      lineHeight: number;\n      lineHeightSM: number;\n      linkColor: string;\n      linkColorHover: string;\n      linkColorActive: string;\n      linkColorDisabled: string;\n      linkDecoration: string;\n      linkDecorationHover: string;\n      linkDecorationActive: string;\n      linkDecorationDisabled: string;\n      linkHoverDecoration: string;\n      linkActiveDecoration: string;\n      linkDisabledDecoration: string;\n    };\n    \n    // 加载组件\n    Spin: {\n      colorPrimary: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorTextTertiary: string;\n      colorTextQuaternary: string;\n      colorBgContainer: string;\n      colorBorder: string;\n      colorBorderSecondary: string;\n      colorFill: string;\n      colorFillSecondary: string;\n      colorFillTertiary: string;\n      colorFillQuaternary: string;\n      fontSize: number;\n      fontSizeLG: number;\n      fontSizeSM: number;\n      lineHeight: number;\n      lineHeightLG: number;\n      lineHeightSM: number;\n      borderRadius: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n      padding: number;\n      paddingLG: number;\n      paddingSM: number;\n      margin: number;\n      marginLG: number;\n      marginSM: number;\n      zIndexPopup: number;\n    };\n    \n    // 进度条组件\n    Progress: {\n      defaultColor: string;\n      remainingColor: string;\n      successColor: string;\n      exceptionColor: string;\n      textColor: string;\n      textColorSecondary: string;\n      textColorTertiary: string;\n      textColorQuaternary: string;\n      fontSize: number;\n      fontSizeSM: number;\n      lineHeight: number;\n      lineHeightSM: number;\n      borderRadius: number;\n      borderRadiusSM: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n      padding: number;\n      paddingSM: number;\n      margin: number;\n      marginSM: number;\n    };\n    \n    // 下拉菜单组件\n    Dropdown: {\n      colorBgElevated: string;\n      colorBgMask: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorTextTertiary: string;\n      colorTextQuaternary: string;\n      colorBorder: string;\n      colorBorderSecondary: string;\n      colorFill: string;\n      colorFillSecondary: string;\n      colorFillTertiary: string;\n      colorFillQuaternary: string;\n      colorPrimary: string;\n      colorSuccess: string;\n      colorWarning: string;\n      colorError: string;\n      colorInfo: string;\n      colorLink: string;\n      colorLinkHover: string;\n      colorLinkActive: string;\n      borderRadius: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n      padding: number;\n      paddingLG: number;\n      paddingSM: number;\n      paddingXS: number;\n      paddingXXS: number;\n      margin: number;\n      marginLG: number;\n      marginSM: number;\n      marginXS: number;\n      marginXXS: number;\n      fontSize: number;\n      fontSizeLG: number;\n      fontSizeSM: number;\n      lineHeight: number;\n      lineHeightLG: number;\n      lineHeightSM: number;\n      zIndexPopup: number;\n    };\n    \n    // 工具提示组件\n    Tooltip: {\n      colorBgSpotlight: string;\n      colorTextLightSolid: string;\n      colorText: string;\n      colorTextSecondary: string;\n      colorTextTertiary: string;\n      colorTextQuaternary: string;\n      colorBorder: string;\n      colorBorderSecondary: string;\n      colorFill: string;\n      colorFillSecondary: string;\n      colorFillTertiary: string;\n      colorFillQuaternary: string;\n      borderRadius: number;\n      boxShadow: string;\n      boxShadowSecondary: string;\n      padding: number;\n      paddingLG: number;\n      paddingSM: number;\n      paddingXS: number;\n      paddingXXS: number;\n      margin: number;\n      marginLG: number;\n      marginSM: number;\n      marginXS: number;\n      marginXXS: number;\n      fontSize: number;\n      fontSizeLG: number;\n      fontSizeSM: number;\n      lineHeight: number;\n      lineHeightLG: number;\n      lineHeightSM: number;\n      zIndexPopup: number;\n    };\n  };\n}\n\n// 浅色主题\nexport const lightTheme: AntdThemeConfig = {\n  name: 'light',\n  displayName: '浅色主题',\n  description: '明亮清爽的浅色主题，适合日间使用',\n  algorithm: theme.defaultAlgorithm,\n  token: {\n    colorPrimary: blue[6],\n    colorSuccess: green[6],\n    colorWarning: gold[6],\n    colorError: red[6],\n    colorInfo: cyan[6],\n    colorBgBase: '#ffffff',\n    colorBgContainer: '#ffffff',\n    colorBgElevated: '#ffffff',\n    colorBorder: '#d9d9d9',\n    colorText: '#262626',\n    colorTextSecondary: '#8c8c8c',\n    colorTextTertiary: '#bfbfbf',\n    colorTextQuaternary: '#f0f0f0',\n    borderRadius: 6,\n    wireframe: false,\n  },\n  components: {\n    Layout: {\n      bodyBg: '#f5f5f5',\n      headerBg: '#ffffff',\n      siderBg: '#001529',\n    },\n    Menu: {\n      itemBg: 'transparent',\n      itemSelectedBg: blue[6],\n      itemHoverBg: 'rgba(24, 144, 255, 0.1)',\n      itemColor: 'rgba(255, 255, 255, 0.85)',\n      itemSelectedColor: '#ffffff',\n      itemHoverColor: '#ffffff',\n    },\n    Button: {\n      primaryColor: blue[6],\n      defaultBg: '#ffffff',\n      defaultColor: '#262626',\n      defaultBorderColor: '#d9d9d9',\n    },\n    Card: {\n      headerBg: '#fafafa',\n      bodyBg: '#ffffff',\n    },\n  },\n};\n\n// 深色主题\nexport const darkTheme: AntdThemeConfig = {\n  name: 'dark',\n  displayName: '深色主题',\n  description: '护眼深色主题，适合夜间使用',\n  algorithm: theme.darkAlgorithm,\n  token: {\n    colorPrimary: blue[5],\n    colorSuccess: green[5],\n    colorWarning: gold[5],\n    colorError: red[5],\n    colorInfo: cyan[5],\n    colorBgBase: '#141414',\n    colorBgContainer: '#1f1f1f',\n    colorBgElevated: '#262626',\n    colorBorder: '#434343',\n    colorText: '#ffffff',\n    colorTextSecondary: '#a6a6a6',\n    colorTextTertiary: '#737373',\n    colorTextQuaternary: '#404040',\n    borderRadius: 6,\n    wireframe: false,\n  },\n  components: {\n    Layout: {\n      bodyBg: '#141414',\n      headerBg: '#1f1f1f',\n      siderBg: '#001529',\n    },\n    Menu: {\n      itemBg: 'transparent',\n      itemSelectedBg: blue[5],\n      itemHoverBg: 'rgba(24, 144, 255, 0.2)',\n      itemColor: 'rgba(255, 255, 255, 0.85)',\n      itemSelectedColor: '#ffffff',\n      itemHoverColor: '#ffffff',\n    },\n    Button: {\n      primaryColor: blue[5],\n      defaultBg: '#1f1f1f',\n      defaultColor: '#ffffff',\n      defaultBorderColor: '#434343',\n    },\n    Card: {\n      headerBg: '#262626',\n      bodyBg: '#1f1f1f',\n    },\n  },\n};\n\n// 高对比度主题\nexport const highContrastTheme: AntdThemeConfig = {\n  name: 'high-contrast',\n  displayName: '高对比度主题',\n  description: '高对比度主题，提升可访问性',\n  algorithm: theme.defaultAlgorithm,\n  token: {\n    colorPrimary: '#0000ff',\n    colorSuccess: '#008000',\n    colorWarning: '#ff8c00',\n    colorError: '#ff0000',\n    colorInfo: '#0000ff',\n    colorBgBase: '#ffffff',\n    colorBgContainer: '#ffffff',\n    colorBgElevated: '#ffffff',\n    colorBorder: '#000000',\n    colorText: '#000000',\n    colorTextSecondary: '#333333',\n    colorTextTertiary: '#666666',\n    colorTextQuaternary: '#999999',\n    borderRadius: 0,\n    wireframe: true,\n  },\n  components: {\n    Layout: {\n      bodyBg: '#ffffff',\n      headerBg: '#ffffff',\n      siderBg: '#000000',\n    },\n    Menu: {\n      itemBg: 'transparent',\n      itemSelectedBg: '#0000ff',\n      itemHoverBg: 'rgba(0, 0, 255, 0.1)',\n      itemColor: '#ffffff',\n      itemSelectedColor: '#ffffff',\n      itemHoverColor: '#ffffff',\n    },\n    Button: {\n      primaryColor: '#0000ff',\n      defaultBg: '#ffffff',\n      defaultColor: '#000000',\n      defaultBorderColor: '#000000',\n    },\n    Card: {\n      headerBg: '#f0f0f0',\n      bodyBg: '#ffffff',\n    },\n  },\n};\n\n// 紫色主题\nexport const purpleTheme: AntdThemeConfig = {\n  name: 'purple',\n  displayName: '紫色主题',\n  description: '优雅的紫色主题，适合创意工作',\n  algorithm: theme.defaultAlgorithm,\n  token: {\n    colorPrimary: purple[6],\n    colorSuccess: green[6],\n    colorWarning: gold[6],\n    colorError: red[6],\n    colorInfo: cyan[6],\n    colorBgBase: '#ffffff',\n    colorBgContainer: '#ffffff',\n    colorBgElevated: '#ffffff',\n    colorBorder: '#d9d9d9',\n    colorText: '#262626',\n    colorTextSecondary: '#8c8c8c',\n    colorTextTertiary: '#bfbfbf',\n    colorTextQuaternary: '#f0f0f0',\n    borderRadius: 8,\n    wireframe: false,\n  },\n  components: {\n    Layout: {\n      bodyBg: '#faf5ff',\n      headerBg: '#ffffff',\n      siderBg: '#2d1b69',\n    },\n    Menu: {\n      itemBg: 'transparent',\n      itemSelectedBg: purple[6],\n      itemHoverBg: 'rgba(114, 46, 209, 0.1)',\n      itemColor: 'rgba(255, 255, 255, 0.85)',\n      itemSelectedColor: '#ffffff',\n      itemHoverColor: '#ffffff',\n    },\n    Button: {\n      primaryColor: purple[6],\n      defaultBg: '#ffffff',\n      defaultColor: '#262626',\n      defaultBorderColor: '#d9d9d9',\n    },\n    Card: {\n      headerBg: '#f9f0ff',\n      bodyBg: '#ffffff',\n    },\n  },\n};\n\n// 青色主题\nexport const cyanTheme: AntdThemeConfig = {\n  name: 'cyan',\n  displayName: '青色主题',\n  description: '清新的青色主题，适合科技感界面',\n  algorithm: theme.defaultAlgorithm,\n  token: {\n    colorPrimary: cyan[6],\n    colorSuccess: green[6],\n    colorWarning: gold[6],\n    colorError: red[6],\n    colorInfo: cyan[6],\n    colorBgBase: '#ffffff',\n    colorBgContainer: '#ffffff',\n    colorBgElevated: '#ffffff',\n    colorBorder: '#d9d9d9',\n    colorText: '#262626',\n    colorTextSecondary: '#8c8c8c',\n    colorTextTertiary: '#bfbfbf',\n    colorTextQuaternary: '#f0f0f0',\n    borderRadius: 6,\n    wireframe: false,\n  },\n  components: {\n    Layout: {\n      bodyBg: '#f0f9ff',\n      headerBg: '#ffffff',\n      siderBg: '#002329',\n    },\n    Menu: {\n      itemBg: 'transparent',\n      itemSelectedBg: cyan[6],\n      itemHoverBg: 'rgba(13, 202, 240, 0.1)',\n      itemColor: 'rgba(255, 255, 255, 0.85)',\n      itemSelectedColor: '#ffffff',\n      itemHoverColor: '#ffffff',\n    },\n    Button: {\n      primaryColor: cyan[6],\n      defaultBg: '#ffffff',\n      defaultColor: '#262626',\n      defaultBorderColor: '#d9d9d9',\n    },\n    Card: {\n      headerBg: '#e6fffb',\n      bodyBg: '#ffffff',\n    },\n  },\n};\n\n// 可用主题列表\nexport const availableThemes: AntdThemeConfig[] = [\n  lightTheme,\n  darkTheme,\n  highContrastTheme,\n  purpleTheme,\n  cyanTheme,\n];\n\n// 根据主题名称获取主题配置\nexport const getThemeByName = (name: string): AntdThemeConfig | undefined => {\n  return availableThemes.find(theme => theme.name === name);\n};\n\n// 获取默认主题\nexport const getDefaultTheme = (): AntdThemeConfig => {\n  return lightTheme;\n};\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/accessibility.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5720,5723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5720,5723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8498,8501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8498,8501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题可访问性和对比度检查工具\n * 确保文本、图标、颜色与背景的适配性\n */\n\n/**\n * 计算颜色的相对亮度\n */\nexport function getLuminance(r: number, g: number, b: number): number {\n  const [rs, gs, bs] = [r, g, b].map(c => {\n    c = c / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  });\n  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;\n}\n\n/**\n * 计算两个颜色之间的对比度\n */\nexport function getContrastRatio(color1: string, color2: string): number {\n  const hexToRgb = (hex: string) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  };\n\n  const rgb1 = hexToRgb(color1);\n  const rgb2 = hexToRgb(color2);\n\n  if (!rgb1 || !rgb2) return 0;\n\n  const lum1 = getLuminance(rgb1.r, rgb1.g, rgb1.b);\n  const lum2 = getLuminance(rgb2.r, rgb2.g, rgb2.b);\n\n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n\n  return (brightest + 0.05) / (darkest + 0.05);\n}\n\n/**\n * 检查对比度是否符合WCAG标准\n */\nexport function checkContrastRatio(foreground: string, background: string): {\n  ratio: number;\n  aa: boolean;\n  aaa: boolean;\n  level: 'fail' | 'aa' | 'aaa';\n} {\n  const ratio = getContrastRatio(foreground, background);\n  const aa = ratio >= 4.5; // WCAG AA标准\n  const aaa = ratio >= 7; // WCAG AAA标准\n\n  let level: 'fail' | 'aa' | 'aaa' = 'fail';\n  if (aaa) level = 'aaa';\n  else if (aa) level = 'aa';\n\n  return { ratio, aa, aaa, level };\n}\n\n/**\n * 获取最佳文本颜色（基于背景色）\n */\nexport function getOptimalTextColor(backgroundColor: string): string {\n  const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(backgroundColor);\n  if (!rgb) return '#000000';\n\n  const r = parseInt(rgb[1], 16);\n  const g = parseInt(rgb[2], 16);\n  const b = parseInt(rgb[3], 16);\n\n  const luminance = getLuminance(r, g, b);\n  return luminance > 0.5 ? '#000000' : '#ffffff';\n}\n\n/**\n * 获取最佳图标颜色（基于背景色和对比度要求）\n */\nexport function getOptimalIconColor(backgroundColor: string, minContrast: number = 4.5): string {\n  const lightIcon = '#ffffff';\n  const darkIcon = '#000000';\n  const mediumIcon = '#666666';\n\n  const lightContrast = getContrastRatio(lightIcon, backgroundColor);\n  const darkContrast = getContrastRatio(darkIcon, backgroundColor);\n  const mediumContrast = getContrastRatio(mediumIcon, backgroundColor);\n\n  if (lightContrast >= minContrast) return lightIcon;\n  if (darkContrast >= minContrast) return darkIcon;\n  if (mediumContrast >= minContrast) return mediumIcon;\n\n  // 如果都不满足，返回对比度最高的\n  if (lightContrast > darkContrast && lightContrast > mediumContrast) return lightIcon;\n  if (darkContrast > mediumContrast) return darkIcon;\n  return mediumIcon;\n}\n\n/**\n * 生成可访问的颜色调色板\n */\nexport function generateAccessiblePalette(baseColor: string): {\n  primary: string;\n  secondary: string;\n  accent: string;\n  text: string;\n  textSecondary: string;\n  background: string;\n  surface: string;\n  border: string;\n} {\n  const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(baseColor);\n  if (!rgb) {\n    return {\n      primary: '#1890ff',\n      secondary: '#722ed1',\n      accent: '#52c41a',\n      text: '#262626',\n      textSecondary: '#8c8c8c',\n      background: '#ffffff',\n      surface: '#fafafa',\n      border: '#d9d9d9'\n    };\n  }\n\n  const r = parseInt(rgb[1], 16);\n  const g = parseInt(rgb[2], 16);\n  const b = parseInt(rgb[3], 16);\n\n  const luminance = getLuminance(r, g, b);\n  const isLight = luminance > 0.5;\n\n  if (isLight) {\n    // 浅色主题\n    return {\n      primary: baseColor,\n      secondary: adjustBrightness(baseColor, -20),\n      accent: adjustSaturation(baseColor, 20),\n      text: '#262626',\n      textSecondary: '#8c8c8c',\n      background: '#ffffff',\n      surface: '#fafafa',\n      border: '#d9d9d9'\n    };\n  } else {\n    // 深色主题\n    return {\n      primary: baseColor,\n      secondary: adjustBrightness(baseColor, 20),\n      accent: adjustSaturation(baseColor, -20),\n      text: '#ffffff',\n      textSecondary: '#a6a6a6',\n      background: '#141414',\n      surface: '#1f1f1f',\n      border: '#434343'\n    };\n  }\n}\n\n/**\n * 调整颜色亮度\n */\nexport function adjustBrightness(hex: string, percent: number): string {\n  const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!rgb) return hex;\n\n  const r = Math.max(0, Math.min(255, parseInt(rgb[1], 16) + percent));\n  const g = Math.max(0, Math.min(255, parseInt(rgb[2], 16) + percent));\n  const b = Math.max(0, Math.min(255, parseInt(rgb[3], 16) + percent));\n\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n}\n\n/**\n * 调整颜色饱和度\n */\nexport function adjustSaturation(hex: string, percent: number): string {\n  const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!rgb) return hex;\n\n  const r = parseInt(rgb[1], 16) / 255;\n  const g = parseInt(rgb[2], 16) / 255;\n  const b = parseInt(rgb[3], 16) / 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  if (delta === 0) return hex;\n\n  const saturation = delta / max;\n  const newSaturation = Math.max(0, Math.min(1, saturation + (percent / 100)));\n\n  const factor = newSaturation / saturation;\n  const newR = Math.max(0, Math.min(1, r + (r - min) * (factor - 1)));\n  const newG = Math.max(0, Math.min(1, g + (g - min) * (factor - 1)));\n  const newB = Math.max(0, Math.min(1, b + (b - min) * (factor - 1)));\n\n  const finalR = Math.round(newR * 255);\n  const finalG = Math.round(newG * 255);\n  const finalB = Math.round(newB * 255);\n\n  return `#${finalR.toString(16).padStart(2, '0')}${finalG.toString(16).padStart(2, '0')}${finalB.toString(16).padStart(2, '0')}`;\n}\n\n/**\n * 检查主题的可访问性\n */\nexport function checkThemeAccessibility(theme: any): {\n  score: number;\n  issues: Array<{\n    component: string;\n    property: string;\n    issue: string;\n    suggestion: string;\n  }>;\n  recommendations: string[];\n} {\n  const issues: Array<{\n    component: string;\n    property: string;\n    issue: string;\n    suggestion: string;\n  }> = [];\n  const recommendations: string[] = [];\n\n  // 检查主要文本对比度\n  if (theme.token?.colorText && theme.token?.colorBgContainer) {\n    const contrast = checkContrastRatio(theme.token.colorText, theme.token.colorBgContainer);\n    if (!contrast.aa) {\n      issues.push({\n        component: 'Text',\n        property: 'colorText',\n        issue: `文本对比度不足 (${contrast.ratio.toFixed(2)}:1)`,\n        suggestion: `建议使用对比度更高的文本颜色，目标对比度 ≥ 4.5:1`\n      });\n    }\n  }\n\n  // 检查链接对比度\n  if (theme.token?.colorLink && theme.token?.colorBgContainer) {\n    const contrast = checkContrastRatio(theme.token.colorLink, theme.token.colorBgContainer);\n    if (!contrast.aa) {\n      issues.push({\n        component: 'Link',\n        property: 'colorLink',\n        issue: `链接对比度不足 (${contrast.ratio.toFixed(2)}:1)`,\n        suggestion: `建议使用对比度更高的链接颜色，目标对比度 ≥ 4.5:1`\n      });\n    }\n  }\n\n  // 检查按钮对比度\n  if (theme.components?.Button) {\n    const button = theme.components.Button;\n    if (button.defaultColor && button.defaultBg) {\n      const contrast = checkContrastRatio(button.defaultColor, button.defaultBg);\n      if (!contrast.aa) {\n        issues.push({\n          component: 'Button',\n          property: 'defaultColor',\n          issue: `按钮文本对比度不足 (${contrast.ratio.toFixed(2)}:1)`,\n          suggestion: `建议调整按钮文本颜色或背景色以提高对比度`\n        });\n      }\n    }\n  }\n\n  // 检查菜单对比度\n  if (theme.components?.Menu) {\n    const menu = theme.components.Menu;\n    if (menu.itemColor && menu.itemBg) {\n      const contrast = checkContrastRatio(menu.itemColor, menu.itemBg);\n      if (!contrast.aa) {\n        issues.push({\n          component: 'Menu',\n          property: 'itemColor',\n          issue: `菜单项对比度不足 (${contrast.ratio.toFixed(2)}:1)`,\n          suggestion: `建议调整菜单项文本颜色或背景色以提高对比度`\n        });\n      }\n    }\n  }\n\n  // 计算可访问性分数\n  const totalChecks = 4; // 主要检查项数量\n  const passedChecks = totalChecks - issues.length;\n  const score = Math.round((passedChecks / totalChecks) * 100);\n\n  // 生成建议\n  if (score < 80) {\n    recommendations.push('建议全面检查颜色对比度，确保符合WCAG AA标准');\n  }\n  if (issues.some(issue => issue.component === 'Text')) {\n    recommendations.push('建议使用对比度检查工具验证文本可读性');\n  }\n  if (issues.some(issue => issue.component === 'Link')) {\n    recommendations.push('建议为链接提供足够的视觉区分度');\n  }\n  if (issues.some(issue => issue.component === 'Button')) {\n    recommendations.push('建议确保按钮在各种状态下都有足够的对比度');\n  }\n\n  return { score, issues, recommendations };\n}\n\n/**\n * 生成可访问性报告\n */\nexport function generateAccessibilityReport(theme: any): string {\n  const accessibility = checkThemeAccessibility(theme);\n  \n  let report = `# 主题可访问性报告\\n\\n`;\n  report += `## 📊 可访问性分数: ${accessibility.score}/100\\n\\n`;\n  \n  if (accessibility.score >= 90) {\n    report += `✅ **优秀** - 主题具有良好的可访问性\\n\\n`;\n  } else if (accessibility.score >= 80) {\n    report += `⚠️ **良好** - 主题基本符合可访问性要求，但还有改进空间\\n\\n`;\n  } else if (accessibility.score >= 60) {\n    report += `❌ **需要改进** - 主题存在可访问性问题，建议进行优化\\n\\n`;\n  } else {\n    report += `🚫 **不合格** - 主题存在严重的可访问性问题，必须进行修复\\n\\n`;\n  }\n\n  if (accessibility.issues.length > 0) {\n    report += `## 🚨 发现的问题\\n\\n`;\n    accessibility.issues.forEach((issue, index) => {\n      report += `${index + 1}. **${issue.component}** - ${issue.property}\\n`;\n      report += `   - 问题: ${issue.issue}\\n`;\n      report += `   - 建议: ${issue.suggestion}\\n\\n`;\n    });\n  }\n\n  if (accessibility.recommendations.length > 0) {\n    report += `## 💡 改进建议\\n\\n`;\n    accessibility.recommendations.forEach((rec, index) => {\n      report += `${index + 1}. ${rec}\\n`;\n    });\n    report += `\\n`;\n  }\n\n  report += `## 📋 检查标准\\n\\n`;\n  report += `- **WCAG AA**: 对比度 ≥ 4.5:1 (正常文本)\\n`;\n  report += `- **WCAG AAA**: 对比度 ≥ 7:1 (增强可访问性)\\n`;\n  report += `- **大文本**: 对比度 ≥ 3:1 (18pt+ 或 14pt+ 粗体)\\n\\n`;\n\n  return report;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/auto-discovery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3289,3292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3289,3292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包自动发现功能\n * 自动扫描和发现可用的主题包\n */\n\nimport type { ThemePackageConfig } from './types';\n\n/**\n * 主题包自动发现器\n */\nexport class ThemePackageAutoDiscovery {\n  private static instance: ThemePackageAutoDiscovery;\n  private discoveredPackages: Map<string, ThemePackageConfig> = new Map();\n  private discoveryCache: Map<string, boolean> = new Map();\n\n  /**\n   * 获取单例实例\n   */\n  public static getInstance(): ThemePackageAutoDiscovery {\n    if (!ThemePackageAutoDiscovery.instance) {\n      ThemePackageAutoDiscovery.instance = new ThemePackageAutoDiscovery();\n    }\n    return ThemePackageAutoDiscovery.instance;\n  }\n\n  /**\n   * 自动发现所有可用的主题包\n   */\n  public async discoverAllPackages(): Promise<ThemePackageConfig[]> {\n    // 如果已经发现过，直接返回缓存的结果\n    if (this.discoveredPackages.size > 0) {\n      return Array.from(this.discoveredPackages.values());\n    }\n\n    const discoveredPackages: ThemePackageConfig[] = [];\n    \n    // 预定义的主题包列表（可以扩展为动态扫描）\n    const knownPackages = [\n      { id: 'light', path: '../packages/light/index.ts' },\n      { id: 'dark', path: '../packages/dark/index.ts' },\n      // 可以添加更多主题包\n      // { id: 'purple', path: '../packages/purple/index.ts' },\n      // { id: 'cyan', path: '../packages/cyan/index.ts' },\n      // { id: 'high-contrast', path: '../packages/high-contrast/index.ts' },\n    ];\n\n    for (const packageInfo of knownPackages) {\n      try {\n        // 检查是否已经发现过\n        if (this.discoveredPackages.has(packageInfo.id)) {\n          const cachedPackage = this.discoveredPackages.get(packageInfo.id);\n          if (cachedPackage) {\n            discoveredPackages.push(cachedPackage);\n          }\n          continue;\n        }\n\n        const themePackage = await this.discoverPackage(packageInfo.id, packageInfo.path);\n        if (themePackage) {\n          discoveredPackages.push(themePackage);\n          this.discoveredPackages.set(packageInfo.id, themePackage);\n        }\n      } catch (error) {\n        console.debug(`Failed to discover theme package '${packageInfo.id}':`, error);\n      }\n    }\n\n    return discoveredPackages;\n  }\n\n  /**\n   * 发现单个主题包\n   */\n  private async discoverPackage(packageId: string, packagePath: string): Promise<ThemePackageConfig | null> {\n    try {\n      // 检查缓存\n      if (this.discoveryCache.has(packageId)) {\n        return this.discoveredPackages.get(packageId) || null;\n      }\n\n      // 动态导入主题包\n      const module = await import(packagePath);\n      \n      if (!module.default) {\n        throw new Error(`Theme package '${packageId}' does not export a default configuration`);\n      }\n\n      const themePackage: ThemePackageConfig = module.default;\n      \n      // 验证主题包结构\n      if (!this.validateThemePackage(themePackage)) {\n        throw new Error(`Invalid theme package structure for '${packageId}'`);\n      }\n\n      // 缓存结果\n      this.discoveryCache.set(packageId, true);\n      this.discoveredPackages.set(packageId, themePackage);\n\n      console.log(`✅ Discovered theme package: ${themePackage.meta.displayName} (${themePackage.meta.id})`);\n      \n      return themePackage;\n    } catch (error) {\n      console.debug(`❌ Failed to discover theme package '${packageId}':`, error);\n      this.discoveryCache.set(packageId, false);\n      return null;\n    }\n  }\n\n  /**\n   * 验证主题包结构\n   */\n  private validateThemePackage(themePackage: any): boolean {\n    return (\n      themePackage &&\n      themePackage.meta &&\n      typeof themePackage.meta.id === 'string' &&\n      typeof themePackage.meta.name === 'string' &&\n      typeof themePackage.meta.displayName === 'string' &&\n      typeof themePackage.meta.description === 'string' &&\n      themePackage.token &&\n      themePackage.components\n    );\n  }\n\n  /**\n   * 获取已发现的主题包\n   */\n  public getDiscoveredPackages(): ThemePackageConfig[] {\n    return Array.from(this.discoveredPackages.values());\n  }\n\n  /**\n   * 获取主题包信息\n   */\n  public getPackageInfo(packageId: string): ThemePackageConfig | null {\n    return this.discoveredPackages.get(packageId) || null;\n  }\n\n  /**\n   * 检查主题包是否存在\n   */\n  public hasPackage(packageId: string): boolean {\n    return this.discoveredPackages.has(packageId);\n  }\n\n  /**\n   * 获取主题包统计信息\n   */\n  public getDiscoveryStats() {\n    return {\n      totalDiscovered: this.discoveredPackages.size,\n      packages: Array.from(this.discoveredPackages.keys()),\n      cacheSize: this.discoveryCache.size,\n    };\n  }\n\n  /**\n   * 清除发现缓存\n   */\n  public clearCache(): void {\n    this.discoveredPackages.clear();\n    this.discoveryCache.clear();\n  }\n\n  /**\n   * 重新发现主题包\n   */\n  public async rediscover(): Promise<ThemePackageConfig[]> {\n    this.clearCache();\n    return await this.discoverAllPackages();\n  }\n}\n\n// 导出单例实例\nexport const themePackageAutoDiscovery = ThemePackageAutoDiscovery.getInstance();\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/loader.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationResult' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'packagePath' is assigned a value but never used.","line":234,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":234,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":239,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包加载器\n * 基于 Spec-Kit 方法的动态主题包加载系统\n */\n\nimport type {\n  ThemePackageConfig,\n  ThemePackageLoader,\n  ValidationResult,\n  ThemePackageOptions,\n} from './types';\nimport { themePackageValidator } from './validator';\nimport { themePackageRegistry } from './registry';\n\nexport class ThemePackageLoaderImpl implements ThemePackageLoader {\n  private options: ThemePackageOptions;\n  private cache: Map<string, ThemePackageConfig> = new Map();\n  private loadingPromises: Map<string, Promise<ThemePackageConfig>> = new Map();\n\n  constructor(options: ThemePackageOptions = {}) {\n    this.options = {\n      autoLoad: true,\n      validateOnLoad: true,\n      cacheEnabled: true,\n      cacheTimeout: 5 * 60 * 1000, // 5 minutes\n      fallbackPackage: 'light',\n      strictMode: false,\n      ...options,\n    };\n  }\n\n  /**\n   * 加载单个主题包\n   */\n  async load(packageId: string): Promise<ThemePackageConfig> {\n    // 检查缓存\n    if (this.options.cacheEnabled && this.cache.has(packageId)) {\n      const cached = this.cache.get(packageId)!;\n      if (this.isCacheValid(cached)) {\n        return cached;\n      } else {\n        this.cache.delete(packageId);\n      }\n    }\n\n    // 检查是否正在加载\n    if (this.loadingPromises.has(packageId)) {\n      return this.loadingPromises.get(packageId)!;\n    }\n\n    // 创建加载Promise\n    const loadPromise = this.loadPackageInternal(packageId);\n    this.loadingPromises.set(packageId, loadPromise);\n\n    try {\n      const config = await loadPromise;\n      \n      // 缓存结果\n      if (this.options.cacheEnabled) {\n        this.cache.set(packageId, config);\n      }\n      \n      return config;\n    } finally {\n      this.loadingPromises.delete(packageId);\n    }\n  }\n\n  /**\n   * 加载所有主题包\n   */\n  async loadAll(): Promise<ThemePackageConfig[]> {\n    const packageIds = this.getAvailablePackageIds();\n    const loadPromises = packageIds.map(id => this.load(id));\n    \n    try {\n      const configs = await Promise.all(loadPromises);\n      return configs.filter(config => config !== null);\n    } catch (error) {\n      console.error('Error loading theme packages:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 验证主题包配置\n   */\n  validate(config: ThemePackageConfig): boolean {\n    const result = themePackageValidator.validate(config);\n    \n    if (!result.valid && this.options.strictMode) {\n      throw new Error(`Theme package validation failed: ${result.errors.join(', ')}`);\n    }\n    \n    return result.valid;\n  }\n\n  /**\n   * 注册主题包\n   */\n  register(config: ThemePackageConfig): void {\n    // 验证配置\n    if (this.options.validateOnLoad && !this.validate(config)) {\n      throw new Error('Invalid theme package configuration');\n    }\n\n    // 注册到注册表\n    themePackageRegistry.register(config);\n    \n    // 缓存配置\n    if (this.options.cacheEnabled) {\n      this.cache.set(config.meta.id, config);\n    }\n  }\n\n  /**\n   * 注销主题包\n   */\n  unregister(packageId: string): void {\n    // 从注册表注销\n    themePackageRegistry.unregister(packageId);\n    \n    // 从缓存移除\n    this.cache.delete(packageId);\n  }\n\n  /**\n   * 获取已注册的主题包\n   */\n  getRegistered(): ThemePackageConfig[] {\n    return themePackageRegistry.getAll();\n  }\n\n  /**\n   * 预加载主题包\n   */\n  async preload(packageIds: string[]): Promise<void> {\n    const loadPromises = packageIds.map(id => this.load(id));\n    await Promise.all(loadPromises);\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * 获取缓存状态\n   */\n  getCacheStatus(): {\n    size: number;\n    keys: string[];\n    hitRate: number;\n  } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n      hitRate: 0, // 这里可以实现命中率统计\n    };\n  }\n\n  /**\n   * 内部加载方法\n   */\n  private async loadPackageInternal(packageId: string): Promise<ThemePackageConfig> {\n    try {\n      // 首先检查注册表\n      const registered = themePackageRegistry.get(packageId);\n      if (registered) {\n        return registered;\n      }\n\n      // 尝试从文件系统加载\n      const config = await this.loadFromFileSystem(packageId);\n      \n      // 验证配置\n      if (this.options.validateOnLoad && !this.validate(config)) {\n        throw new Error(`Invalid theme package configuration for '${packageId}'`);\n      }\n\n      // 自动注册\n      if (this.options.autoLoad) {\n        themePackageRegistry.register(config);\n      }\n\n      return config;\n    } catch (error) {\n      console.error(`Failed to load theme package '${packageId}':`, error);\n      \n      // 尝试加载备用主题包\n      if (this.options.fallbackPackage && packageId !== this.options.fallbackPackage) {\n        console.log(`Loading fallback theme package '${this.options.fallbackPackage}'`);\n        return this.load(this.options.fallbackPackage);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * 从文件系统加载主题包\n   */\n  private async loadFromFileSystem(packageId: string): Promise<ThemePackageConfig> {\n    try {\n      // 动态导入主题包\n      const module = await import(`../packages/${packageId}/index.ts`);\n      \n      if (!module.default) {\n        throw new Error(`Theme package '${packageId}' does not export a default configuration`);\n      }\n      \n      return module.default;\n    } catch (error) {\n      throw new Error(`Failed to load theme package '${packageId}' from file system: ${error}`);\n    }\n  }\n\n  /**\n   * 获取可用的主题包ID列表\n   * 自动发现并返回所有可用的主题包\n   */\n  private getAvailablePackageIds(): string[] {\n    // 自动发现主题包\n    const availablePackages: string[] = [];\n    \n    // 尝试动态导入所有可能的主题包\n    const possiblePackages = ['light', 'dark', 'purple', 'cyan', 'high-contrast'];\n    \n    for (const packageId of possiblePackages) {\n      try {\n        // 检查主题包是否存在（通过尝试导入）\n        const packagePath = `../packages/${packageId}/index.ts`;\n        // 这里我们使用静态列表，但可以扩展为动态发现\n        if (['light', 'dark'].includes(packageId)) {\n          availablePackages.push(packageId);\n        }\n      } catch (error) {\n        // 主题包不存在，跳过\n        console.debug(`Theme package '${packageId}' not found, skipping...`);\n      }\n    }\n    \n    return availablePackages;\n  }\n\n  /**\n   * 检查缓存是否有效\n   */\n  private isCacheValid(config: ThemePackageConfig): boolean {\n    if (!this.options.cacheTimeout) {\n      return true;\n    }\n    \n    const now = Date.now();\n    const updatedAt = new Date(config.meta.updatedAt).getTime();\n    \n    return (now - updatedAt) < this.options.cacheTimeout;\n  }\n\n  /**\n   * 更新选项\n   */\n  updateOptions(newOptions: Partial<ThemePackageOptions>): void {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  /**\n   * 获取当前选项\n   */\n  getOptions(): ThemePackageOptions {\n    return { ...this.options };\n  }\n\n  /**\n   * 重新加载主题包\n   */\n  async reload(packageId: string): Promise<ThemePackageConfig> {\n    // 清除缓存\n    this.cache.delete(packageId);\n    \n    // 重新加载\n    return this.load(packageId);\n  }\n\n  /**\n   * 批量重新加载\n   */\n  async reloadAll(): Promise<ThemePackageConfig[]> {\n    // 清除所有缓存\n    this.clearCache();\n    \n    // 重新加载所有主题包\n    return this.loadAll();\n  }\n\n  /**\n   * 检查主题包是否存在\n   */\n  async exists(packageId: string): Promise<boolean> {\n    try {\n      await this.load(packageId);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 获取主题包信息\n   */\n  async getPackageInfo(packageId: string): Promise<{\n    exists: boolean;\n    loaded: boolean;\n    cached: boolean;\n    config?: ThemePackageConfig;\n  }> {\n    const exists = await this.exists(packageId);\n    const loaded = themePackageRegistry.has(packageId);\n    const cached = this.cache.has(packageId);\n    const config = themePackageRegistry.get(packageId);\n\n    return {\n      exists,\n      loaded,\n      cached,\n      config,\n    };\n  }\n}\n\n// 创建默认加载器实例\nexport const themePackageLoader = new ThemePackageLoaderImpl();\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/menu-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/registry.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":15,"column":34,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":15,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":272,"column":31,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":272,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":279,"column":32,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":279,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6900,6903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6900,6903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包注册表\n * 基于 Spec-Kit 方法的主题包注册系统\n */\n\nimport type {\n  ThemePackageConfig,\n  ThemePackageRegistry,\n  ValidationResult,\n} from './types';\nimport { themePackageValidator } from './validator';\n\nexport class ThemePackageRegistryImpl implements ThemePackageRegistry {\n  private packages: Map<string, ThemePackageConfig> = new Map();\n  private listeners: Map<string, Function[]> = new Map();\n\n  /**\n   * 注册主题包\n   */\n  register(config: ThemePackageConfig, overwrite: boolean = false): void {\n    // 验证主题包配置\n    const validation = themePackageValidator.validate(config);\n    if (!validation.valid) {\n      throw new Error(`Invalid theme package configuration: ${validation.errors.join(', ')}`);\n    }\n\n    // 检查ID是否已存在\n    if (this.packages.has(config.meta.id) && !overwrite) {\n      throw new Error(`Theme package with ID '${config.meta.id}' already exists`);\n    }\n\n    const isUpdate = this.packages.has(config.meta.id);\n    \n    // 注册主题包\n    this.packages.set(config.meta.id, config);\n    \n    // 触发相应事件\n    if (isUpdate) {\n      this.emit('packageUpdated', config);\n      console.log(`Theme package '${config.meta.id}' updated successfully`);\n    } else {\n      this.emit('packageRegistered', config);\n      console.log(`Theme package '${config.meta.id}' registered successfully`);\n    }\n  }\n\n  /**\n   * 注销主题包\n   */\n  unregister(packageId: string): void {\n    if (!this.packages.has(packageId)) {\n      throw new Error(`Theme package with ID '${packageId}' not found`);\n    }\n\n    this.packages.delete(packageId);\n    \n    // 触发注销事件\n    this.emit('packageUnregistered', packageId);\n    \n    console.log(`Theme package '${packageId}' unregistered successfully`);\n  }\n\n  /**\n   * 获取主题包\n   */\n  get(packageId: string): ThemePackageConfig | undefined {\n    return this.packages.get(packageId);\n  }\n\n  /**\n   * 获取所有主题包\n   */\n  getAll(): ThemePackageConfig[] {\n    return Array.from(this.packages.values());\n  }\n\n  /**\n   * 检查主题包是否存在\n   */\n  has(packageId: string): boolean {\n    return this.packages.has(packageId);\n  }\n\n  /**\n   * 清空所有主题包\n   */\n  clear(): void {\n    const packageIds = Array.from(this.packages.keys());\n    this.packages.clear();\n    \n    // 触发清空事件\n    packageIds.forEach(id => {\n      this.emit('packageUnregistered', id);\n    });\n    \n    console.log('All theme packages cleared');\n  }\n\n  /**\n   * 获取主题包数量\n   */\n  size(): number {\n    return this.packages.size;\n  }\n\n  /**\n   * 获取所有主题包ID\n   */\n  getPackageIds(): string[] {\n    return Array.from(this.packages.keys());\n  }\n\n  /**\n   * 按分类获取主题包\n   */\n  getByCategory(category: string): ThemePackageConfig[] {\n    return this.getAll().filter(pkg => pkg.meta.category === category);\n  }\n\n  /**\n   * 按标签获取主题包\n   */\n  getByTag(tag: string): ThemePackageConfig[] {\n    return this.getAll().filter(pkg => pkg.meta.tags.includes(tag));\n  }\n\n  /**\n   * 搜索主题包\n   */\n  search(query: string): ThemePackageConfig[] {\n    const lowerQuery = query.toLowerCase();\n    return this.getAll().filter(pkg => \n      pkg.meta.name.toLowerCase().includes(lowerQuery) ||\n      pkg.meta.displayName.toLowerCase().includes(lowerQuery) ||\n      pkg.meta.description.toLowerCase().includes(lowerQuery) ||\n      pkg.meta.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  /**\n   * 更新主题包\n   */\n  update(packageId: string, updates: Partial<ThemePackageConfig>): void {\n    const existing = this.packages.get(packageId);\n    if (!existing) {\n      throw new Error(`Theme package with ID '${packageId}' not found`);\n    }\n\n    // 合并更新\n    const updated = { ...existing, ...updates };\n    \n    // 验证更新后的配置\n    const validation = themePackageValidator.validate(updated);\n    if (!validation.valid) {\n      throw new Error(`Invalid updated theme package configuration: ${validation.errors.join(', ')}`);\n    }\n\n    // 更新主题包\n    this.packages.set(packageId, updated);\n    \n    // 触发更新事件\n    this.emit('packageUpdated', updated);\n    \n    console.log(`Theme package '${packageId}' updated successfully`);\n  }\n\n  /**\n   * 克隆主题包\n   */\n  clone(packageId: string, newId: string, newName?: string): void {\n    const original = this.packages.get(packageId);\n    if (!original) {\n      throw new Error(`Theme package with ID '${packageId}' not found`);\n    }\n\n    // 创建克隆\n    const cloned: ThemePackageConfig = {\n      ...original,\n      meta: {\n        ...original.meta,\n        id: newId,\n        name: newName || `${original.meta.name} (Copy)`,\n        displayName: newName || `${original.meta.displayName} (Copy)`,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      },\n    };\n\n    // 注册克隆的主题包\n    this.register(cloned);\n    \n    console.log(`Theme package '${packageId}' cloned as '${newId}'`);\n  }\n\n  /**\n   * 导出主题包配置\n   */\n  export(packageId: string): string {\n    const config = this.packages.get(packageId);\n    if (!config) {\n      throw new Error(`Theme package with ID '${packageId}' not found`);\n    }\n\n    return JSON.stringify(config, null, 2);\n  }\n\n  /**\n   * 导入主题包配置\n   */\n  import(json: string): void {\n    try {\n      const config: ThemePackageConfig = JSON.parse(json);\n      this.register(config);\n    } catch (error) {\n      throw new Error(`Failed to import theme package: ${error}`);\n    }\n  }\n\n  /**\n   * 验证主题包\n   */\n  validate(packageId: string): ValidationResult {\n    const config = this.packages.get(packageId);\n    if (!config) {\n      return {\n        valid: false,\n        errors: [`Theme package with ID '${packageId}' not found`],\n        warnings: [],\n      };\n    }\n\n    return themePackageValidator.validate(config);\n  }\n\n  /**\n   * 获取主题包统计信息\n   */\n  getStats(): {\n    total: number;\n    byCategory: Record<string, number>;\n    byAuthor: Record<string, number>;\n    recentlyUpdated: ThemePackageConfig[];\n  } {\n    const packages = this.getAll();\n    const byCategory: Record<string, number> = {};\n    const byAuthor: Record<string, number> = {};\n    \n    packages.forEach(pkg => {\n      // 按分类统计\n      byCategory[pkg.meta.category] = (byCategory[pkg.meta.category] || 0) + 1;\n      \n      // 按作者统计\n      byAuthor[pkg.meta.author] = (byAuthor[pkg.meta.author] || 0) + 1;\n    });\n\n    // 最近更新的主题包\n    const recentlyUpdated = packages\n      .sort((a, b) => new Date(b.meta.updatedAt).getTime() - new Date(a.meta.updatedAt).getTime())\n      .slice(0, 5);\n\n    return {\n      total: packages.length,\n      byCategory,\n      byAuthor,\n      recentlyUpdated,\n    };\n  }\n\n  /**\n   * 事件监听器管理\n   */\n  on(event: string, listener: Function): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(listener);\n  }\n\n  off(event: string, listener: Function): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      const index = eventListeners.indexOf(listener);\n      if (index > -1) {\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, ...args: any[]): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach(listener => {\n        try {\n          listener(...args);\n        } catch (error) {\n          console.error(`Error in theme package event listener for '${event}':`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 清理所有事件监听器\n   */\n  removeAllListeners(): void {\n    this.listeners.clear();\n  }\n}\n\n// 创建默认注册表实例\nexport const themePackageRegistry = new ThemePackageRegistryImpl();\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/style-applier.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":57,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":57,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":58,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":58,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 样式应用器\n * 将主题包生成的CSS样式应用到DOM元素\n */\n\nimport type { ThemePackageConfig } from './types';\nimport { generateThemeCSS } from './style-generator';\nimport type { StyleGeneratorOptions } from './style-generator';\n\nexport interface StyleApplierOptions {\n  targetSelector?: string;\n  insertPosition?: 'head' | 'body';\n  replaceExisting?: boolean;\n  minify?: boolean;\n}\n\nexport class StyleApplier {\n  private theme: ThemePackageConfig;\n  private options: StyleApplierOptions;\n  private styleElement: HTMLStyleElement | null = null;\n\n  constructor(theme: ThemePackageConfig, options: StyleApplierOptions = {}) {\n    this.theme = theme;\n    this.options = {\n      targetSelector: 'body',\n      insertPosition: 'head',\n      replaceExisting: true,\n      minify: false,\n      ...options,\n    };\n  }\n\n  /**\n   * 应用主题样式到DOM\n   */\n  apply(): void {\n    // 先应用主题类名，确保立即生效\n    this.applyThemeClass();\n    \n    // 然后生成并注入CSS\n    const css = this.generateCSS();\n    this.injectCSS(css);\n    \n    // 立即强制样式重新计算\n    this.forceStyleRecalculation();\n  }\n  \n  /**\n   * 强制样式重新计算\n   */\n  private forceStyleRecalculation(): void {\n    // 触发重排和重绘\n    const root = document.documentElement;\n    const body = document.body;\n    \n    if (root && body) {\n      root.offsetHeight;\n      body.offsetHeight;\n    }\n  }\n\n  /**\n   * 移除主题样式\n   */\n  remove(): void {\n    if (this.styleElement) {\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n    this.removeThemeClass();\n  }\n\n  /**\n   * 更新主题样式\n   */\n  update(newTheme: ThemePackageConfig): void {\n    this.theme = newTheme;\n    this.apply();\n  }\n\n  /**\n   * 生成CSS\n   */\n  private generateCSS(): string {\n    const generatorOptions: StyleGeneratorOptions = {\n      includeLayout: true,\n      includeComponents: true,\n      includeAnimations: true,\n      includeResponsive: true,\n      minify: this.options.minify,\n    };\n\n    return generateThemeCSS(this.theme, generatorOptions);\n  }\n\n  /**\n   * 注入CSS到DOM\n   */\n  private injectCSS(css: string): void {\n    // 移除现有的样式\n    if (this.styleElement) {\n      this.styleElement.remove();\n    }\n\n    // 创建新的样式元素\n    this.styleElement = document.createElement('style');\n    this.styleElement.id = `theme-${this.theme.meta.id}-styles`;\n    this.styleElement.type = 'text/css';\n    this.styleElement.textContent = css;\n\n    // 插入到指定位置\n    const targetElement = this.options.insertPosition === 'head' \n      ? document.head \n      : document.body;\n    \n    targetElement.appendChild(this.styleElement);\n  }\n\n  /**\n   * 应用主题类名\n   */\n  private applyThemeClass(): void {\n    const targetElement = document.querySelector(this.options.targetSelector!);\n    const rootElement = document.documentElement;\n    const bodyElement = document.body;\n    \n    const themeClass = `${this.theme.meta.id}-theme`;\n    \n    // 立即移除所有旧主题类\n    const allThemeClasses = ['light-theme', 'dark-theme', 'high-contrast-theme', 'purple-theme', 'cyan-theme'];\n    \n    // 应用到目标元素\n    if (targetElement) {\n      allThemeClasses.forEach(cls => targetElement.classList.remove(cls));\n      targetElement.classList.add(themeClass);\n    }\n    \n    // 应用到根元素\n    allThemeClasses.forEach(cls => rootElement.classList.remove(cls));\n    rootElement.classList.add(themeClass);\n    \n    // 应用到body元素\n    allThemeClasses.forEach(cls => bodyElement.classList.remove(cls));\n    bodyElement.classList.add(themeClass);\n    \n    // 立即设置内联样式确保背景色立即生效\n    const backgroundColor = this.theme.token.colorBgLayout || \n      (this.theme.meta.id === 'dark' ? '#141414' : '#f5f5f5');\n    \n    rootElement.style.backgroundColor = backgroundColor;\n    bodyElement.style.backgroundColor = backgroundColor;\n    \n    console.log(`Immediately applied theme class: ${themeClass} with background: ${backgroundColor}`);\n  }\n\n  /**\n   * 移除主题类名\n   */\n  private removeThemeClass(): void {\n    const targetElement = document.querySelector(this.options.targetSelector!);\n    if (targetElement) {\n      targetElement.classList.remove(`${this.theme.meta.id}-theme`);\n    }\n    \n    // 同时从html元素移除\n    document.documentElement.classList.remove(`${this.theme.meta.id}-theme`);\n  }\n\n  /**\n   * 获取当前应用的CSS\n   */\n  getAppliedCSS(): string | null {\n    return this.styleElement?.textContent || null;\n  }\n\n  /**\n   * 检查样式是否已应用\n   */\n  isApplied(): boolean {\n    return this.styleElement !== null && document.contains(this.styleElement);\n  }\n}\n\n/**\n * 创建样式应用器实例\n */\nexport function createStyleApplier(\n  theme: ThemePackageConfig,\n  options?: StyleApplierOptions\n): StyleApplier {\n  return new StyleApplier(theme, options);\n}\n\n/**\n * 应用主题样式\n */\nexport function applyThemeStyles(\n  theme: ThemePackageConfig,\n  options?: StyleApplierOptions\n): StyleApplier {\n  const applier = createStyleApplier(theme, options);\n  applier.apply();\n  return applier;\n}\n\n/**\n * 全局样式应用器管理器\n */\nexport class GlobalStyleManager {\n  private static instance: GlobalStyleManager;\n  private currentApplier: StyleApplier | null = null;\n\n  private constructor() {}\n\n  static getInstance(): GlobalStyleManager {\n    if (!GlobalStyleManager.instance) {\n      GlobalStyleManager.instance = new GlobalStyleManager();\n    }\n    return GlobalStyleManager.instance;\n  }\n\n  /**\n   * 应用主题\n   */\n  applyTheme(theme: ThemePackageConfig, options?: StyleApplierOptions): void {\n    // 移除当前主题\n    if (this.currentApplier) {\n      this.currentApplier.remove();\n    }\n\n    // 应用新主题\n    this.currentApplier = createStyleApplier(theme, options);\n    this.currentApplier.apply();\n  }\n\n  /**\n   * 获取当前主题\n   */\n  getCurrentTheme(): ThemePackageConfig | null {\n    return this.currentApplier ? this.currentApplier['theme'] : null;\n  }\n\n  /**\n   * 移除当前主题\n   */\n  removeCurrentTheme(): void {\n    if (this.currentApplier) {\n      this.currentApplier.remove();\n      this.currentApplier = null;\n    }\n  }\n}\n\n/**\n * 获取全局样式管理器实例\n */\nexport function getGlobalStyleManager(): GlobalStyleManager {\n  return GlobalStyleManager.getInstance();\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/style-generator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThemeToken' is defined but never used.","line":6,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 样式生成器\n * 根据主题包配置生成完整的CSS样式\n */\n\nimport type { ThemePackageConfig, ThemeToken } from './types';\n\nexport interface StyleGeneratorOptions {\n  includeLayout?: boolean;\n  includeComponents?: boolean;\n  includeAnimations?: boolean;\n  includeResponsive?: boolean;\n  minify?: boolean;\n}\n\nexport class StyleGenerator {\n  private theme: ThemePackageConfig;\n  private options: StyleGeneratorOptions;\n\n  constructor(theme: ThemePackageConfig, options: StyleGeneratorOptions = {}) {\n    this.theme = theme;\n    this.options = {\n      includeLayout: true,\n      includeComponents: true,\n      includeAnimations: true,\n      includeResponsive: true,\n      minify: false,\n      ...options,\n    };\n  }\n\n  /**\n   * 生成完整的CSS样式\n   */\n  generateCSS(): string {\n    const styles: string[] = [];\n\n    // 生成CSS变量\n    styles.push(this.generateCSSVariables());\n\n    // 生成布局样式\n    if (this.options.includeLayout) {\n      styles.push(this.generateLayoutStyles());\n    }\n\n    // 生成组件样式\n    if (this.options.includeComponents) {\n      styles.push(this.generateComponentStyles());\n    }\n\n    // 生成动画样式\n    if (this.options.includeAnimations) {\n      styles.push(this.generateAnimationStyles());\n    }\n\n    // 生成响应式样式\n    if (this.options.includeResponsive) {\n      styles.push(this.generateResponsiveStyles());\n    }\n\n    return this.options.minify ? this.minifyCSS(styles.join('\\n')) : styles.join('\\n');\n  }\n\n  /**\n   * 生成CSS变量\n   */\n  private generateCSSVariables(): string {\n    const variables: string[] = [];\n    const token = this.theme.token;\n\n    // 基础颜色变量\n    variables.push(`  /* 主题: ${this.theme.meta.displayName} */`);\n    variables.push(`  --theme-primary: ${token.colorPrimary};`);\n    variables.push(`  --theme-success: ${token.colorSuccess};`);\n    variables.push(`  --theme-warning: ${token.colorWarning};`);\n    variables.push(`  --theme-error: ${token.colorError};`);\n    variables.push(`  --theme-info: ${token.colorInfo};`);\n\n    // 布局变量\n    if (token.layoutSidebarWidth) {\n      variables.push(`  --layout-sidebar-width: ${token.layoutSidebarWidth}px;`);\n    }\n    if (token.layoutSidebarCollapsedWidth) {\n      variables.push(`  --layout-sidebar-collapsed-width: ${token.layoutSidebarCollapsedWidth}px;`);\n    }\n    if (token.layoutSidebarHeaderHeight) {\n      variables.push(`  --layout-sidebar-header-height: ${token.layoutSidebarHeaderHeight}px;`);\n    }\n    if (token.layoutTopMenuHeight) {\n      variables.push(`  --layout-top-menu-height: ${token.layoutTopMenuHeight}px;`);\n    }\n\n    // Logo变量\n    if (token.logoBackgroundColor) {\n      variables.push(`  --logo-background-color: ${token.logoBackgroundColor};`);\n    }\n    if (token.logoTextColor) {\n      variables.push(`  --logo-text-color: ${token.logoTextColor};`);\n    }\n    if (token.logoIconColor) {\n      variables.push(`  --logo-icon-color: ${token.logoIconColor};`);\n    }\n\n    // 菜单变量\n    if (token.menuBackgroundColor) {\n      variables.push(`  --menu-background-color: ${token.menuBackgroundColor};`);\n    }\n    if (token.menuItemColor) {\n      variables.push(`  --menu-item-color: ${token.menuItemColor};`);\n    }\n    if (token.menuItemHoverColor) {\n      variables.push(`  --menu-item-hover-color: ${token.menuItemHoverColor};`);\n    }\n    if (token.menuItemSelectedColor) {\n      variables.push(`  --menu-item-selected-color: ${token.menuItemSelectedColor};`);\n    }\n    \n    // 顶部菜单专用变量\n    if (token.topMenuHeight) {\n      variables.push(`  --top-menu-height: ${token.topMenuHeight}px;`);\n    }\n    if (token.topMenuItemMargin) {\n      variables.push(`  --top-menu-item-margin: ${token.topMenuItemMargin}px;`);\n    }\n    if (token.topMenuItemPadding) {\n      variables.push(`  --top-menu-item-padding: ${token.topMenuItemPadding}px;`);\n    }\n    if (token.topMenuContainerPadding) {\n      variables.push(`  --top-menu-container-padding: ${token.topMenuContainerPadding}px;`);\n    }\n    if (token.topMenuContainerMargin) {\n      variables.push(`  --top-menu-container-margin: ${token.topMenuContainerMargin}px;`);\n    }\n\n    // 按钮变量\n    if (token.buttonPrimaryColor) {\n      variables.push(`  --button-primary-color: ${token.buttonPrimaryColor};`);\n    }\n    if (token.buttonDefaultColor) {\n      variables.push(`  --button-default-color: ${token.buttonDefaultColor};`);\n    }\n    if (token.buttonTextColor) {\n      variables.push(`  --button-text-color: ${token.buttonTextColor};`);\n    }\n\n    // 头部变量\n    if (token.headerBackgroundColor) {\n      variables.push(`  --header-background-color: ${token.headerBackgroundColor};`);\n    }\n    if (token.headerTextColor) {\n      variables.push(`  --header-text-color: ${token.headerTextColor};`);\n    }\n    if (token.headerIconColor) {\n      variables.push(`  --header-icon-color: ${token.headerIconColor};`);\n    }\n\n    return `:root {\\n${variables.join('\\n')}\\n}`;\n  }\n\n  /**\n   * 生成布局样式\n   */\n  private generateLayoutStyles(): string {\n    const styles: string[] = [];\n    const token = this.theme.token;\n\n    // 侧边栏样式\n    styles.push(`\n/* 侧边栏布局样式 */\n.sidebar {\n  width: var(--layout-sidebar-width, 240px);\n  background-color: ${token.layoutSidebarBackgroundColor || token.colorBgContainer};\n  border-right: 1px solid ${token.layoutSidebarBorderColor || token.colorBorder};\n  box-shadow: ${token.layoutSidebarShadowColor || token.boxShadow};\n}\n\n.sidebar.collapsed {\n  width: var(--layout-sidebar-collapsed-width, 80px);\n}\n\n.sidebar-header {\n  height: var(--layout-sidebar-header-height, 64px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 1px solid ${token.layoutSidebarBorderColor || token.colorBorder};\n  background-color: ${token.headerBackgroundColor || token.colorBgContainer};\n}`);\n\n    // 顶部菜单样式\n    styles.push(`\n/* 顶部菜单布局样式 */\n.top-menu-layout .top-header {\n  height: var(--layout-top-menu-height, 64px);\n  background-color: ${token.layoutTopMenuBackgroundColor || token.colorBgContainer};\n  border-bottom: 1px solid ${token.layoutTopMenuBorderColor || token.colorBorder};\n  box-shadow: ${token.layoutTopMenuShadowColor || token.boxShadow};\n}`);\n\n    // 内容区域样式\n    styles.push(`\n/* 内容区域样式 */\n.content-area {\n  background-color: ${token.layoutContentBackgroundColor || token.colorBgLayout};\n  padding: ${token.layoutContentPadding || 16}px;\n  margin: ${token.layoutContentMargin || 0}px;\n}\n\n/* 全局背景色控制 - 最高优先级 */\nhtml, body {\n  background-color: ${token.colorBgLayout} !important;\n  transition: background-color 0.3s ease !important;\n}\n\nbody {\n  color: ${token.colorText} !important;\n  transition: background-color 0.3s ease, color 0.3s ease !important;\n}\n\n/* 确保所有容器都有正确的背景色 */\n.ant-layout {\n  background-color: ${token.colorBgLayout} !important;\n}\n\n.ant-layout-content {\n  background-color: ${token.colorBgBase} !important;\n}\n\n/* 强制应用主题背景色 - 覆盖所有可能的样式 */\n#root, .app, .main-container {\n  background-color: ${token.colorBgLayout} !important;\n  min-height: 100vh !important;\n}\n\n/* 确保页面内容区域背景色正确 */\n.page-content, .content-wrapper, .main-content {\n  background-color: ${token.colorBgBase} !important;\n}`);\n\n    return styles.join('\\n');\n  }\n\n  /**\n   * 生成组件样式\n   */\n  private generateComponentStyles(): string {\n    const styles: string[] = [];\n    const token = this.theme.token;\n\n    // Logo样式\n    styles.push(`\n/* Logo组件样式 */\n.logo-text {\n  color: ${token.logoTextColor || token.colorText};\n  font-size: ${token.logoFontSize || 18}px;\n  font-weight: ${token.logoFontWeight || 'bold'};\n}\n\n.logo-icon {\n  background-color: ${token.logoBackgroundColor || token.colorPrimary};\n  color: ${token.logoIconColor || '#ffffff'};\n  border-radius: ${token.logoBorderRadius || 6}px;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}`);\n\n    // 菜单样式\n    styles.push(`\n/* 菜单组件样式 */\n.menu-theme-unified .ant-menu {\n  background-color: ${token.menuBackgroundColor || 'transparent'};\n  border-radius: ${token.menuBorderRadius || 6}px;\n}\n\n.menu-theme-unified .ant-menu-item {\n  color: ${token.menuItemColor || token.colorText};\n  font-size: ${token.menuFontSize || 14}px;\n  font-weight: ${token.menuFontWeight || 'normal'};\n  padding: ${token.menuPadding || 8}px;\n  margin: ${token.menuMargin || 4}px 8px;\n}\n\n.menu-theme-unified .ant-menu-item:hover {\n  background-color: ${token.menuItemHoverBackgroundColor || token.colorFillSecondary};\n  color: ${token.menuItemHoverColor || token.colorPrimary};\n}\n\n.menu-theme-unified .ant-menu-item-selected {\n  background-color: ${token.menuItemSelectedBackgroundColor || token.colorPrimary};\n  color: ${token.menuItemSelectedColor || '#ffffff'};\n}\n\n.menu-theme-unified .ant-menu-item .ant-menu-item-icon {\n  color: ${token.menuIconColor || token.colorTextSecondary};\n}\n\n.menu-theme-unified .ant-menu-item:hover .ant-menu-item-icon {\n  color: ${token.menuIconHoverColor || token.colorPrimary};\n}\n\n.menu-theme-unified .ant-menu-item-selected .ant-menu-item-icon {\n  color: ${token.menuIconSelectedColor || '#ffffff'};\n}`);\n\n    // 按钮样式\n    styles.push(`\n/* 按钮组件样式 */\n.theme-button {\n  border-radius: ${token.buttonBorderRadius || 6}px;\n  font-size: ${token.buttonFontSize || 14}px;\n  font-weight: ${token.buttonFontWeight || 'normal'};\n  padding: ${token.buttonPadding || 8}px 16px;\n  margin: ${token.buttonMargin || 4}px;\n  box-shadow: ${token.buttonShadow || token.boxShadow};\n}\n\n.theme-button.primary {\n  background-color: ${token.buttonPrimaryColor || token.colorPrimary};\n  color: ${token.buttonTextColor || '#ffffff'};\n  border-color: ${token.buttonBorderColor || token.colorPrimary};\n}\n\n.theme-button.default {\n  background-color: ${token.buttonBackgroundColor || token.colorBgContainer};\n  color: ${token.buttonDefaultColor || token.colorText};\n  border-color: ${token.buttonBorderColor || token.colorBorder};\n}`);\n\n    // 头部样式\n    styles.push(`\n/* 头部组件样式 */\n.theme-header {\n  background-color: ${token.headerBackgroundColor || token.colorBgContainer};\n  height: ${token.headerHeight || 64}px;\n  border-bottom: 1px solid ${token.headerBorderColor || token.colorBorder};\n  box-shadow: ${token.headerShadowColor || token.boxShadow};\n  padding: 0 ${token.headerPadding || 16}px;\n}\n\n.theme-header .header-text {\n  color: ${token.headerTextColor || token.colorText};\n}\n\n.theme-header .header-icon {\n  color: ${token.headerIconColor || token.colorTextSecondary};\n}`);\n\n    return styles.join('\\n');\n  }\n\n  /**\n   * 生成动画样式\n   */\n  private generateAnimationStyles(): string {\n    const styles: string[] = [];\n    const token = this.theme.token;\n\n    styles.push(`\n/* 动画样式 */\n.theme-transition {\n  transition: all ${token.motionDurationCustom1 || '0.3s'} ${token.motionEaseCustom1 || 'cubic-bezier(0.2, 0, 0, 1)'};\n}\n\n.theme-fade-in {\n  animation: fadeIn ${token.motionDurationCustom2 || '0.5s'} ${token.motionEaseCustom2 || 'ease-in-out'};\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`);\n\n    return styles.join('\\n');\n  }\n\n  /**\n   * 生成响应式样式\n   */\n  private generateResponsiveStyles(): string {\n    return `\n/* 响应式样式 */\n@media (max-width: 768px) {\n  .sidebar {\n    width: 100%;\n    position: fixed;\n    z-index: 1000;\n    transform: translateX(-100%);\n  }\n  \n  .sidebar.open {\n    transform: translateX(0);\n  }\n  \n  .content-area {\n    padding: 8px;\n  }\n}\n\n@media (max-width: 480px) {\n  .theme-header {\n    height: 56px;\n    padding: 0 8px;\n  }\n  \n  .logo-text {\n    font-size: 16px;\n  }\n}`;\n  }\n\n  /**\n   * 压缩CSS\n   */\n  private minifyCSS(css: string): string {\n    return css\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // 移除注释\n      .replace(/\\s+/g, ' ') // 合并空白字符\n      .replace(/;\\s*}/g, '}') // 移除分号后的空格\n      .replace(/{\\s*/g, '{') // 移除左大括号后的空格\n      .replace(/;\\s*/g, ';') // 移除分号后的空格\n      .trim();\n  }\n}\n\n/**\n * 创建样式生成器实例\n */\nexport function createStyleGenerator(\n  theme: ThemePackageConfig,\n  options?: StyleGeneratorOptions\n): StyleGenerator {\n  return new StyleGenerator(theme, options);\n}\n\n/**\n * 生成主题CSS\n */\nexport function generateThemeCSS(\n  theme: ThemePackageConfig,\n  options?: StyleGeneratorOptions\n): string {\n  const generator = createStyleGenerator(theme, options);\n  return generator.generateCSS();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[618,621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[618,621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":609,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14447,14450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14447,14450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":689,"column":32,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":689,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":690,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":690,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17329,17332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17329,17332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包核心类型定义\n * 基于 Spec-Kit 方法的可扩展主题架构\n */\n\nimport { theme } from 'antd';\n\n// 主题包元数据\nexport interface ThemePackageMeta {\n  id: string;\n  name: string;\n  displayName: string;\n  description: string;\n  version: string;\n  author: string;\n  tags: string[];\n  category: 'light' | 'dark' | 'colorful' | 'minimal' | 'professional';\n  preview: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// 菜单变体类型\nexport type MenuVariant = 'light' | 'dark';\n\n// 主题包配置接口\nexport interface ThemePackageConfig {\n  meta: ThemePackageMeta;\n  algorithm: any;\n  token: ThemeToken;\n  components: ThemeComponents;\n  custom?: Record<string, any>;\n  // 菜单变体配置\n  menuVariant?: MenuVariant;\n}\n\n// 主题令牌接口\nexport interface ThemeToken {\n  // 主色调\n  colorPrimary: string;\n  colorSuccess: string;\n  colorWarning: string;\n  colorError: string;\n  colorInfo: string;\n  \n  // 自定义颜色变量\n  colorCustom1?: string;\n  colorCustom2?: string;\n  colorCustom3?: string;\n  colorCustom4?: string;\n  colorCustom5?: string;\n  \n  // 渐变背景\n  gradientPrimary?: string;\n  gradientSecondary?: string;\n  gradientSuccess?: string;\n  gradientWarning?: string;\n  gradientError?: string;\n  \n  // 扩展的阴影效果\n  boxShadowCustom1?: string;\n  boxShadowCustom2?: string;\n  boxShadowCustom3?: string;\n  boxShadowInset?: string;\n  boxShadowGlow?: string;\n  \n  // 扩展的圆角\n  borderRadiusCustom1?: number;\n  borderRadiusCustom2?: number;\n  borderRadiusCustom3?: number;\n  borderRadiusCustom4?: number;\n  \n  // 扩展的间距\n  spacingCustom1?: number;\n  spacingCustom2?: number;\n  spacingCustom3?: number;\n  spacingCustom4?: number;\n  spacingCustom5?: number;\n  spacingCustom6?: number;\n  spacingCustom7?: number;\n  spacingCustom8?: number;\n  \n  // 扩展的字体大小\n  fontSizeCustom1?: number;\n  fontSizeCustom2?: number;\n  fontSizeCustom3?: number;\n  fontSizeCustom4?: number;\n  fontSizeCustom5?: number;\n  fontSizeCustom6?: number;\n  fontSizeCustom7?: number;\n  fontSizeCustom8?: number;\n  \n  // 扩展的字体权重\n  fontWeightLight?: number;\n  fontWeightNormal?: number;\n  fontWeightMedium?: number;\n  fontWeightSemiBold?: number;\n  fontWeightBold?: number;\n  fontWeightExtraBold?: number;\n  \n  // 扩展的行高\n  lineHeightCustom1?: number;\n  lineHeightCustom2?: number;\n  lineHeightCustom3?: number;\n  lineHeightCustom4?: number;\n  lineHeightCustom5?: number;\n  lineHeightCustom6?: number;\n  \n  // 扩展的动画持续时间\n  motionDurationCustom1?: string;\n  motionDurationCustom2?: string;\n  motionDurationCustom3?: string;\n  motionDurationCustom4?: string;\n  motionDurationCustom5?: string;\n  motionDurationCustom6?: string;\n  \n  // 扩展的动画缓动函数\n  motionEaseCustom1?: string;\n  motionEaseCustom2?: string;\n  motionEaseCustom3?: string;\n  motionEaseCustom4?: string;\n  motionEaseCustom5?: string;\n  \n  // 透明度控制\n  opacityCustom1?: number;\n  opacityCustom2?: number;\n  opacityCustom3?: number;\n  opacityCustom4?: number;\n  opacityCustom5?: number;\n  opacityCustom6?: number;\n  opacityCustom7?: number;\n  opacityCustom8?: number;\n  opacityCustom9?: number;\n  \n  // 边框宽度\n  lineWidthCustom1?: number;\n  lineWidthCustom2?: number;\n  lineWidthCustom3?: number;\n  lineWidthCustom4?: number;\n  lineWidthCustom5?: number;\n  \n  // Z-index 层级\n  zIndexCustom1?: number;\n  zIndexCustom2?: number;\n  zIndexCustom3?: number;\n  zIndexCustom4?: number;\n  zIndexCustom5?: number;\n  \n  // 布局样式配置\n  layoutSidebarWidth?: number;\n  layoutSidebarCollapsedWidth?: number;\n  layoutSidebarHeaderHeight?: number;\n  layoutSidebarBackgroundColor?: string;\n  layoutSidebarBorderColor?: string;\n  layoutSidebarShadowColor?: string;\n  layoutTopMenuHeight?: number;\n  layoutTopMenuBackgroundColor?: string;\n  layoutTopMenuBorderColor?: string;\n  layoutTopMenuShadowColor?: string;\n  layoutContentBackgroundColor?: string;\n  layoutContentPadding?: number;\n  layoutContentMargin?: number;\n  \n  // Logo样式配置\n  logoBackgroundColor?: string;\n  logoTextColor?: string;\n  logoIconColor?: string;\n  logoFontSize?: number;\n  logoFontWeight?: number;\n  logoBorderRadius?: number;\n  \n  // 菜单样式配置\n  menuBackgroundColor?: string;\n  menuItemColor?: string;\n  menuItemHoverColor?: string;\n  menuItemSelectedColor?: string;\n  menuItemBackgroundColor?: string;\n  menuItemHoverBackgroundColor?: string;\n  menuItemSelectedBackgroundColor?: string;\n  menuIconColor?: string;\n  menuIconHoverColor?: string;\n  menuIconSelectedColor?: string;\n  menuBorderColor?: string;\n  menuBorderRadius?: number;\n  menuFontSize?: number;\n  menuFontWeight?: number;\n  menuPadding?: number;\n  menuMargin?: number;\n  \n  // 按钮样式配置\n  buttonPrimaryColor?: string;\n  buttonDefaultColor?: string;\n  buttonTextColor?: string;\n  buttonBackgroundColor?: string;\n  buttonBorderColor?: string;\n  buttonHoverColor?: string;\n  buttonActiveColor?: string;\n  buttonDisabledColor?: string;\n  buttonBorderRadius?: number;\n  buttonFontSize?: number;\n  buttonFontWeight?: number;\n  buttonPadding?: number;\n  buttonMargin?: number;\n  buttonShadow?: string;\n  \n  // 头部样式配置\n  headerBackgroundColor?: string;\n  headerHeight?: number;\n  headerBorderColor?: string;\n  headerShadowColor?: string;\n  headerTextColor?: string;\n  headerIconColor?: string;\n  headerPadding?: number;\n  \n  // 卡片样式配置\n  cardBackgroundColor?: string;\n  cardBorderColor?: string;\n  cardBorderRadius?: number;\n  cardShadow?: string;\n  cardPadding?: number;\n  cardMargin?: number;\n  \n  // 输入框样式配置\n  inputBackgroundColor?: string;\n  inputBorderColor?: string;\n  inputTextColor?: string;\n  inputPlaceholderColor?: string;\n  inputFocusColor?: string;\n  inputBorderRadius?: number;\n  inputFontSize?: number;\n  inputPadding?: number;\n  \n  // 选择器样式配置\n  selectBackgroundColor?: string;\n  selectBorderColor?: string;\n  selectTextColor?: string;\n  selectHoverColor?: string;\n  selectSelectedColor?: string;\n  selectBorderRadius?: number;\n  selectFontSize?: number;\n  selectPadding?: number;\n  \n  // 开关样式配置\n  switchCheckedColor?: string;\n  switchUnCheckedColor?: string;\n  switchHandleColor?: string;\n  switchBackgroundColor?: string;\n  \n  // 抽屉样式配置\n  drawerBackgroundColor?: string;\n  drawerBorderColor?: string;\n  drawerShadowColor?: string;\n  drawerHeaderColor?: string;\n  drawerBodyColor?: string;\n  \n  // 模态框样式配置\n  modalBackgroundColor?: string;\n  modalBorderColor?: string;\n  modalShadowColor?: string;\n  modalHeaderColor?: string;\n  modalBodyColor?: string;\n  modalMaskColor?: string;\n  \n  // 表格样式配置\n  tableBackgroundColor?: string;\n  tableBorderColor?: string;\n  tableHeaderColor?: string;\n  tableRowColor?: string;\n  tableHoverColor?: string;\n  tableSelectedColor?: string;\n  tableTextColor?: string;\n  tableFontSize?: number;\n  \n  // 表单样式配置\n  formLabelColor?: string;\n  formTextColor?: string;\n  formBorderColor?: string;\n  formErrorColor?: string;\n  formSuccessColor?: string;\n  formFontSize?: number;\n  \n  // 通知样式配置\n  notificationBackgroundColor?: string;\n  notificationBorderColor?: string;\n  notificationTextColor?: string;\n  notificationIconColor?: string;\n  notificationSuccessColor?: string;\n  notificationWarningColor?: string;\n  notificationErrorColor?: string;\n  notificationInfoColor?: string;\n  notificationShadow?: string;\n  \n  // 提示框样式配置\n  tooltipBackgroundColor?: string;\n  tooltipTextColor?: string;\n  tooltipBorderColor?: string;\n  tooltipShadow?: string;\n  \n  // 气泡卡片样式配置\n  popoverBackgroundColor?: string;\n  popoverBorderColor?: string;\n  popoverShadow?: string;\n  \n  // 下拉菜单样式配置\n  dropdownBackgroundColor?: string;\n  dropdownBorderColor?: string;\n  dropdownItemColor?: string;\n  dropdownItemHoverColor?: string;\n  dropdownShadow?: string;\n  \n  // 标签页样式配置\n  tabsBackgroundColor?: string;\n  tabsBorderColor?: string;\n  tabsActiveColor?: string;\n  tabsInactiveColor?: string;\n  tabsContentColor?: string;\n  \n  // 面包屑样式配置\n  breadcrumbBackgroundColor?: string;\n  breadcrumbTextColor?: string;\n  breadcrumbLinkColor?: string;\n  breadcrumbSeparatorColor?: string;\n  breadcrumbFontSize?: number;\n  \n  // 分页样式配置\n  paginationBackgroundColor?: string;\n  paginationBorderColor?: string;\n  paginationTextColor?: string;\n  paginationActiveColor?: string;\n  paginationDisabledColor?: string;\n  paginationFontSize?: number;\n  \n  // 进度条样式配置\n  progressBackgroundColor?: string;\n  progressProgressColor?: string;\n  progressTextColor?: string;\n  progressFontSize?: number;\n  \n  // 徽章样式配置\n  badgeBackgroundColor?: string;\n  badgeTextColor?: string;\n  badgeBorderColor?: string;\n  badgeFontSize?: number;\n  \n  // 头像样式配置\n  avatarBackgroundColor?: string;\n  avatarTextColor?: string;\n  avatarBorderColor?: string;\n  avatarFontSize?: number;\n  \n  // 分割线样式配置\n  dividerBackgroundColor?: string;\n  dividerTextColor?: string;\n  dividerFontSize?: number;\n  \n  // 空状态样式配置\n  emptyBackgroundColor?: string;\n  emptyTextColor?: string;\n  emptyIconColor?: string;\n  emptyFontSize?: number;\n  \n  // 加载样式配置\n  spinColor?: string;\n  spinBackgroundColor?: string;\n  \n  // 骨架屏样式配置\n  skeletonBackgroundColor?: string;\n  skeletonActiveColor?: string;\n  \n  // 时间轴样式配置\n  timelineBackgroundColor?: string;\n  timelineBorderColor?: string;\n  timelineTextColor?: string;\n  timelineDotColor?: string;\n  timelineFontSize?: number;\n  \n  // 树形控件样式配置\n  treeBackgroundColor?: string;\n  treeBorderColor?: string;\n  treeTextColor?: string;\n  treeSelectedColor?: string;\n  treeHoverColor?: string;\n  treeFontSize?: number;\n  \n  // 穿梭框样式配置\n  transferBackgroundColor?: string;\n  transferBorderColor?: string;\n  transferTextColor?: string;\n  transferSelectedColor?: string;\n  transferHoverColor?: string;\n  \n  // 级联选择器样式配置\n  cascaderBackgroundColor?: string;\n  cascaderBorderColor?: string;\n  cascaderTextColor?: string;\n  cascaderSelectedColor?: string;\n  cascaderHoverColor?: string;\n  \n  // 日期选择器样式配置\n  datePickerBackgroundColor?: string;\n  datePickerBorderColor?: string;\n  datePickerTextColor?: string;\n  datePickerSelectedColor?: string;\n  datePickerHoverColor?: string;\n  \n  // 时间选择器样式配置\n  timePickerBackgroundColor?: string;\n  timePickerBorderColor?: string;\n  timePickerTextColor?: string;\n  timePickerSelectedColor?: string;\n  timePickerHoverColor?: string;\n  \n  // 日历样式配置\n  calendarBackgroundColor?: string;\n  calendarBorderColor?: string;\n  calendarTextColor?: string;\n  calendarSelectedColor?: string;\n  calendarHoverColor?: string;\n  calendarHeaderColor?: string;\n  \n  // 上传样式配置\n  uploadBackgroundColor?: string;\n  uploadBorderColor?: string;\n  uploadTextColor?: string;\n  uploadHoverColor?: string;\n  uploadSuccessColor?: string;\n  uploadErrorColor?: string;\n  \n  // 评分样式配置\n  rateColor?: string;\n  rateTextColor?: string;\n  rateFontSize?: number;\n  \n  // 滑动输入条样式配置\n  sliderTrackColor?: string;\n  sliderHandleColor?: string;\n  sliderTextColor?: string;\n  sliderFontSize?: number;\n  \n  // 颜色选择器样式配置\n  colorPickerBackgroundColor?: string;\n  colorPickerBorderColor?: string;\n  colorPickerTextColor?: string;\n  \n  // 提及样式配置\n  mentionBackgroundColor?: string;\n  mentionBorderColor?: string;\n  mentionTextColor?: string;\n  mentionSelectedColor?: string;\n  mentionHoverColor?: string;\n  \n  // 自动完成样式配置\n  autoCompleteBackgroundColor?: string;\n  autoCompleteBorderColor?: string;\n  autoCompleteTextColor?: string;\n  autoCompleteSelectedColor?: string;\n  autoCompleteHoverColor?: string;\n  \n  // 背景色\n  colorBgBase: string;\n  colorBgContainer: string;\n  colorBgElevated: string;\n  colorBgLayout: string;\n  colorBgSpotlight: string;\n  colorBgMask: string;\n  \n  // 文字色\n  colorText: string;\n  colorTextSecondary: string;\n  colorTextTertiary: string;\n  colorTextQuaternary: string;\n  colorTextDisabled: string;\n  colorTextHeading: string;\n  colorTextDescription: string;\n  colorTextPlaceholder: string;\n  \n  // 边框色\n  colorBorder: string;\n  colorBorderSecondary: string;\n  colorSplit: string;\n  \n  // 填充色\n  colorFill: string;\n  colorFillSecondary: string;\n  colorFillTertiary: string;\n  colorFillQuaternary: string;\n  \n  // 链接色\n  colorLink: string;\n  colorLinkHover: string;\n  colorLinkActive: string;\n  \n  // 圆角\n  borderRadius: number;\n  borderRadiusLG: number;\n  borderRadiusSM: number;\n  borderRadiusXS: number;\n  \n  // 阴影\n  boxShadow: string;\n  boxShadowSecondary: string;\n  boxShadowTertiary: string;\n  \n  // 字体\n  fontFamily: string;\n  fontSize: number;\n  fontSizeLG: number;\n  fontSizeSM: number;\n  fontSizeXL: number;\n  fontSizeHeading1: number;\n  fontSizeHeading2: number;\n  fontSizeHeading3: number;\n  fontSizeHeading4: number;\n  fontSizeHeading5: number;\n  \n  // 行高\n  lineHeight: number;\n  lineHeightLG: number;\n  lineHeightSM: number;\n  \n  // 间距\n  padding: number;\n  paddingLG: number;\n  paddingSM: number;\n  paddingXS: number;\n  margin: number;\n  marginLG: number;\n  marginSM: number;\n  marginXS: number;\n  \n  // 动画\n  motionDurationFast: string;\n  motionDurationMid: string;\n  motionDurationSlow: string;\n  motionEaseInOut: string;\n  motionEaseOut: string;\n  motionEaseIn: string;\n  \n  // 其他\n  wireframe: boolean;\n  controlHeight: number;\n  controlHeightLG: number;\n  controlHeightSM: number;\n  \n  // 顶部菜单专用间距配置\n  topMenuHeight?: number;\n  topMenuItemMargin?: number;\n  topMenuItemPadding?: number;\n  topMenuContainerPadding?: number;\n  topMenuContainerMargin?: number;\n}\n\n// 主题组件配置接口\nexport interface ThemeComponents {\n  Layout?: ComponentConfig;\n  Menu?: ComponentConfig;\n  Button?: ComponentConfig;\n  Card?: ComponentConfig;\n  Input?: ComponentConfig;\n  Table?: ComponentConfig;\n  Modal?: ComponentConfig;\n  Drawer?: ComponentConfig;\n  Message?: ComponentConfig;\n  Notification?: ComponentConfig;\n  Tag?: ComponentConfig;\n  Badge?: ComponentConfig;\n  Avatar?: ComponentConfig;\n  Pagination?: ComponentConfig;\n  Breadcrumb?: ComponentConfig;\n  Spin?: ComponentConfig;\n  Progress?: ComponentConfig;\n  Dropdown?: ComponentConfig;\n  Tooltip?: ComponentConfig;\n  Select?: ComponentConfig;\n  DatePicker?: ComponentConfig;\n  TimePicker?: ComponentConfig;\n  Switch?: ComponentConfig;\n  Checkbox?: ComponentConfig;\n  Radio?: ComponentConfig;\n  Slider?: ComponentConfig;\n  Rate?: ComponentConfig;\n  Upload?: ComponentConfig;\n  Transfer?: ComponentConfig;\n  Tree?: ComponentConfig;\n  TreeSelect?: ComponentConfig;\n  Cascader?: ComponentConfig;\n  Form?: ComponentConfig;\n  Steps?: ComponentConfig;\n  Timeline?: ComponentConfig;\n  Tabs?: ComponentConfig;\n  Collapse?: ComponentConfig;\n  Carousel?: ComponentConfig;\n  Calendar?: ComponentConfig;\n  List?: ComponentConfig;\n  Descriptions?: ComponentConfig;\n  Empty?: ComponentConfig;\n  Result?: ComponentConfig;\n  Statistic?: ComponentConfig;\n  Alert?: ComponentConfig;\n  Skeleton?: ComponentConfig;\n  Anchor?: ComponentConfig;\n  BackTop?: ComponentConfig;\n  Affix?: ComponentConfig;\n  [key: string]: ComponentConfig | undefined;\n}\n\n// 组件配置接口\nexport interface ComponentConfig {\n  [key: string]: any;\n}\n\n// 主题包加载器接口\nexport interface ThemePackageLoader {\n  load(packageId: string): Promise<ThemePackageConfig>;\n  loadAll(): Promise<ThemePackageConfig[]>;\n  validate(config: ThemePackageConfig): boolean;\n  register(config: ThemePackageConfig): void;\n  unregister(packageId: string): void;\n  getRegistered(): ThemePackageConfig[];\n}\n\n// 主题包注册表接口\nexport interface ThemePackageRegistry {\n  packages: Map<string, ThemePackageConfig>;\n  register(config: ThemePackageConfig, overwrite?: boolean): void;\n  unregister(packageId: string): void;\n  get(packageId: string): ThemePackageConfig | undefined;\n  getAll(): ThemePackageConfig[];\n  has(packageId: string): boolean;\n  clear(): void;\n}\n\n// 主题包验证器接口\nexport interface ThemePackageValidator {\n  validate(config: ThemePackageConfig): ValidationResult;\n  validateMeta(meta: ThemePackageMeta): ValidationResult;\n  validateToken(token: ThemeToken): ValidationResult;\n  validateComponents(components: ThemeComponents): ValidationResult;\n}\n\n// 验证结果接口\nexport interface ValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n// 主题包工厂接口\nexport interface ThemePackageFactory {\n  create(config: Partial<ThemePackageConfig>): ThemePackageConfig;\n  fromJSON(json: string): ThemePackageConfig;\n  toJSON(config: ThemePackageConfig): string;\n  clone(config: ThemePackageConfig): ThemePackageConfig;\n  merge(base: ThemePackageConfig, override: Partial<ThemePackageConfig>): ThemePackageConfig;\n}\n\n// 主题包管理器接口\nexport interface ThemePackageManager {\n  loader: ThemePackageLoader;\n  registry: ThemePackageRegistry;\n  validator: ThemePackageValidator;\n  factory: ThemePackageFactory;\n  \n  // 主要方法\n  loadPackage(packageId: string): Promise<ThemePackageConfig>;\n  loadAllPackages(): Promise<ThemePackageConfig[]>;\n  registerPackage(config: ThemePackageConfig): boolean;\n  unregisterPackage(packageId: string): boolean;\n  getPackage(packageId: string): ThemePackageConfig | undefined;\n  getAllPackages(): ThemePackageConfig[];\n  validatePackage(config: ThemePackageConfig): ValidationResult;\n  \n  // 工具方法\n  createPackage(config: Partial<ThemePackageConfig>): ThemePackageConfig;\n  exportPackage(packageId: string): string;\n  importPackage(json: string): boolean;\n  clonePackage(packageId: string, newId: string): boolean;\n  mergePackages(baseId: string, overrideId: string, newId: string): boolean;\n}\n\n// 主题包事件接口\nexport interface ThemePackageEvents {\n  on(event: 'packageLoaded', listener: (config: ThemePackageConfig) => void): void;\n  on(event: 'packageRegistered', listener: (config: ThemePackageConfig) => void): void;\n  on(event: 'packageUnregistered', listener: (packageId: string) => void): void;\n  on(event: 'packageValidated', listener: (result: ValidationResult) => void): void;\n  on(event: 'error', listener: (error: Error) => void): void;\n  \n  off(event: string, listener: Function): void;\n  emit(event: string, ...args: any[]): void;\n}\n\n// 主题包配置选项\nexport interface ThemePackageOptions {\n  autoLoad?: boolean;\n  validateOnLoad?: boolean;\n  cacheEnabled?: boolean;\n  cacheTimeout?: number;\n  fallbackPackage?: string;\n  strictMode?: boolean;\n}\n\n// 导出所有类型\nexport type {\n  ThemePackageMeta,\n  ThemePackageConfig,\n  ThemeToken,\n  ThemeComponents,\n  ComponentConfig,\n  ThemePackageLoader,\n  ThemePackageRegistry,\n  ThemePackageValidator,\n  ValidationResult,\n  ThemePackageFactory,\n  ThemePackageManager,\n  ThemePackageEvents,\n  ThemePackageOptions,\n};\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/core/validator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4664,4667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4664,4667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5504,5507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5504,5507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5912,5915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5912,5915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6224,6227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6224,6227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":278,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'targetVersion' is defined but never used.","line":278,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":66}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包验证器\n * 基于 Spec-Kit 方法的主题包验证系统\n */\n\nimport type {\n  ThemePackageConfig,\n  ThemePackageMeta,\n  ThemeToken,\n  ThemeComponents,\n  ThemePackageValidator,\n  ValidationResult,\n} from './types';\n\nexport class ThemePackageValidatorImpl implements ThemePackageValidator {\n  /**\n   * 验证完整的主题包配置\n   */\n  validate(config: ThemePackageConfig): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 验证元数据\n    const metaResult = this.validateMeta(config.meta);\n    errors.push(...metaResult.errors);\n    warnings.push(...metaResult.warnings);\n\n    // 验证令牌\n    const tokenResult = this.validateToken(config.token);\n    errors.push(...tokenResult.errors);\n    warnings.push(...tokenResult.warnings);\n\n    // 验证组件配置\n    const componentsResult = this.validateComponents(config.components);\n    errors.push(...componentsResult.errors);\n    warnings.push(...componentsResult.warnings);\n\n    // 验证算法\n    if (!config.algorithm) {\n      errors.push('Theme algorithm is required');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * 验证主题包元数据\n   */\n  validateMeta(meta: ThemePackageMeta): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 必需字段验证\n    if (!meta.id || typeof meta.id !== 'string') {\n      errors.push('Theme package ID is required and must be a string');\n    } else if (!/^[a-zA-Z0-9-_]+$/.test(meta.id)) {\n      errors.push('Theme package ID must contain only alphanumeric characters, hyphens, and underscores');\n    }\n\n    if (!meta.name || typeof meta.name !== 'string') {\n      errors.push('Theme package name is required and must be a string');\n    }\n\n    if (!meta.displayName || typeof meta.displayName !== 'string') {\n      errors.push('Theme package display name is required and must be a string');\n    }\n\n    if (!meta.description || typeof meta.description !== 'string') {\n      errors.push('Theme package description is required and must be a string');\n    }\n\n    if (!meta.version || typeof meta.version !== 'string') {\n      errors.push('Theme package version is required and must be a string');\n    } else if (!/^\\d+\\.\\d+\\.\\d+$/.test(meta.version)) {\n      warnings.push('Theme package version should follow semantic versioning (e.g., 1.0.0)');\n    }\n\n    if (!meta.author || typeof meta.author !== 'string') {\n      errors.push('Theme package author is required and must be a string');\n    }\n\n    // 数组字段验证\n    if (!Array.isArray(meta.tags)) {\n      errors.push('Theme package tags must be an array');\n    } else {\n      meta.tags.forEach((tag, index) => {\n        if (typeof tag !== 'string') {\n          errors.push(`Theme package tag at index ${index} must be a string`);\n        }\n      });\n    }\n\n    // 分类验证\n    const validCategories = ['light', 'dark', 'colorful', 'minimal', 'professional'];\n    if (!validCategories.includes(meta.category)) {\n      errors.push(`Theme package category must be one of: ${validCategories.join(', ')}`);\n    }\n\n    // 日期验证\n    if (!meta.createdAt || typeof meta.createdAt !== 'string') {\n      errors.push('Theme package createdAt is required and must be a string');\n    } else if (isNaN(Date.parse(meta.createdAt))) {\n      errors.push('Theme package createdAt must be a valid ISO date string');\n    }\n\n    if (!meta.updatedAt || typeof meta.updatedAt !== 'string') {\n      errors.push('Theme package updatedAt is required and must be a string');\n    } else if (isNaN(Date.parse(meta.updatedAt))) {\n      errors.push('Theme package updatedAt must be a valid ISO date string');\n    }\n\n    // 预览图片验证\n    if (meta.preview && typeof meta.preview !== 'string') {\n      errors.push('Theme package preview must be a string (URL or base64)');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * 验证主题令牌\n   */\n  validateToken(token: ThemeToken): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 颜色验证\n    const colorFields = [\n      'colorPrimary', 'colorSuccess', 'colorWarning', 'colorError', 'colorInfo',\n      'colorBgBase', 'colorBgContainer', 'colorBgElevated', 'colorBgLayout',\n      'colorBgSpotlight', 'colorBgMask', 'colorText', 'colorTextSecondary',\n      'colorTextTertiary', 'colorTextQuaternary', 'colorTextDisabled',\n      'colorTextHeading', 'colorTextDescription', 'colorTextPlaceholder',\n      'colorBorder', 'colorBorderSecondary', 'colorSplit', 'colorFill',\n      'colorFillSecondary', 'colorFillTertiary', 'colorFillQuaternary',\n      'colorLink', 'colorLinkHover', 'colorLinkActive',\n    ];\n\n    colorFields.forEach(field => {\n      const value = (token as any)[field];\n      if (!value || typeof value !== 'string') {\n        errors.push(`Token ${field} is required and must be a string`);\n      } else if (!this.isValidColor(value)) {\n        errors.push(`Token ${field} must be a valid color value`);\n      }\n    });\n\n    // 数值验证\n    const numberFields = [\n      'borderRadius', 'borderRadiusLG', 'borderRadiusSM', 'borderRadiusXS',\n      'fontSize', 'fontSizeLG', 'fontSizeSM', 'fontSizeXL',\n      'fontSizeHeading1', 'fontSizeHeading2', 'fontSizeHeading3',\n      'fontSizeHeading4', 'fontSizeHeading5', 'lineHeight', 'lineHeightLG',\n      'lineHeightSM', 'padding', 'paddingLG', 'paddingSM', 'paddingXS',\n      'margin', 'marginLG', 'marginSM', 'marginXS', 'controlHeight',\n      'controlHeightLG', 'controlHeightSM',\n    ];\n\n    numberFields.forEach(field => {\n      const value = (token as any)[field];\n      if (typeof value !== 'number' || value < 0) {\n        errors.push(`Token ${field} must be a non-negative number`);\n      }\n    });\n\n    // 字符串验证\n    const stringFields = [\n      'fontFamily', 'motionDurationFast', 'motionDurationMid', 'motionDurationSlow',\n      'motionEaseInOut', 'motionEaseOut', 'motionEaseIn',\n    ];\n\n    stringFields.forEach(field => {\n      const value = (token as any)[field];\n      if (!value || typeof value !== 'string') {\n        errors.push(`Token ${field} is required and must be a string`);\n      }\n    });\n\n    // 阴影验证\n    const shadowFields = ['boxShadow', 'boxShadowSecondary', 'boxShadowTertiary'];\n    shadowFields.forEach(field => {\n      const value = (token as any)[field];\n      if (!value || typeof value !== 'string') {\n        errors.push(`Token ${field} is required and must be a string`);\n      }\n    });\n\n    // 布尔值验证\n    if (typeof token.wireframe !== 'boolean') {\n      errors.push('Token wireframe must be a boolean');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * 验证组件配置\n   */\n  validateComponents(components: ThemeComponents): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 检查是否有组件配置\n    if (!components || typeof components !== 'object') {\n      errors.push('Components configuration is required and must be an object');\n      return { valid: false, errors, warnings };\n    }\n\n    // 验证每个组件配置\n    Object.entries(components).forEach(([componentName, config]) => {\n      if (config && typeof config === 'object') {\n        // 验证组件配置中的值\n        Object.entries(config).forEach(([key, value]) => {\n          if (value === null || value === undefined) {\n            warnings.push(`Component ${componentName}.${key} has null/undefined value`);\n          }\n        });\n      } else if (config !== undefined) {\n        errors.push(`Component ${componentName} configuration must be an object or undefined`);\n      }\n    });\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * 验证颜色值\n   */\n  private isValidColor(color: string): boolean {\n    // 支持的颜色格式：\n    // - #rgb, #rrggbb, #rrggbbaa\n    // - rgb(r, g, b), rgba(r, g, b, a)\n    // - hsl(h, s%, l%), hsla(h, s%, l%, a)\n    // - 命名颜色 (red, blue, etc.)\n    // - transparent, currentColor\n    const colorRegex = /^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})|rgb\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*\\)|rgba\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*[\\d.]+\\s*\\)|hsl\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*\\)|hsla\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*,\\s*[\\d.]+\\s*\\)|transparent|currentColor|[a-zA-Z]+)$/;\n    \n    return colorRegex.test(color);\n  }\n\n  /**\n   * 验证主题包ID的唯一性\n   */\n  validateUniqueId(packageId: string, existingPackages: string[]): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (existingPackages.includes(packageId)) {\n      errors.push(`Theme package ID '${packageId}' already exists`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * 验证主题包兼容性\n   */\n  validateCompatibility(config: ThemePackageConfig, targetVersion: string): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 这里可以添加版本兼容性检查\n    // 例如检查主题包是否与当前系统版本兼容\n    \n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n}\n\n// 创建默认验证器实例\nexport const themePackageValidator = new ThemePackageValidatorImpl();\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1461,1464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1461,1464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1656,1659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1656,1659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3067,3070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3067,3070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3174,3177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3174,3177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包系统统一导出\n * 基于 Spec-Kit 方法的可扩展主题架构\n */\n\n// 导入管理器实例用于内部使用\nimport { themePackageManager } from './core/manager';\n\n// 核心架构导出\nexport * from './core/types';\nexport * from './core/validator';\nexport * from './core/registry';\nexport * from './core/loader';\nexport * from './core/manager';\nexport * from './core/auto-discovery';\nexport * from './core/accessibility';\nexport * from './core/menu-variants';\n\n// 默认实例导出\nexport { themePackageValidator } from './core/validator';\nexport { themePackageRegistry } from './core/registry';\nexport { themePackageLoader } from './core/loader';\nexport { themePackageManager } from './core/manager';\nexport { themePackageAutoDiscovery } from './core/auto-discovery';\nexport { menuVariantManager } from './core/menu-variants';\n\n// 可访问性检查工具\nexport { checkAllThemesAccessibility, generateAccessibilityOptimizations, checkColorContrast } from './accessibility-check';\n\n// 主题包导出\nexport { default as lightTheme } from './packages/light';\nexport { default as darkTheme } from './packages/dark';\n\n// 主题包管理器实例\nexport const themeManager = themePackageManager;\n\n// 便捷方法\nexport const loadTheme = (packageId: string) => themePackageManager.loadPackage(packageId);\nexport const loadAllThemes = () => themePackageManager.loadAllPackages();\nexport const getTheme = (packageId: string) => themePackageManager.getPackage(packageId);\nexport const getAllThemes = () => themePackageManager.getAllPackages();\nexport const registerTheme = (config: any) => themePackageManager.registerPackage(config);\nexport const unregisterTheme = (packageId: string) => themePackageManager.unregisterPackage(packageId);\nexport const validateTheme = (config: any) => themePackageManager.validatePackage(config);\nexport const searchThemes = (query: string) => themePackageManager.searchPackages(query);\nexport const getThemesByCategory = (category: string) => themePackageManager.getPackagesByCategory(category);\nexport const getThemesByTag = (tag: string) => themePackageManager.getPackagesByTag(tag);\n\n// 主题包初始化\nexport const initializeThemes = async () => {\n  try {\n    // 注册默认主题包\n    await themePackageManager.loadAllPackages();\n    \n    console.log('Theme packages initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('Failed to initialize theme packages:', error);\n    return false;\n  }\n};\n\n// 主题包统计信息\nexport const getThemeStats = () => themePackageManager.getStats();\n\n// 主题包缓存管理\nexport const clearThemeCache = () => themePackageManager.clearCache();\nexport const getThemeCacheStatus = () => themePackageManager.getCacheStatus();\n\n// 主题包导入导出\nexport const exportTheme = (packageId: string) => themePackageManager.exportPackage(packageId);\nexport const importTheme = (json: string) => themePackageManager.importPackage(json);\nexport const cloneTheme = (packageId: string, newId: string) => themePackageManager.clonePackage(packageId, newId);\nexport const mergeThemes = (baseId: string, overrideId: string, newId: string) => \n  themePackageManager.mergePackages(baseId, overrideId, newId);\n\n// 主题包工厂方法\nexport const createTheme = (config: any) => themePackageManager.createPackage(config);\n\n// 主题包选项管理\nexport const updateThemeOptions = (options: any) => themePackageManager.updateOptions(options);\nexport const getThemeOptions = () => themePackageManager.getOptions();\n\n// 主题包预加载\nexport const preloadThemes = (packageIds: string[]) => themePackageManager.preloadPackages(packageIds);\n\n// 主题包重新加载\nexport const reloadTheme = (packageId: string) => themePackageManager.reloadPackage(packageId);\nexport const reloadAllThemes = () => themePackageManager.reloadAllPackages();\n\n// 主题包存在性检查\nexport const themeExists = (packageId: string) => themePackageManager.packageExists(packageId);\nexport const getThemeInfo = (packageId: string) => themePackageManager.getPackageInfo(packageId);\n\n// 默认主题包ID常量\nexport const DEFAULT_THEME_IDS = {\n  LIGHT: 'light',\n  DARK: 'dark',\n} as const;\n\n// 主题包分类常量\nexport const THEME_CATEGORIES = {\n  LIGHT: 'light',\n  DARK: 'dark',\n  COLORFUL: 'colorful',\n  MINIMAL: 'minimal',\n  PROFESSIONAL: 'professional',\n} as const;\n\n// 主题包标签常量\nexport const THEME_TAGS = {\n  LIGHT: 'light',\n  DARK: 'dark',\n  BRIGHT: 'bright',\n  CLEAN: 'clean',\n  MODERN: 'modern',\n  PROFESSIONAL: 'professional',\n  EYE_FRIENDLY: 'eye-friendly',\n  NIGHT: 'night',\n  COLORFUL: 'colorful',\n  MINIMAL: 'minimal',\n  CUSTOM: 'custom',\n} as const;\n\n// 主题包管理器配置选项\nexport const DEFAULT_THEME_OPTIONS = {\n  autoLoad: true,\n  validateOnLoad: true,\n  cacheEnabled: true,\n  cacheTimeout: 5 * 60 * 1000, // 5 minutes\n  fallbackPackage: 'light',\n  strictMode: false,\n} as const;\n\n// 主题包事件类型\nexport const THEME_EVENTS = {\n  PACKAGE_LOADED: 'packageLoaded',\n  PACKAGE_REGISTERED: 'packageRegistered',\n  PACKAGE_UNREGISTERED: 'packageUnregistered',\n  PACKAGE_UPDATED: 'packageUpdated',\n  PACKAGE_VALIDATED: 'packageValidated',\n  ERROR: 'error',\n} as const;\n\n// 样式生成器和应用器\nexport * from './core/style-generator';\nexport { createStyleGenerator, generateThemeCSS } from './core/style-generator';\n\nexport * from './core/style-applier';\nexport { createStyleApplier, applyThemeStyles, getGlobalStyleManager } from './core/style-applier';\n\n// 主题包管理器实例的便捷访问\nexport default themePackageManager;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/packages/dark/components-extension.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/packages/dark/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/packages/light/components-extension.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/themes/packages/light/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4419,4422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4419,4422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4460,4463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4460,4463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5020,5023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5020,5023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 类型定义入口文件\n * 基于Spec-Kit方法重构的类型系统\n */\n\n// ===== 布局相关类型 =====\nexport interface LayoutConfig {\n  type: 'sidebar' | 'top';\n  collapsed?: boolean;\n  theme?: 'light' | 'dark';\n  fixed?: boolean;\n  width?: number;\n  height?: number;\n}\n\nexport interface LayoutContextType {\n  layout: LayoutConfig;\n  setLayout: (layout: LayoutConfig) => void;\n  toggleLayout: () => void;\n  toggleCollapse: () => void;\n  isSidebar: boolean;\n  isTop: boolean;\n  isCollapsed: boolean;\n  isLoading: boolean;\n}\n\n// ===== 主题相关类型 =====\nexport interface ColorPalette {\n  primary: string;\n  secondary: string;\n  background: string;\n  surface: string;\n  text: string;\n  textSecondary: string;\n  border: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n}\n\nexport interface TypographyConfig {\n  fontFamily: string;\n  fontSize: {\n    xs: string;\n    sm: string;\n    base: string;\n    lg: string;\n    xl: string;\n    xxl: string;\n  };\n  fontWeight: {\n    normal: number;\n    medium: number;\n    semibold: number;\n    bold: number;\n  };\n  lineHeight: {\n    tight: number;\n    normal: number;\n    relaxed: number;\n  };\n}\n\nexport interface SpacingConfig {\n  xs: string;\n  sm: string;\n  md: string;\n  lg: string;\n  xl: string;\n  xxl: string;\n}\n\nexport interface BorderRadiusConfig {\n  sm: string;\n  md: string;\n  lg: string;\n  xl: string;\n}\n\nexport interface ShadowConfig {\n  sm: string;\n  md: string;\n  lg: string;\n  xl: string;\n}\n\nexport interface ThemeConfig {\n  name: string;\n  displayName: string;\n  description?: string;\n  colors: ColorPalette;\n  typography: TypographyConfig;\n  spacing: SpacingConfig;\n  borderRadius: BorderRadiusConfig;\n  shadows: ShadowConfig;\n  isDark?: boolean;\n}\n\nexport interface ThemeContextType {\n  currentTheme: ThemeConfig;\n  availableThemes: ThemeConfig[];\n  setTheme: (themeName: string) => void;\n  toggleTheme: () => void;\n  isDarkMode: boolean;\n  isLoading: boolean;\n}\n\n// ===== 用户相关类型 =====\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  avatar?: string;\n  isActive?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  bio?: string;\n  preferences?: UserPreferences;\n}\n\nexport interface UserPreferences {\n  theme: string;\n  layout: string;\n  language: string;\n  notifications: boolean;\n  emailNotifications: boolean;\n}\n\n// ===== 认证相关类型 =====\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n  captcha?: string;\n  captcha_id?: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  name: string;\n  captcha?: string;\n  captcha_id?: string;\n}\n\nexport interface LoginResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n  user: User;\n}\n\nexport interface RefreshTokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\nexport interface ForgotPasswordData {\n  email: string;\n  captcha?: string;\n  captcha_id?: string;\n}\n\nexport interface ResetPasswordData {\n  token: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface ChangePasswordData {\n  currentPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nexport interface VerifyEmailData {\n  token: string;\n}\n\nexport interface PasswordPolicy {\n  minLength: number;\n  requireUppercase: boolean;\n  requireLowercase: boolean;\n  requireNumbers: boolean;\n  requireSpecialChars: boolean;\n}\n\nexport interface AuthState {\n  user: User | null;\n  accessToken: string | null;\n  refreshTokenValue: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface AuthActions {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n  currentRefreshToken: () => Promise<void>;\n  forgotPassword: (data: ForgotPasswordData) => Promise<void>;\n  resetPassword: (data: ResetPasswordData) => Promise<void>;\n  changePassword: (data: ChangePasswordData) => Promise<void>;\n  verifyEmail: (data: VerifyEmailData) => Promise<void>;\n  clearError: () => void;\n}\n\nexport interface AuthStore extends AuthState, AuthActions {}\n\n// ===== API 相关类型 =====\nexport interface ApiError {\n  message: string;\n  code?: string;\n  status?: number;\n  details?: any;\n}\n\nexport interface ApiResponse<T = any> {\n  data: T;\n  message?: string;\n  success: boolean;\n  timestamp: string;\n}\n\n// ===== 表单相关类型 =====\nexport interface FormField {\n  name: string;\n  label: string;\n  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'textarea';\n  required?: boolean;\n  placeholder?: string;\n  options?: Array<{ label: string; value: string }>;\n  validation?: {\n    min?: number;\n    max?: number;\n    pattern?: string;\n    message?: string;\n  };\n}\n\nexport interface FormConfig {\n  fields: FormField[];\n  submitText: string;\n  resetText?: string;\n  onSubmit: (data: any) => void;\n  onReset?: () => void;\n}\n\n// ===== 组件相关类型 =====\nexport interface ComponentProps {\n  className?: string;\n  children?: React.ReactNode;\n  style?: React.CSSProperties;\n}\n\nexport interface ButtonProps extends ComponentProps {\n  type?: 'primary' | 'secondary' | 'danger' | 'ghost';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  loading?: boolean;\n  onClick?: () => void;\n}\n\nexport interface InputProps extends ComponentProps {\n  type?: 'text' | 'email' | 'password' | 'number';\n  placeholder?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  disabled?: boolean;\n  error?: string;\n}\n\nexport interface CardProps extends ComponentProps {\n  title?: string;\n  extra?: React.ReactNode;\n  bordered?: boolean;\n  hoverable?: boolean;\n}\n\n// ===== 常量定义 =====\nexport const LAYOUT_TYPES = {\n  SIDEBAR: 'sidebar' as const,\n  TOP: 'top' as const,\n} as const;\n\nexport const THEME_NAMES = {\n  LIGHT: 'light' as const,\n  DARK: 'dark' as const,\n  HIGH_CONTRAST: 'high-contrast' as const,\n} as const;\n\nexport const USER_ROLES = {\n  SUPER_ADMIN: 'super_admin' as const,\n  ADMIN: 'admin' as const,\n  USER: 'user' as const,\n} as const;\n\nexport const STORAGE_KEYS = {\n  ACCESS_TOKEN: 'access_token',\n  REFRESH_TOKEN: 'refresh_token',\n  USER: 'user',\n  THEME: 'theme',\n  LAYOUT: 'layout',\n  PREFERENCES: 'preferences',\n} as const;\n\n// ===== 工具类型 =====\nexport type LayoutType = typeof LAYOUT_TYPES[keyof typeof LAYOUT_TYPES];\nexport type ThemeName = typeof THEME_NAMES[keyof typeof THEME_NAMES];\nexport type UserRole = typeof USER_ROLES[keyof typeof USER_ROLES];\nexport type StorageKey = typeof STORAGE_KEYS[keyof typeof STORAGE_KEYS];\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/types/user-preferences.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[477,480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[477,480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[750,753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[750,753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2966,2969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2966,2969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2983,2986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2983,2986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 用户偏好配置系统\n * 支持不同管理员切换不同的主题和布局\n */\n\n// 主题类型\nexport type ThemePreference = 'light' | 'dark' | 'auto';\n\n// 布局类型\nexport type LayoutPreference = 'sidebar' | 'top' | 'auto';\n\n// 用户偏好配置接口\nexport interface UserPreferences {\n  // 主题偏好\n  theme: ThemePreference;\n  // 布局偏好\n  layout: LayoutPreference;\n  // 是否跟随系统主题\n  followSystemTheme: boolean;\n  // 是否记住用户选择\n  rememberPreferences: boolean;\n  // 自定义主题配置（可选）\n  customTheme?: string;\n  // 自定义布局配置（可选）\n  customLayout?: Record<string, any>;\n  // 最后更新时间\n  lastUpdated: string;\n}\n\n// 用户偏好更新接口\nexport interface UserPreferencesUpdate {\n  theme?: ThemePreference;\n  layout?: LayoutPreference;\n  followSystemTheme?: boolean;\n  rememberPreferences?: boolean;\n  customTheme?: string;\n  customLayout?: Record<string, any>;\n}\n\n// 用户偏好同步状态\nexport interface PreferencesSyncStatus {\n  isSyncing: boolean;\n  lastSyncTime?: string;\n  syncError?: string;\n}\n\n// 默认用户偏好\nexport const DEFAULT_USER_PREFERENCES: UserPreferences = {\n  theme: 'auto',\n  layout: 'sidebar',\n  followSystemTheme: true,\n  rememberPreferences: true,\n  lastUpdated: new Date().toISOString(),\n};\n\n// 管理员专用偏好配置\nexport interface AdminPreferences extends UserPreferences {\n  // 是否允许其他用户自定义主题\n  allowUserThemeCustomization: boolean;\n  // 是否允许其他用户自定义布局\n  allowUserLayoutCustomization: boolean;\n  // 默认主题（管理员设置的系统默认）\n  defaultTheme: ThemePreference;\n  // 默认布局（管理员设置的系统默认）\n  defaultLayout: LayoutPreference;\n  // 主题访问权限控制\n  themeAccessControl: {\n    allowedThemes: string[];\n    restrictedThemes: string[];\n  };\n  // 布局访问权限控制\n  layoutAccessControl: {\n    allowedLayouts: string[];\n    restrictedLayouts: string[];\n  };\n}\n\n// 用户偏好验证结果\nexport interface PreferencesValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n// 用户偏好管理器接口\nexport interface UserPreferencesManager {\n  // 获取用户偏好\n  getPreferences(userId: string): Promise<UserPreferences>;\n  \n  // 更新用户偏好\n  updatePreferences(userId: string, preferences: UserPreferencesUpdate): Promise<UserPreferences>;\n  \n  // 重置用户偏好\n  resetPreferences(userId: string): Promise<UserPreferences>;\n  \n  // 验证偏好配置\n  validatePreferences(preferences: UserPreferencesUpdate): PreferencesValidationResult;\n  \n  // 同步偏好到服务器\n  syncPreferences(userId: string, preferences: UserPreferences): Promise<PreferencesSyncStatus>;\n  \n  // 获取管理员偏好\n  getAdminPreferences(adminId: string): Promise<AdminPreferences>;\n  \n  // 更新管理员偏好\n  updateAdminPreferences(adminId: string, preferences: Partial<AdminPreferences>): Promise<AdminPreferences>;\n}\n\n// 主题切换事件\nexport interface ThemeChangeEvent {\n  userId: string;\n  oldTheme: string;\n  newTheme: string;\n  timestamp: string;\n  source: 'user' | 'admin' | 'system';\n}\n\n// 布局切换事件\nexport interface LayoutChangeEvent {\n  userId: string;\n  oldLayout: string;\n  newLayout: string;\n  timestamp: string;\n  source: 'user' | 'admin' | 'system';\n}\n\n// 用户偏好变更历史\nexport interface PreferencesChangeHistory {\n  id: string;\n  userId: string;\n  changeType: 'theme' | 'layout' | 'preferences';\n  oldValue: any;\n  newValue: any;\n  timestamp: string;\n  source: 'user' | 'admin' | 'system';\n}\n\n// 偏好权限检查结果\nexport interface PreferencesPermissionCheck {\n  canChangeTheme: boolean;\n  canChangeLayout: boolean;\n  canUseCustomTheme: boolean;\n  canUseCustomLayout: boolean;\n  allowedThemes: string[];\n  allowedLayouts: string[];\n  restrictions: string[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/utils/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1859,1862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1859,1862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1869,1872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1869,1872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2158,2161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2158,2161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2168,2171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2168,2171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2620,2623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2620,2623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2696,2699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2696,2699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2762,2765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2762,2765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":116,"column":15,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":116,"endColumn":29,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2806,2825],"text":"Object.prototype.hasOwnProperty.call(obj, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2986,2989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2986,2989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3330,3333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3330,3333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3364,3367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3364,3367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3370,3373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3370,3373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3672,3675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3672,3675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3698,3701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3698,3701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4047,4050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4047,4050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4053,4056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4053,4056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4245,4248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4245,4248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * 合并CSS类名的工具函数\n * 结合了clsx和tailwind-merge的功能\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * 格式化日期\n */\nexport function formatDate(date: Date | string, options?: Intl.DateTimeFormatOptions): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    ...options,\n  }).format(dateObj);\n}\n\n/**\n * 格式化时间\n */\nexport function formatTime(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('zh-CN', {\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(dateObj);\n}\n\n/**\n * 格式化相对时间\n */\nexport function formatRelativeTime(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);\n\n  if (diffInSeconds < 60) {\n    return '刚刚';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes}分钟前`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours}小时前`;\n  } else if (diffInSeconds < 2592000) {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days}天前`;\n  } else {\n    return formatDate(dateObj);\n  }\n}\n\n/**\n * 截断文本\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n}\n\n/**\n * 生成随机ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\n/**\n * 防抖函数\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * 节流函数\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * 深拷贝对象\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime()) as any;\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as any;\n  if (typeof obj === 'object') {\n    const clonedObj = {} as any;\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        clonedObj[key] = deepClone(obj[key]);\n      }\n    }\n    return clonedObj;\n  }\n  return obj;\n}\n\n/**\n * 检查是否为空值\n */\nexport function isEmpty(value: any): boolean {\n  if (value === null || value === undefined) return true;\n  if (typeof value === 'string') return value.trim().length === 0;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  return false;\n}\n\n/**\n * 获取嵌套对象属性\n */\nexport function getNestedValue(obj: any, path: string, defaultValue?: any): any {\n  const keys = path.split('.');\n  let result = obj;\n  \n  for (const key of keys) {\n    if (result === null || result === undefined || !(key in result)) {\n      return defaultValue;\n    }\n    result = result[key];\n  }\n  \n  return result;\n}\n\n/**\n * 设置嵌套对象属性\n */\nexport function setNestedValue(obj: any, path: string, value: any): void {\n  const keys = path.split('.');\n  const lastKey = keys.pop()!;\n  let current = obj;\n  \n  for (const key of keys) {\n    if (!(key in current) || typeof current[key] !== 'object') {\n      current[key] = {};\n    }\n    current = current[key];\n  }\n  \n  current[lastKey] = value;\n}\n\n/**\n * 移除对象中的空值\n */\nexport function removeEmptyValues(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.filter(item => !isEmpty(item)).map(item => removeEmptyValues(item));\n  }\n  \n  if (typeof obj === 'object' && obj !== null) {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      if (!isEmpty(value)) {\n        result[key] = removeEmptyValues(value);\n      }\n    }\n    return result;\n  }\n  \n  return obj;\n}\n\n/**\n * 格式化文件大小\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * 验证邮箱格式\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * 验证密码强度\n */\nexport function getPasswordStrength(password: string): {\n  score: number;\n  feedback: string[];\n} {\n  const feedback: string[] = [];\n  let score = 0;\n  \n  if (password.length >= 8) {\n    score += 1;\n  } else {\n    feedback.push('密码至少需要8个字符');\n  }\n  \n  if (/[a-z]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push('需要包含小写字母');\n  }\n  \n  if (/[A-Z]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push('需要包含大写字母');\n  }\n  \n  if (/[0-9]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push('需要包含数字');\n  }\n  \n  if (/[^A-Za-z0-9]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push('建议包含特殊字符');\n  }\n  \n  return { score, feedback };\n}\n\n/**\n * 生成密码强度颜色\n */\nexport function getPasswordStrengthColor(score: number): string {\n  if (score <= 1) return 'text-error-600';\n  if (score <= 2) return 'text-warning-600';\n  if (score <= 3) return 'text-warning-500';\n  if (score <= 4) return 'text-success-500';\n  return 'text-success-600';\n}\n\n/**\n * 生成密码强度文本\n */\nexport function getPasswordStrengthText(score: number): string {\n  if (score <= 1) return '很弱';\n  if (score <= 2) return '弱';\n  if (score <= 3) return '中等';\n  if (score <= 4) return '强';\n  return '很强';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/utils/layout.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LayoutType' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 布局工具函数\n * 基于Spec-Kit方法实现的布局相关工具函数\n */\n\nimport { LayoutType, LayoutConfig, LAYOUT_CONSTANTS } from '../contexts/LayoutContext';\n\n// 布局验证结果接口\nexport interface LayoutValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n// 响应式断点\nexport const BREAKPOINTS = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1600,\n} as const;\n\n// 布局配置验证\nexport const validateLayoutConfig = (config: LayoutConfig): LayoutValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // 验证布局类型\n  if (!config.type || (config.type !== 'sidebar' && config.type !== 'top')) {\n    errors.push('Invalid layout type');\n  }\n\n  // 验证宽度\n  if (config.width && (config.width < 200 || config.width > 400)) {\n    warnings.push('Layout width should be between 200px and 400px');\n  }\n\n  // 验证高度\n  if (config.height && (config.height < 48 || config.height > 80)) {\n    warnings.push('Layout height should be between 48px and 80px');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n// 获取当前断点\nexport const getCurrentBreakpoint = (): keyof typeof BREAKPOINTS => {\n  const width = window.innerWidth;\n  \n  if (width >= BREAKPOINTS.xxl) return 'xxl';\n  if (width >= BREAKPOINTS.xl) return 'xl';\n  if (width >= BREAKPOINTS.lg) return 'lg';\n  if (width >= BREAKPOINTS.md) return 'md';\n  if (width >= BREAKPOINTS.sm) return 'sm';\n  return 'xs';\n};\n\n// 检查是否为移动设备\nexport const isMobile = (): boolean => {\n  return window.innerWidth < BREAKPOINTS.md;\n};\n\n// 检查是否为平板设备\nexport const isTablet = (): boolean => {\n  const width = window.innerWidth;\n  return width >= BREAKPOINTS.md && width < BREAKPOINTS.lg;\n};\n\n// 检查是否为桌面设备\nexport const isDesktop = (): boolean => {\n  return window.innerWidth >= BREAKPOINTS.lg;\n};\n\n// 计算布局尺寸\nexport const calculateLayoutDimensions = (config: LayoutConfig) => {\n  const dimensions = {\n    sidebarWidth: LAYOUT_CONSTANTS.SIDEBAR_WIDTH,\n    sidebarCollapsedWidth: LAYOUT_CONSTANTS.SIDEBAR_COLLAPSED_WIDTH,\n    topMenuHeight: LAYOUT_CONSTANTS.TOP_MENU_HEIGHT,\n  };\n\n  if (config.type === 'sidebar') {\n    dimensions.sidebarWidth = config.collapsed \n      ? LAYOUT_CONSTANTS.SIDEBAR_COLLAPSED_WIDTH \n      : (config.width || LAYOUT_CONSTANTS.SIDEBAR_WIDTH);\n  }\n\n  if (config.type === 'top') {\n    dimensions.topMenuHeight = config.height || LAYOUT_CONSTANTS.TOP_MENU_HEIGHT;\n  }\n\n  return dimensions;\n};\n\n// 生成布局CSS变量\nexport const generateLayoutCSSVariables = (config: LayoutConfig): Record<string, string> => {\n  const dimensions = calculateLayoutDimensions(config);\n  \n  return {\n    '--layout-type': config.type,\n    '--sidebar-width': `${dimensions.sidebarWidth}px`,\n    '--sidebar-collapsed-width': `${dimensions.sidebarCollapsedWidth}px`,\n    '--top-menu-height': `${dimensions.topMenuHeight}px`,\n    '--layout-fixed': config.fixed ? '1' : '0',\n    '--layout-transition-duration': `${LAYOUT_CONSTANTS.ANIMATION_DURATION}ms`,\n  };\n};\n\n// 应用布局CSS变量\nexport const applyLayoutCSSVariables = (config: LayoutConfig): void => {\n  const variables = generateLayoutCSSVariables(config);\n  const root = document.documentElement;\n\n  Object.entries(variables).forEach(([key, value]) => {\n    root.style.setProperty(key, value);\n  });\n\n  // 添加布局类名\n  root.className = root.className.replace(/layout-\\w+/g, '');\n  root.classList.add(`layout-${config.type}`);\n  \n  if (config.collapsed) {\n    root.classList.add('layout-collapsed');\n  }\n  \n  if (config.fixed) {\n    root.classList.add('layout-fixed');\n  }\n};\n\n// 布局切换动画\nexport const animateLayoutSwitch = (\n  fromConfig: LayoutConfig, \n  toConfig: LayoutConfig,\n  duration: number = LAYOUT_CONSTANTS.ANIMATION_DURATION\n): Promise<void> => {\n  return new Promise((resolve) => {\n    const root = document.documentElement;\n    \n    // 添加过渡类\n    root.classList.add('layout-transitioning');\n    \n    // 应用新配置\n    applyLayoutCSSVariables(toConfig);\n    \n    // 等待动画完成\n    setTimeout(() => {\n      root.classList.remove('layout-transitioning');\n      resolve();\n    }, duration);\n  });\n};\n\n// 获取布局统计信息\nexport const getLayoutStats = (config: LayoutConfig) => {\n  const dimensions = calculateLayoutDimensions(config);\n  const breakpoint = getCurrentBreakpoint();\n  \n  return {\n    type: config.type,\n    collapsed: config.collapsed || false,\n    fixed: config.fixed || false,\n    dimensions,\n    breakpoint,\n    isMobile: isMobile(),\n    isTablet: isTablet(),\n    isDesktop: isDesktop(),\n  };\n};\n\n// 重置布局配置\nexport const resetLayoutConfig = (): LayoutConfig => {\n  const defaultConfig = {\n    type: 'sidebar' as const,\n    collapsed: false,\n    theme: 'light' as const,\n    fixed: true,\n    width: LAYOUT_CONSTANTS.SIDEBAR_WIDTH,\n    height: LAYOUT_CONSTANTS.TOP_MENU_HEIGHT,\n  };\n  \n  return defaultConfig;\n};\n\n// 导出布局工具函数\nexport const layoutUtils = {\n  validateLayoutConfig,\n  getCurrentBreakpoint,\n  isMobile,\n  isTablet,\n  isDesktop,\n  calculateLayoutDimensions,\n  generateLayoutCSSVariables,\n  applyLayoutCSSVariables,\n  animateLayoutSwitch,\n  getLayoutStats,\n  resetLayoutConfig\n};\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/utils/style-scanner.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dirPath' is defined but never used.","line":93,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extensions' is defined but never used.","line":93,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filePath' is defined but never used.","line":108,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalIssues' is assigned a value but never used.","line":118,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 样式扫描器\n * 用于扫描和识别代码中的样式违规项\n */\n\nimport { ThemeStyleValidator, ValidationResult } from './theme-style-validator';\n\nexport interface ScanResult {\n  totalFiles: number;\n  violations: number;\n  warnings: number;\n  suggestions: number;\n  files: FileScanResult[];\n}\n\nexport interface FileScanResult {\n  file: string;\n  violations: ValidationResult['violations'];\n  warnings: ValidationResult['warnings'];\n  suggestions: ValidationResult['suggestions'];\n  score: number; // 0-100, 100为完全合规\n}\n\nexport class StyleScanner {\n  private results: FileScanResult[] = [];\n\n  /**\n   * 扫描目录中的所有文件\n   */\n  async scanDirectory(dirPath: string): Promise<ScanResult> {\n    this.results = [];\n    \n    // 扫描 TypeScript/JavaScript 文件\n    await this.scanTSXFiles(dirPath);\n    \n    // 扫描 CSS 文件\n    await this.scanCSSFiles(dirPath);\n    \n    return this.generateReport();\n  }\n\n  /**\n   * 扫描 TSX 文件\n   */\n  private async scanTSXFiles(dirPath: string): Promise<void> {\n    const files = await this.getFiles(dirPath, ['.tsx', '.ts', '.jsx', '.js']);\n    \n    for (const file of files) {\n      try {\n        const content = await this.readFile(file);\n        const result = ThemeStyleValidator.validateComponent(content, file);\n        \n        this.results.push({\n          file,\n          violations: result.violations,\n          warnings: result.warnings,\n          suggestions: result.suggestions,\n          score: this.calculateScore(result)\n        });\n      } catch (error) {\n        console.error(`扫描文件失败: ${file}`, error);\n      }\n    }\n  }\n\n  /**\n   * 扫描 CSS 文件\n   */\n  private async scanCSSFiles(dirPath: string): Promise<void> {\n    const files = await this.getFiles(dirPath, ['.css', '.scss', '.less']);\n    \n    for (const file of files) {\n      try {\n        const content = await this.readFile(file);\n        const result = ThemeStyleValidator.validateCSS(content, file);\n        \n        this.results.push({\n          file,\n          violations: result.violations,\n          warnings: result.warnings,\n          suggestions: result.suggestions,\n          score: this.calculateScore(result)\n        });\n      } catch (error) {\n        console.error(`扫描文件失败: ${file}`, error);\n      }\n    }\n  }\n\n  /**\n   * 获取文件列表\n   */\n  private async getFiles(dirPath: string, extensions: string[]): Promise<string[]> {\n    // 这里应该实现文件系统扫描\n    // 由于在浏览器环境中，我们使用模拟数据\n    return [\n      'src/components/layout/SidebarLayout.tsx',\n      'src/components/layout/TopMenuLayout.tsx',\n      'src/components/QuickSettingsPanel.tsx',\n      'src/styles/global.css',\n      'src/styles/menu-theme.css'\n    ];\n  }\n\n  /**\n   * 读取文件内容\n   */\n  private async readFile(filePath: string): Promise<string> {\n    // 这里应该实现文件读取\n    // 由于在浏览器环境中，我们返回模拟内容\n    return '// 模拟文件内容';\n  }\n\n  /**\n   * 计算合规性分数\n   */\n  private calculateScore(result: ValidationResult): number {\n    const totalIssues = result.violations.length + result.warnings.length;\n    const errorWeight = result.violations.length * 10;\n    const warningWeight = result.warnings.length * 5;\n    \n    const totalWeight = errorWeight + warningWeight;\n    const maxWeight = 100; // 假设最大权重为100\n    \n    return Math.max(0, 100 - (totalWeight / maxWeight) * 100);\n  }\n\n  /**\n   * 生成扫描报告\n   */\n  private generateReport(): ScanResult {\n    const totalFiles = this.results.length;\n    const violations = this.results.reduce((sum, result) => sum + result.violations.length, 0);\n    const warnings = this.results.reduce((sum, result) => sum + result.warnings.length, 0);\n    const suggestions = this.results.reduce((sum, result) => sum + result.suggestions.length, 0);\n\n    return {\n      totalFiles,\n      violations,\n      warnings,\n      suggestions,\n      files: this.results\n    };\n  }\n\n  /**\n   * 获取违规最多的文件\n   */\n  getTopViolationFiles(limit: number = 10): FileScanResult[] {\n    return this.results\n      .sort((a, b) => b.violations.length - a.violations.length)\n      .slice(0, limit);\n  }\n\n  /**\n   * 获取合规性最差的文件\n   */\n  getLowestScoreFiles(limit: number = 10): FileScanResult[] {\n    return this.results\n      .sort((a, b) => a.score - b.score)\n      .slice(0, limit);\n  }\n\n  /**\n   * 生成修复建议\n   */\n  generateFixSuggestions(): string[] {\n    const suggestions: string[] = [];\n    \n    // 统计最常见的违规类型\n    const violationTypes = new Map<string, number>();\n    this.results.forEach(result => {\n      result.violations.forEach(violation => {\n        violationTypes.set(violation.type, (violationTypes.get(violation.type) || 0) + 1);\n      });\n    });\n\n    // 生成修复建议\n    violationTypes.forEach((count, type) => {\n      switch (type) {\n        case 'inline-style':\n          suggestions.push(`发现 ${count} 个内联样式违规，建议使用主题包样式替代`);\n          break;\n        case 'hardcoded-value':\n          suggestions.push(`发现 ${count} 个硬编码值违规，建议使用主题包变量`);\n          break;\n        case 'missing-theme':\n          suggestions.push(`发现 ${count} 个缺少主题包的文件，建议添加主题包支持`);\n          break;\n        case 'invalid-theme-usage':\n          suggestions.push(`发现 ${count} 个主题包使用错误，建议修正使用方式`);\n          break;\n      }\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * 导出扫描结果\n   */\n  exportResults(): string {\n    const report = this.generateReport();\n    let output = '# 样式扫描报告\\n\\n';\n    \n    output += `## 概览\\n`;\n    output += `- 总文件数: ${report.totalFiles}\\n`;\n    output += `- 违规数量: ${report.violations}\\n`;\n    output += `- 警告数量: ${report.warnings}\\n`;\n    output += `- 建议数量: ${report.suggestions}\\n`;\n    output += `- 平均合规分数: ${(report.files.reduce((sum, f) => sum + f.score, 0) / report.totalFiles).toFixed(1)}\\n\\n`;\n\n    // 违规最多的文件\n    const topViolations = this.getTopViolationFiles(5);\n    if (topViolations.length > 0) {\n      output += `## 违规最多的文件\\n\\n`;\n      topViolations.forEach((result, index) => {\n        output += `${index + 1}. **${result.file}** (${result.violations.length} 个违规)\\n`;\n      });\n      output += `\\n`;\n    }\n\n    // 合规性最差的文件\n    const lowestScores = this.getLowestScoreFiles(5);\n    if (lowestScores.length > 0) {\n      output += `## 合规性最差的文件\\n\\n`;\n      lowestScores.forEach((result, index) => {\n        output += `${index + 1}. **${result.file}** (分数: ${result.score.toFixed(1)})\\n`;\n      });\n      output += `\\n`;\n    }\n\n    // 修复建议\n    const fixSuggestions = this.generateFixSuggestions();\n    if (fixSuggestions.length > 0) {\n      output += `## 修复建议\\n\\n`;\n      fixSuggestions.forEach((suggestion, index) => {\n        output += `${index + 1}. ${suggestion}\\n`;\n      });\n      output += `\\n`;\n    }\n\n    return output;\n  }\n}\n\n// 导出便捷函数\nexport const scanProject = async (dirPath: string): Promise<ScanResult> => {\n  const scanner = new StyleScanner();\n  return await scanner.scanDirectory(dirPath);\n};\n\nexport const generateScanReport = async (dirPath: string): Promise<string> => {\n  const scanner = new StyleScanner();\n  await scanner.scanDirectory(dirPath);\n  return scanner.exportResults();\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/utils/theme-enforcer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":116,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":168,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包强制器\n * 提供运行时样式验证和强制应用主题包样式\n */\n\nexport interface ThemeEnforcerConfig {\n  strictMode: boolean;\n  autoFix: boolean;\n  reportViolations: boolean;\n  fallbackTheme: string;\n}\n\nexport interface EnforcementResult {\n  success: boolean;\n  violations: string[];\n  fixes: string[];\n  warnings: string[];\n}\n\nexport class ThemeEnforcer {\n  private config: ThemeEnforcerConfig;\n  private violations: Set<string> = new Set();\n  private fixes: Set<string> = new Set();\n  private warnings: Set<string> = new Set();\n\n  constructor(config: Partial<ThemeEnforcerConfig> = {}) {\n    this.config = {\n      strictMode: true,\n      autoFix: false,\n      reportViolations: true,\n      fallbackTheme: 'light',\n      ...config\n    };\n\n    this.initializeEnforcement();\n  }\n\n  /**\n   * 初始化强制器\n   */\n  private initializeEnforcement(): void {\n    if (typeof window === 'undefined') return;\n\n    // 监听 DOM 变化\n    this.observeDOMChanges();\n    \n    // 监听样式变化\n    this.observeStyleChanges();\n    \n    // 初始化检查\n    this.performInitialCheck();\n  }\n\n  /**\n   * 监听 DOM 变化\n   */\n  private observeDOMChanges(): void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              this.checkElement(node as Element);\n            }\n          });\n        } else if (mutation.type === 'attributes') {\n          if (mutation.attributeName === 'style') {\n            this.checkElement(mutation.target as Element);\n          }\n        }\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['style']\n    });\n  }\n\n  /**\n   * 监听样式变化\n   */\n  private observeStyleChanges(): void {\n    // 监听 CSS 样式表变化\n    const styleSheets = document.styleSheets;\n    for (let i = 0; i < styleSheets.length; i++) {\n      try {\n        const styleSheet = styleSheets[i];\n        if (styleSheet.rules) {\n          this.checkStyleSheet(styleSheet);\n        }\n      } catch (e) {\n        // 跨域样式表无法访问\n        console.warn('无法访问样式表:', e);\n      }\n    }\n  }\n\n  /**\n   * 执行初始检查\n   */\n  private performInitialCheck(): void {\n    // 检查所有元素\n    const allElements = document.querySelectorAll('*');\n    allElements.forEach((element) => {\n      this.checkElement(element);\n    });\n\n    // 检查所有样式表\n    const styleSheets = document.styleSheets;\n    for (let i = 0; i < styleSheets.length; i++) {\n      try {\n        this.checkStyleSheet(styleSheets[i]);\n      } catch (e) {\n        // 忽略跨域样式表\n      }\n    }\n\n    // 报告结果\n    if (this.config.reportViolations) {\n      this.reportResults();\n    }\n  }\n\n  /**\n   * 检查元素\n   */\n  private checkElement(element: Element): void {\n    // 检查内联样式\n    if (element.hasAttribute('style')) {\n      const violation = `元素 ${element.tagName} 使用了内联样式`;\n      this.violations.add(violation);\n      \n      if (this.config.autoFix) {\n        this.fixInlineStyle(element);\n      }\n    }\n\n    // 检查主题类名\n    if (!this.hasThemeClass(element)) {\n      const warning = `元素 ${element.tagName} 缺少主题类名`;\n      this.warnings.add(warning);\n      \n      if (this.config.autoFix) {\n        this.fixThemeClass(element);\n      }\n    }\n\n    // 检查硬编码样式\n    const computedStyle = window.getComputedStyle(element);\n    this.checkHardcodedStyles(element, computedStyle);\n  }\n\n  /**\n   * 检查样式表\n   */\n  private checkStyleSheet(styleSheet: CSSStyleSheet): void {\n    try {\n      const rules = styleSheet.cssRules || styleSheet.rules;\n      for (let i = 0; i < rules.length; i++) {\n        const rule = rules[i];\n        if (rule.type === CSSRule.STYLE_RULE) {\n          this.checkCSSRule(rule as CSSStyleRule);\n        }\n      }\n    } catch (e) {\n      // 忽略无法访问的规则\n    }\n  }\n\n  /**\n   * 检查 CSS 规则\n   */\n  private checkCSSRule(rule: CSSStyleRule): void {\n    const style = rule.style;\n    \n    // 检查硬编码颜色值\n    if (style.color && /#[0-9a-fA-F]{3,6}/.test(style.color)) {\n      const violation = `CSS 规则 ${rule.selectorText} 使用了硬编码颜色值: ${style.color}`;\n      this.violations.add(violation);\n    }\n\n    // 检查硬编码背景色\n    if (style.backgroundColor && /#[0-9a-fA-F]{3,6}/.test(style.backgroundColor)) {\n      const violation = `CSS 规则 ${rule.selectorText} 使用了硬编码背景色: ${style.backgroundColor}`;\n      this.violations.add(violation);\n    }\n\n    // 检查硬编码尺寸\n    if (style.width && /[0-9]+px/.test(style.width)) {\n      const warning = `CSS 规则 ${rule.selectorText} 使用了硬编码宽度: ${style.width}`;\n      this.warnings.add(warning);\n    }\n\n    if (style.height && /[0-9]+px/.test(style.height)) {\n      const warning = `CSS 规则 ${rule.selectorText} 使用了硬编码高度: ${style.height}`;\n      this.warnings.add(warning);\n    }\n  }\n\n  /**\n   * 检查硬编码样式\n   */\n  private checkHardcodedStyles(element: Element, computedStyle: CSSStyleDeclaration): void {\n    // 检查硬编码颜色\n    if (computedStyle.color && /#[0-9a-fA-F]{3,6}/.test(computedStyle.color)) {\n      const violation = `元素 ${element.tagName} 使用硬编码颜色: ${computedStyle.color}`;\n      this.violations.add(violation);\n    }\n\n    // 检查硬编码背景色\n    if (computedStyle.backgroundColor && /#[0-9a-fA-F]{3,6}/.test(computedStyle.backgroundColor)) {\n      const violation = `元素 ${element.tagName} 使用硬编码背景色: ${computedStyle.backgroundColor}`;\n      this.violations.add(violation);\n    }\n  }\n\n  /**\n   * 检查是否有主题类名\n   */\n  private hasThemeClass(element: Element): boolean {\n    const classList = element.classList;\n    return classList.contains('light-theme') || \n           classList.contains('dark-theme') ||\n           classList.contains('theme-light') ||\n           classList.contains('theme-dark');\n  }\n\n  /**\n   * 修复内联样式\n   */\n  private fixInlineStyle(element: Element): void {\n    const style = element.getAttribute('style');\n    if (style) {\n      // 移除内联样式\n      element.removeAttribute('style');\n      \n      // 添加主题类名\n      if (!this.hasThemeClass(element)) {\n        element.classList.add(`${this.config.fallbackTheme}-theme`);\n      }\n      \n      const fix = `修复元素 ${element.tagName} 的内联样式`;\n      this.fixes.add(fix);\n    }\n  }\n\n  /**\n   * 修复主题类名\n   */\n  private fixThemeClass(element: Element): void {\n    if (!this.hasThemeClass(element)) {\n      element.classList.add(`${this.config.fallbackTheme}-theme`);\n      \n      const fix = `为元素 ${element.tagName} 添加主题类名`;\n      this.fixes.add(fix);\n    }\n  }\n\n  /**\n   * 报告结果\n   */\n  private reportResults(): void {\n    const result: EnforcementResult = {\n      success: this.violations.size === 0,\n      violations: Array.from(this.violations),\n      fixes: Array.from(this.fixes),\n      warnings: Array.from(this.warnings)\n    };\n\n    // 控制台输出\n    console.group('🎨 主题包样式强制验证结果');\n    \n    if (result.violations.length > 0) {\n      console.error('❌ 发现违规:', result.violations);\n    }\n    \n    if (result.warnings.length > 0) {\n      console.warn('⚠️ 发现警告:', result.warnings);\n    }\n    \n    if (result.fixes.length > 0) {\n      console.info('✅ 自动修复:', result.fixes);\n    }\n    \n    if (result.success) {\n      console.info('🎉 所有样式符合主题包强制规范');\n    }\n    \n    console.groupEnd();\n\n    // 触发自定义事件\n    const event = new CustomEvent('themeEnforcementResult', {\n      detail: result\n    });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * 获取当前主题\n   */\n  getCurrentTheme(): string {\n    const body = document.body;\n    if (body.classList.contains('dark-theme')) return 'dark';\n    if (body.classList.contains('light-theme')) return 'light';\n    return this.config.fallbackTheme;\n  }\n\n  /**\n   * 设置主题\n   */\n  setTheme(theme: string): void {\n    const body = document.body;\n    \n    // 移除现有主题类\n    body.classList.remove('light-theme', 'dark-theme');\n    \n    // 添加新主题类\n    body.classList.add(`${theme}-theme`);\n    \n    // 重新检查\n    this.performInitialCheck();\n  }\n\n  /**\n   * 获取执行结果\n   */\n  getResult(): EnforcementResult {\n    return {\n      success: this.violations.size === 0,\n      violations: Array.from(this.violations),\n      fixes: Array.from(this.fixes),\n      warnings: Array.from(this.warnings)\n    };\n  }\n\n  /**\n   * 重置结果\n   */\n  reset(): void {\n    this.violations.clear();\n    this.fixes.clear();\n    this.warnings.clear();\n  }\n}\n\n// 创建全局实例\nlet globalEnforcer: ThemeEnforcer | null = null;\n\n/**\n * 获取全局主题包强制器\n */\nexport function getThemeEnforcer(config?: Partial<ThemeEnforcerConfig>): ThemeEnforcer {\n  if (!globalEnforcer) {\n    globalEnforcer = new ThemeEnforcer(config);\n  }\n  return globalEnforcer;\n}\n\n/**\n * 初始化主题包强制器\n */\nexport function initializeThemeEnforcer(config?: Partial<ThemeEnforcerConfig>): ThemeEnforcer {\n  globalEnforcer = new ThemeEnforcer(config);\n  return globalEnforcer;\n}\n\n/**\n * 检查样式合规性\n */\nexport function checkStyleCompliance(): EnforcementResult {\n  const enforcer = getThemeEnforcer();\n  return enforcer.getResult();\n}\n\n/**\n * 强制应用主题\n */\nexport function enforceTheme(theme: string): void {\n  const enforcer = getThemeEnforcer();\n  enforcer.setTheme(theme);\n}\n\n// 导出类型和类\nexport type { ThemeEnforcerConfig, EnforcementResult };\nexport { ThemeEnforcer };\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/utils/theme-style-validator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":104,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileName' is defined but never used.","line":224,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":224,"endColumn":68}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主题包样式验证器\n * 用于验证组件和样式是否符合主题包强制规范\n */\n\nexport interface ValidationResult {\n  isValid: boolean;\n  violations: Violation[];\n  warnings: Warning[];\n  suggestions: Suggestion[];\n}\n\nexport interface Violation {\n  type: 'inline-style' | 'hardcoded-value' | 'missing-theme' | 'invalid-theme-usage';\n  message: string;\n  severity: 'error' | 'warning';\n  file?: string;\n  line?: number;\n  column?: number;\n  code?: string;\n}\n\nexport interface Warning {\n  type: 'performance' | 'accessibility' | 'consistency';\n  message: string;\n  suggestion?: string;\n}\n\nexport interface Suggestion {\n  type: 'optimization' | 'best-practice' | 'migration';\n  message: string;\n  code?: string;\n}\n\nexport class ThemeStyleValidator {\n  private static instance: ThemeStyleValidator;\n  private violations: Violation[] = [];\n  private warnings: Warning[] = [];\n  private suggestions: Suggestion[] = [];\n\n  static getInstance(): ThemeStyleValidator {\n    if (!ThemeStyleValidator.instance) {\n      ThemeStyleValidator.instance = new ThemeStyleValidator();\n    }\n    return ThemeStyleValidator.instance;\n  }\n\n  /**\n   * 验证组件是否使用内联样式\n   */\n  static validateComponent(componentCode: string, fileName: string): ValidationResult {\n    const validator = ThemeStyleValidator.getInstance();\n    validator.reset();\n\n    // 检查内联样式\n    validator.checkInlineStyles(componentCode, fileName);\n    \n    // 检查主题包使用\n    validator.checkThemePackageUsage(componentCode, fileName);\n    \n    // 检查样式一致性\n    validator.checkStyleConsistency(componentCode, fileName);\n\n    return {\n      isValid: validator.violations.length === 0,\n      violations: validator.violations,\n      warnings: validator.warnings,\n      suggestions: validator.suggestions\n    };\n  }\n\n  /**\n   * 验证 CSS 文件\n   */\n  static validateCSS(cssContent: string, fileName: string): ValidationResult {\n    const validator = ThemeStyleValidator.getInstance();\n    validator.reset();\n\n    // 检查硬编码值\n    validator.checkHardcodedValues(cssContent, fileName);\n    \n    // 检查 CSS 变量使用\n    validator.checkCSSVariables(cssContent, fileName);\n    \n    // 检查主题包应用\n    validator.checkThemePackageApplication(cssContent, fileName);\n\n    return {\n      isValid: validator.violations.length === 0,\n      violations: validator.violations,\n      warnings: validator.warnings,\n      suggestions: validator.suggestions\n    };\n  }\n\n  /**\n   * 检查内联样式\n   */\n  private checkInlineStyles(code: string, fileName: string): void {\n    const inlineStyleRegex = /style\\s*=\\s*\\{[^}]*\\}/g;\n    const matches = code.match(inlineStyleRegex);\n\n    if (matches) {\n      matches.forEach((match, index) => {\n        const violation: Violation = {\n          type: 'inline-style',\n          message: '禁止使用内联样式，请使用主题包样式',\n          severity: 'error',\n          file: fileName,\n          code: match\n        };\n        this.violations.push(violation);\n      });\n    }\n  }\n\n  /**\n   * 检查主题包使用\n   */\n  private checkThemePackageUsage(code: string, fileName: string): void {\n    const hasThemeImport = /import.*useTheme.*from.*ThemeContext/.test(code);\n    const hasThemeUsage = /useTheme\\(\\)/.test(code);\n    const hasThemeClassName = /className.*theme/.test(code);\n\n    if (!hasThemeImport && !hasThemeUsage && !hasThemeClassName) {\n      const violation: Violation = {\n        type: 'missing-theme',\n        message: '组件未使用主题包，请导入并使用 useTheme hook',\n        severity: 'warning',\n        file: fileName\n      };\n      this.violations.push(violation);\n\n      const suggestion: Suggestion = {\n        type: 'migration',\n        message: '添加主题包支持：import { useTheme } from \"../contexts/ThemeContext\"',\n        code: 'import { useTheme } from \"../contexts/ThemeContext\";'\n      };\n      this.suggestions.push(suggestion);\n    }\n  }\n\n  /**\n   * 检查样式一致性\n   */\n  private checkStyleConsistency(code: string, fileName: string): void {\n    const hasHardcodedColors = /#[0-9a-fA-F]{3,6}/.test(code);\n    const hasHardcodedSizes = /[0-9]+px/.test(code);\n\n    if (hasHardcodedColors) {\n      const violation: Violation = {\n        type: 'hardcoded-value',\n        message: '发现硬编码颜色值，请使用主题包变量',\n        severity: 'error',\n        file: fileName\n      };\n      this.violations.push(violation);\n    }\n\n    if (hasHardcodedSizes) {\n      const warning: Warning = {\n        type: 'consistency',\n        message: '发现硬编码尺寸值，建议使用主题包变量',\n        suggestion: '使用主题包中的间距和尺寸变量'\n      };\n      this.warnings.push(warning);\n    }\n  }\n\n  /**\n   * 检查硬编码值\n   */\n  private checkHardcodedValues(cssContent: string, fileName: string): void {\n    // 检查硬编码颜色\n    const hardcodedColors = cssContent.match(/#[0-9a-fA-F]{3,6}/g);\n    if (hardcodedColors) {\n      hardcodedColors.forEach(color => {\n        const violation: Violation = {\n          type: 'hardcoded-value',\n          message: `发现硬编码颜色值: ${color}，请使用主题包变量`,\n          severity: 'error',\n          file: fileName,\n          code: color\n        };\n        this.violations.push(violation);\n      });\n    }\n\n    // 检查硬编码尺寸\n    const hardcodedSizes = cssContent.match(/[0-9]+px/g);\n    if (hardcodedSizes) {\n      hardcodedSizes.forEach(size => {\n        const warning: Warning = {\n          type: 'consistency',\n          message: `发现硬编码尺寸值: ${size}，建议使用主题包变量`,\n          suggestion: '使用主题包中的间距和尺寸变量'\n        };\n        this.warnings.push(warning);\n      });\n    }\n  }\n\n  /**\n   * 检查 CSS 变量使用\n   */\n  private checkCSSVariables(cssContent: string, fileName: string): void {\n    const hasCSSVariables = /var\\(--[^)]+\\)/.test(cssContent);\n    const hasThemeClasses = /\\.(light-theme|dark-theme)/.test(cssContent);\n\n    if (!hasCSSVariables && !hasThemeClasses) {\n      const violation: Violation = {\n        type: 'missing-theme',\n        message: 'CSS 文件未使用主题包变量或主题类',\n        severity: 'warning',\n        file: fileName\n      };\n      this.violations.push(violation);\n    }\n  }\n\n  /**\n   * 检查主题包应用\n   */\n  private checkThemePackageApplication(cssContent: string, fileName: string): void {\n    const hasLightTheme = /\\.light-theme/.test(cssContent);\n    const hasDarkTheme = /\\.dark-theme/.test(cssContent);\n\n    if (!hasLightTheme || !hasDarkTheme) {\n      const warning: Warning = {\n        type: 'consistency',\n        message: 'CSS 文件缺少完整的主题支持',\n        suggestion: '添加 .light-theme 和 .dark-theme 类样式'\n      };\n      this.warnings.push(warning);\n    }\n  }\n\n  /**\n   * 重置验证器状态\n   */\n  private reset(): void {\n    this.violations = [];\n    this.warnings = [];\n    this.suggestions = [];\n  }\n\n  /**\n   * 生成验证报告\n   */\n  static generateReport(results: ValidationResult[]): string {\n    let report = '# 主题包样式验证报告\\n\\n';\n    \n    const totalFiles = results.length;\n    const validFiles = results.filter(r => r.isValid).length;\n    const invalidFiles = totalFiles - validFiles;\n    \n    report += `## 概览\\n`;\n    report += `- 总文件数: ${totalFiles}\\n`;\n    report += `- 通过验证: ${validFiles}\\n`;\n    report += `- 未通过验证: ${invalidFiles}\\n`;\n    report += `- 通过率: ${((validFiles / totalFiles) * 100).toFixed(1)}%\\n\\n`;\n\n    // 违规详情\n    const allViolations = results.flatMap(r => r.violations);\n    if (allViolations.length > 0) {\n      report += `## 违规详情\\n\\n`;\n      allViolations.forEach((violation, index) => {\n        report += `### ${index + 1}. ${violation.type}\\n`;\n        report += `- **文件**: ${violation.file}\\n`;\n        report += `- **严重级别**: ${violation.severity}\\n`;\n        report += `- **消息**: ${violation.message}\\n`;\n        if (violation.code) {\n          report += `- **代码**: \\`${violation.code}\\`\\n`;\n        }\n        report += `\\n`;\n      });\n    }\n\n    // 警告详情\n    const allWarnings = results.flatMap(r => r.warnings);\n    if (allWarnings.length > 0) {\n      report += `## 警告详情\\n\\n`;\n      allWarnings.forEach((warning, index) => {\n        report += `### ${index + 1}. ${warning.type}\\n`;\n        report += `- **消息**: ${warning.message}\\n`;\n        if (warning.suggestion) {\n          report += `- **建议**: ${warning.suggestion}\\n`;\n        }\n        report += `\\n`;\n      });\n    }\n\n    // 建议详情\n    const allSuggestions = results.flatMap(r => r.suggestions);\n    if (allSuggestions.length > 0) {\n      report += `## 改进建议\\n\\n`;\n      allSuggestions.forEach((suggestion, index) => {\n        report += `### ${index + 1}. ${suggestion.type}\\n`;\n        report += `- **消息**: ${suggestion.message}\\n`;\n        if (suggestion.code) {\n          report += `- **代码示例**: \\`\\`\\`typescript\\n${suggestion.code}\\n\\`\\`\\`\\n`;\n        }\n        report += `\\n`;\n      });\n    }\n\n    return report;\n  }\n\n  /**\n   * 自动修复建议\n   */\n  static generateAutoFixSuggestions(result: ValidationResult): string[] {\n    const suggestions: string[] = [];\n\n    result.violations.forEach(violation => {\n      switch (violation.type) {\n        case 'inline-style':\n          suggestions.push('将内联样式移动到主题包中，使用 className 替代');\n          break;\n        case 'hardcoded-value':\n          suggestions.push('将硬编码值替换为主题包变量');\n          break;\n        case 'missing-theme':\n          suggestions.push('添加主题包支持和主题类名');\n          break;\n        case 'invalid-theme-usage':\n          suggestions.push('修正主题包使用方式');\n          break;\n      }\n    });\n\n    return suggestions;\n  }\n}\n\n// 导出便捷函数\nexport const validateComponent = ThemeStyleValidator.validateComponent;\nexport const validateCSS = ThemeStyleValidator.validateCSS;\nexport const generateReport = ThemeStyleValidator.generateReport;\nexport const generateAutoFixSuggestions = ThemeStyleValidator.generateAutoFixSuggestions;\n","usedDeprecatedRules":[]},{"filePath":"/Users/kuangxb/Desktop/spec-kit/demo-project/frontend/src/utils/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
